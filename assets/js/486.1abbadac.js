(window.webpackJsonp=window.webpackJsonp||[]).push([[486],{974:function(n,e,o){"use strict";o.r(e);var t=o(6),d=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"mongodb索引完全攻略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mongodb索引完全攻略"}},[this._v("#")]),this._v(" MongoDB索引完全攻略")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('使用 2dsphere 索引的语法结构如下：\ndb.collection.createlndex( { <location field> : "2dsphere"})\n\n\n使用 2d 索引的语法结构如下：\ndb.<collection>.createIndex(\n{\n    <location field> : "2d",\n    <additional field> : <value>\n},\n{\n    <index-specification options>\n}\n)\n\n这里以 2dsphere 为示例，创建地理索引：\n>db.places.insert(\n{ \n    loc : { type: "Point", coordinates: [ -73.97, 40.77 ] },\n    name: "Central Park",\n    category : "Parks"\n}\n)\n>db.places.insert(\n{\n    loc : { type: "Point", coordinates:[ -73.88, 40.78 ] },\n    name: "La Guardia Airport",\n    category : "Airport"\n}\n)\n>db.places.createIndex ({loc : "2dsphere"})\n>db.places.find({loc : "2dsphere"}).explain()\nMongoDB 在地理空间查询方面还有很多的应用，读者可以进行适当的拓展。\n全文索引\nMongoDB 的全文检索提供三个版本，用户在使用时可以指定相应的版本，如果不指定则默认选择当前版本对应的全文索引。\n\nMongoDB 提供的文本索引支持对字符串内容的文本搜索查询，但是这种索引因为需要检索的文件比较多，因此在使用的时候检索时间较长。\n\n全文索引的语法结构如下：\ndb.collection.createIndex ({ key: "text" })\n\n散列索引\n散列（Hashed）索引是指按照某个字段的散列值来建立索引，目前主要用于 MongoDB Sharded Cluster 的散列分片，散列索引只能用于字段完全匹配的查询，不能用于范围查询等。\n\n散列其语法如下：\ndb.collection.createlndex( { _id : "hashed" })\n\nMongoDB 支持散列任何单个字段的索引，但是不支持多键（即数组）索引。\n\n需要说明的是，MongoDB 在进行散列索引之前，需要将浮点数截断为 64 位整数。例如，散列将对 2.3、2.2 和 2.9 这些值产生同样的返回值。\n\n上面列出的都是索引的类别，在每个索引的类别上还可以加上一些参数，使索引更加具有针对性，常见的参数包括稀疏索引、唯一索引、过期索引等。\n\n稀疏索引只检索包含具有索引字段的文档，即使索引字段包含空值，检索时也会跳过所有缺少索引字段的文档。因为索引不包含集合的所有文档，所以说索引是稀疏的。相反，非稀疏索引包含集合中的所有文档，存储不包含索引字段的文档的空值。\n\n设置稀疏索引的语法如下：\ndb.collection.createlndex ({ "key" : 1 }, { sparse : true })\n\n\n如果设置了唯一索引，新插入文档时，要求 key 的值是唯一的，不能有重复的出现，设置唯一索引的语法如下：\ndb.collection.createlndex ({ "key" : 1 }, { unique: true })\n\n\n过期索引是一种特殊的单字段索引，MongoDB 可以用来在一定时间或特定时间后从集合中自动删除文档。\n\n过期索引对于处理某些类型的信息非常有用，例如，机器生成的事务数据、日志和会话信息，这些信息只需要在数据库中存在有限的时间，不需要长期保存。\n\n创建过期索引的语法如下:\ndb.collection.createlndex( {"key" : 1 }, { expireAfterSeconds: 3600 })\n\n需要注意的是，MongoDB 是每 60s 执行一次删除操作，因此短时间内执行会出现延迟现象。\n查看现有索引\n若要返回集合上所有索引的列表，则需使用驱动程序的 db.collection.getlndexes() 方法或类似方法。\n\n例如，可使用如下方法查看 records 集合上的所有索引：\ndb.records.getIndexes()\n\n列出数据库的所有索引\n若要列出数据库中所有集合的所有索引，则需在 MongoDB 的 Shell 客户端中进行以下操作：\ndb.getCollectionNames().forEach(function(collection){\n    indexes = db[collection].getIndexes();\n    print("Indexes for " + collection + ":" );\n    printjson(indexes);\n});\n删除索引\nMongoDB 提供的两种从集合中删除索引的方法如下：\ndb.collection.dropIndex()\n\ndb.collection.dropIndexes()\n\n若要删除特定索引，则可使用该 db.collection.droplndex() 方法。\n\n例如，以下操作将删除集合中 score 字段的升序索引：\ndb.records.dropIndex ({ "score" : 1 })  //升序降序不能错，如果为-1，则提示无索引\n还可以使用 db.collection.droplndexes() 删除除 _id 索引之外的所有索引。\n\n例如，以下命令将从 records 集合中删除所有索引：\ndb.records.dropIndexes()\n修改索引\n若要修改现有索引，则需要删除现有索引并重新创建索引。\n\n')])])])])}),[],!1,null,null,null);e.default=d.exports}}]);