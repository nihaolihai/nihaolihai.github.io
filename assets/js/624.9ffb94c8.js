(window.webpackJsonp=window.webpackJsonp||[]).push([[624],{1112:function(n,e,r){"use strict";r.r(e);var a=r(6),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"ssm-spring-spring-mvc-mybatis-框架整合搭建详细步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ssm-spring-spring-mvc-mybatis-框架整合搭建详细步骤"}},[n._v("#")]),n._v(" SSM（Spring+Spring MVC+MyBatis）框架整合搭建详细步骤")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('因为 Spring MVC 是 Spring 框架中的一个子模块，所以 Spring 与 SpringMVC 之间不存在整合的问题。实际上，SSM 框架的整合只涉及 Spring 与 MyBatis 的整合以及 Spring MVC 与 MyBatis 的整合。\n\n实现 SSM 框架的整合首先需要准备 3 个框架的 JAR 包以及其他整合所需要的 JAR 包。\n\n在《MyBatis与Spring的整合步骤》教程中已经讲解了 Spring 与 MyBatis 框架整合所需要的 JAR 包，本节只需再加入 Spring MVC 的相关 JAR 包（spring-web-3.2.13.RELEASE.jar 和 spring-webmvc-3.2.13.RELEASE.jar）即可。\n\nSSM 框架整合应用测试\n下面是一个应用案例（根据用户名模糊查询用户信息，用户表是《第一个MyBatis程序》教程中的数据表 user），使用 SSM 框架实现该案例的具体步骤如下：\n1. 创建应用并导入相关 JAR 包\n创建应用 ssm，将图 1 所示的 JAR 包复制到应用的 lib 中。\n2. 创建信息输入页面\n在 WebContent 目录下创建 input.jsp 页面，具体代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <form action="${pageContext.request.contextPath }/select" method="post">\n        输入用户名：<input type="text" name="uname"/><br>\n        <input type="submit" value="提交"/>\n    </form>\n</body>\n</html>\n3. 创建持久化类\n在 src 目录下创建一个名为 com.po 的包，并在该包中创建一个 PO 类 MyUser。具体代码如下：\npackage com.po;\n/**\n* mybatis数据库中user表的持久化类\n*/\npublic class MyUser {\n    private Integer uid;\n    private String uname;\n    private String usex;\n    public Integer getUid() {\n        return uid;\n    }\n    public void setUid(Integer uid) {\n        this.uid = uid;\n    }\n    public String getUname() {\n        return uname;\n    }\n    public void setUname(String uname) {\n        this.uname = uname;\n    }\n    public String getUsex() {\n        return usex;\n    }\n    public void setUsex(String usex) {\n        this.usex = usex;\n    }\n}\n4. 创建 Dao 层\n在 src 目录下创建一个名为 com.dao 的包，并在该包中创建一个名为 UserDao 的接口。具体代码如下：\npackage com.dao;\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport com.po.MyUser;\n@Repository("userDao")\n/*\n* 使用Spring自动扫描MyBatis的接口并装配 （Spring将指定包中所有被@Mapper注解标注的接口自动装配为Mybatis的映射接口\n*/\npublic interface UserDao {\n    /**\n     * 接口方法对应SQL映射文件UserMapper.xml中的id\n     */\n    public List<MyUser> selectUserByUname(MyUser user);\n}\n5. 创建 Service 层\n在 src 目录下创建一个名为 com.service 的包，并在该包中创建一个名为 UserService 的接口和该接口的实现类 UserServiceImpl。\n\nUserService 接口的代码如下：\npackage com.service;\nimport java.util.List;\nimport com.po.MyUser;\npublic interface UserService {\n    public List<MyUser> selectUserByUname(MyUser user);\n}\nUserServiceImpl 实现类的代码如下：\npackage com.service;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport com.dao.UserDao;\nimport com.po.MyUser;\n@Service("userService")\n@Transactional\n/**\n* 加上注解@Transactional可以指定这个类需要受Spring的事务管理，\n*注意@Transactional只能针对public属性范围内的方法添加，\n*本案例并不需要处理事务，在这里只是告诉读者如何使用事务\n*/\npublic class UserServiceImpl implements UserService {\n    @Autowired\n    private UserDao userDao;\n    @Override\n    public List<MyUser> selectUserByUname(MyUser user) {\n        return userDao.selectUserByUname(user);\n    }\n}\n6. 创建 Controller 层\n在 src 目录下创建一个名为 com.controller 的包，并在该包中创建一个名为 UserController 的控制器类。具体代码如下：\npackage com.controller;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport com.dao.UserDao;\nimport com.po.MyUser;\n@Controller\npublic class UserController {\n    @Autowired\n    private UserDao userDao;\n    @RequestMapping("/select")\n    public String select(MyUser user, Model model) {\n        List<MyUser> list = userDao.selectUserByUname(user);\n        model.addAttribute("userList", list);\n        return "userList";\n    }\n}\n7. 创建用户信息显示页面\n在 WEB-INF 目录下创建文件夹 JSP，并在该文件夹下创建用户信息显示页面 userList. jsp。具体代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    用户信息\n    <br>\n    <c:forEach items="${userList }" var="user">\n    ${user.uid }&nbsp;&nbsp;&nbsp;&nbsp;\n    ${user.uname }&nbsp;&nbsp;&nbsp;&nbsp;\n    ${user.usex }<br>\n    </c:forEach>\n</body>\n</html>\n8. 创建相关配置文件\n1）web.xml\n在 WEB-INF 目录下创建 web.xml 文件，并在该文件中实例化 ApplicationContext 容器、启动 Spring 容器、配置 DispatcherServlet 以及配置字符编码过滤器。具体代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns="http://java.sun.com/xml/ns/javaee"\n    xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"\n    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"\n    version="3.0">\n    <display-name>springMVC</display-name>\n    <welcome-file-list>\n        <welcome-file>index.jsp</welcome-file>\n    </welcome-file-list>\n    \x3c!-- 实例化ApplicationContext容器 --\x3e\n    <context-param>\n        \x3c!-- 加载src目录下的 applicationContext-*.xml文件--\x3e\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:applicationContext-*.xml</param-value>\n    </context-param>\n    <filter>\n        <filter-name>encodingFilter</filter-name>\n        <filter-class>\n            org.springframework.web.filter.CharacterEncodingFilter\n        </filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>UTF-8</param-value>\n        </init-param>\n        <init-param>\n            <param-name>forceEncoding</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>encodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <servlet>\n        <servlet-name>spring</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvc-servlet.xml</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>spring</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n    <listener>\n        <listener-class>\n            org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n    </listener>\n    <listener>\n        <listener-class>\n            org.springframework.web.util.Log4jConfigListener\n        </listener-class>\n    </listener>\n</web-app>\n2）springmvc-servlet.xml\n在 WEB-INF 目录下创建 Spring MVC 的核心配置文件 springmvc-servlet.xml，在该文件中仅配置控制器扫描包和视图解析器，具体代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:p="http://www.springframework.org/schema/p" \n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n    \x3c!-- 使用扫描机制扫描包 --\x3e\n    <context:component-scan base-package="com.controller" />\n    \x3c!-- 完成视图的对应 --\x3e\n    \x3c!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --\x3e\n    <bean\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n        <property name="prefix" value="/WEB-INF/jsp/" />\n        <property name="suffix" value=".jsp" />\n    </bean>\n</beans>   \n3）log4j.properties\n在 src 目录下创建 MyBatis 的日志文件 log4j.properties，具体代码如下：\n# Global logging configuration\nlog4j.rootLogger=ERROR,stdout\n# MyBatis logging configuration...\nlog4j.logger.com.mybatis=DEBUG\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n\n4）applicationContext.xml\n在 src 目录下创建 Spring 的配置文件 applicationContext.xml，在该文件中配置数据源、添加事务支持、开启事务注解、配置 MyBatis 工厂、进行 Mapper 代理开发以及指定扫描包。具体代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n    xmlns:aop="http://www.springframework.org/schema/aop"\n    xmlns:p="http://www.springframework.org/schema/p" \n    xmlns:tx="http://www.springframework.org/schema/tx"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="  \n            http://www.springframework.org/schema/beans \n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n            http://www.springframework.org/schema/aop \n            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd  \n            http://www.springframework.org/schema/tx \n            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd">\n    \x3c!--配置数据源 --\x3e\n    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"\n        destroy-method="close" scope="singleton">\n        <property name="driverClassName" value="com.mysql.jdbc.Driver" />\n        <property name="url"\n            value="jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8" />\n        <property name="username" value="root" />\n        <property name="password" value="1128" />\n        <property name="maxTotal" value="30" />\n        <property name="maxIdle" value="10" />\n        <property name="initialSize" value="5" />\n    </bean>\n    \x3c!-- 添加事务支持 --\x3e\n    <bean id="txManager"\n        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\n        <property name="dataSource" ref="dataSource" />\n    </bean>\n    \x3c!-- 开启事务注解 --\x3e\n    <tx:annotation-driven transaction-manager="txManager" />\n    \x3c!-- 配置mybitas工厂，同时指定数据源，并与MyBatis完美整合 --\x3e\n    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\n        <property name="dataSource" ref="dataSource" />\n        \x3c!-- configLocation的属性值为Mybatis的核心配置文件 --\x3e\n        <property name="configLocation" value="classpath:mybatis-config.xml" />\n    </bean>\n    \x3c!-- Mapper代理开发，使用Spring自动扫描Mybatis的接口并装配 --\x3e\n    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">\n        \x3c!-- mybatis-spring组件的扫描器 --\x3e\n        <property name="basePackage" value="com.dao" />\n        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />\n    </bean>\n    \x3c!-- 指定需要扫描的包（包括子包），使注解生效。dao包在mybatis-spring组件中已经扫描，这里不在需要扫描 --\x3e\n    <context:component-scan base-package="com.service" />\n</beans>\n5）创建 MyBatis 的核心配置文件和 SQL 映射文件\n在 src 目录下创建 com.mybatis 文件夹，并在该文件夹中创建 MyBatis 的核心配置文件 mybatis-config.xml。具体代码如下：\n<?xml version="1.0" encoding="UTF-8"?> \n<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    <mappers>\x3c!-- 映射器告诉MyBatis到哪里去找映射文件 --\x3e\n        <mapper resource="com/dao/UserMapper.xml" />\n    </mappers>\n</configuration> \n在 com.mybatis 文件夹中创建 SQL 映射文件 UserMapper.xml。具体代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="com.dao.UserDao">\n    <select id="selectUserByUname" resultType="com.po.MyUser"\n        parameterType="com.po.MyUser">\n        select * from user where 1=1\n        <if test="uname!=null and uname!=\'\'">\n            and uname like concat(\'%\',#{uname},\'%\')\n        </if>\n    </select>\n</mapper>\n9. 发布并运行应用\n首先将 springMVCDemo11 应用发布到 Tomcat 服务器并启动 Tomcat 服务器，然后通过地址“http://localhost:8080/ssm/input.jsp”访问信息输入页面，运行结果如图 2 所示。\n\n')])])]),r("p",[r("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190719/5-1ZG9161556241.png",alt:"RUNOOB 图标"}})]),n._v(" "),r("p",[n._v("单击提交")]),n._v(" "),r("p",[r("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190719/5-1ZG9161G0230.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);e.default=t.exports}}]);