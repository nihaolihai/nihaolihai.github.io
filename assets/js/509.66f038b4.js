(window.webpackJsonp=window.webpackJsonp||[]).push([[509],{998:function(e,t,n){"use strict";n.r(t);var a=n(6),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"reactemo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reactemo"}},[e._v("#")]),e._v(" reactemo")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://ant.design/docs/react/introduce-cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("react"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://mobile.ant.design/docs/react/introduce-cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("reactm"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("一、新增模态框\n首先绑定事件：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201211085251398.png",alt:"在这里插入图片描述"}})]),e._v(" "),n("p",[e._v("Ant design 里 modal 对话框\n按照自己的需求，修改下参数 ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Modal, Button } from 'antd';\n\nclass Ad extends React.Component {\n constructor(props) {\n    super(props);\n    this.state = {  \n        newAdd: false, // 新增的\n    };\n}\n   //请求数据\n    componentDidMount() {\n        this.init()\n    }\n    init(){\n        axios.get(`接口地址`).then( res => {\n            // console.log(res)\n            this.setState({\n                data:res.data.data\n            })\n        })\n    }\n   handleChange = e => {\n        this.setState(\n            {\n                checkNick: e.target.checked,\n            },\n            () => {\n                this.props.form.validateFields(['sort'], { force: true });\n            },\n        );\n    };\n//新增模态框\n  addForm = () => {\n    this.setState({\n      newAdd: true,\n    });\n  };\n  \n//新增模态框，新增按钮事件\nhandleaddOk = e => {\n    console.log(e);\n    this.props.form.validateFields( (err,values) => {\n        if (!err) {\n            console.info('success');\n            axios.post(`接口地址`,values).then(res=>{\n                console.log(res)\n                this.props.history.push('/ad')  //新增成功，调整到广告首页\n                this.setState({                      // 关闭模态框\n                    newAdd: false, \n                })\n                this.init() //数据初始化，页面刷新\n            })\n        }\n    });\n};\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      newAdd: false,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.addForm}>\n          Open Modal\n        </Button>\n        <Modal\n          title=\"新增广告\"\n          visible={this.state.newAdd}\n          onOk={this.handleaddOk}\n          onCancel={this.handleaddCancel}\n          footer={[\n    <Button key=\"back\" onClick={this.handleaddCancel}>\n        取消\n    </Button>,\n    <Button key=\"submit\" type=\"primary\"  onClick={this.handleaddOk}>\n        新增\n    </Button>,\n]}\n        >\n         <Form.Item {...formItemLayout} label=\"名称\">\n    {getFieldDecorator('name', {\n        rules: [\n            {\n                required: true,\n                message: 'Please input your name',\n            },\n        ],\n\n    })(<Input placeholder=\"请输入名称!\" />)}\n</Form.Item>\n        </Modal>\n      </div>\n    );\n  }\n}\nconst WrappedAdd = Form.create()(Ad);  //有form 表单，就必须 create\nexport default WrappedAdd;\n\n二、编辑模态框\n同理：按照上面的操作，把编辑的模态框拖进去，一一对应名字（请自己复制粘贴，修改好）。唯一不同的是，点击编辑按钮，需要获取当前行的id ,修改好后，点击 ‘更新’按钮，插入当前行id 里的数据里。（把这里的代码，和上面的代码，请都写在一起。取消的btn点击事件，请自己复制粘贴进去。）\n\n绑定事件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020121108535317.png)\n  //编辑模态框 弹出\n    editform = (text) =>{\n        console.log(text.id)   //获取当前点击 行 的id\n        this.setState({\n            newEdit: true,  // 这是 编辑 模态框\n        })\n        let id = text.id;    \n        axios.get(`接口地址/${id}/edit`)  //根据自己公司后端配置的接口地址来 ，获取页面初始化数据\n            .then(res=>{\n                console.log(res)\n                this.setState({\n                    list:res.data.data.advertisement    // 请在构造函数中 定义 list:{}\n                });\n                this.props.form.setFieldsValue({     // 双向绑定form 表单的数据\n                    name:this.state.list.name,\n                    sort:this.state.list.sort,\n                    advertisement_node_id:this.state.list.advertisement_node_id,\n                    photo_id:this.state.list.photo_id,\n                    url:this.state.list.url,\n                })\n            })\n    };\n\n    //编辑模态框，更新按钮提交事件\n    handleEditOk = e => {\n        console.log(e);\n        this.props.form.validateFields( (err,values) => {\n            if (!err) {\n                console.info('success');\n            }\n            axios.put(`接口地址/${this.state.list.id}`\n                ,values).then(res=>{\n                console.log(res)\n                this.props.history.push('/ad')\n                this.setState({\n                    newEdit: false,\n                })\n                this.init()\n            })\n        });\n    };\n\n\n\n\nrender() {\n    return (\n      <div>\n\n        <Modal\n         \t\t\t title=\"编辑广告\"\n                    visible={this.state.newEdit}\n                    onOk={this.handleEditOk}\n                    onCancel={this.handleEditCancel}\n                    footer={[\n                        <Button key=\"back\" onClick={this.handleEditCancel}>\n                            取消\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\"  onClick={this.handleEditOk}>\n                            更新\n                        </Button>,\n                    ]}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n\n三、删除模态框\n按照官方实例，进行复制粘贴 ，修改如下\n\n绑定的事件：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201211085440108.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201211085459383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70)\n或者\n\n1、main.jsx\n‘’import React from 'react';\nimport ReactDom from 'react-dom';\nimport ExampleTable from './ExampleTable.jsx'\n \nReactDom.render(\n    <ExampleTable/>,\n    document.getElementById('AppRoot')\n);\n \n2、ExampleTable.jsx, 注：记住引入antd.css， 否则Table组件无法正常显示。\n\nimport React from 'react';\nimport { Table,Button,Input,Icon,Popconfirm,Alert } from 'antd';\nimport AddUser from './AddUser.jsx'\nimport UserDetails from './UserDetails.jsx'\n \nclass ExampleTable extends React.Component {\n    constructor(props) {//   构造函数\n        super(props);\n        this.state = {\n            dataSource:[\n                { key: 1, nid:1, name: 'tab', gender:'男' , age: 22, schoolname: '第一中学', description: '热爱班级活动，尊敬老师'},\n                { key: 2, nid:2, name: 'shift', gender:'男' , age: 22, schoolname: '第一中学', description: '热爱班级活动，尊敬老师'},\n                { key: 6, nid:6, name: 'ctrl', gender:'男' , age: 22, schoolname: '第一中学', description: '热爱班级活动，尊敬老师'},\n                { key: 4, nid:4, name: 'caps lock', gender:'男' , age: 22, schoolname: '第一中学', description: '热爱班级活动，尊敬老师'},\n                { key: 5, nid:5, name: 'enter', gender:'女' , age: 22, schoolname: '第一中学', description: '热爱班级活动，尊敬老师'}\n            ],\n            index : '',\n            PersonCount :0,\n            selectedRowKeys:[],\n            selectedRows:[],\n            record : 'abc'\n        };\n        this.onDelete = this.onDelete.bind(this);//绑定this,声明该方法需要绑定this, 直接在onClick中调用\n        this.appendPerson = this.appendPerson.bind(this);\n        this.handleSelectedDelete = this.handleSelectedDelete.bind(this);\n       this.columns = [\n            { title: '编号', dataIndex: 'nid', key: 'nid' ,width:'8%'},\n            { title: '姓名', dataIndex: 'name', key: 'name' ,width:'15%'},\n            { title: '性别', dataIndex: 'gender', key: 'gender' ,width:'10%'},\n            { title: '年龄', dataIndex: 'age', key: 'age',width:'15%', },//render: (text, record, index) => (Math.floor(record.age/10))*10+\"多岁\"},\n            { title: '学校', dataIndex: 'schoolname', key: 'schoolname',width:'15%' },\n            { title: '在校表现', dataIndex: 'description', key: 'description' ,width:'20%'},\n            { title: '操作', dataIndex: '', key: 'operation', width:'32%',render: (text,record,index)=>(\n                <span>\n                     <Popconfirm title=\"删除不可恢复，你确定要删除吗?\" >\n                                <a title=\"用户删除\"  className=\"mgl10\"onClick={this.onDelete.bind(this,index)}>\n                                    <Icon type=\"delete\"/></a>\n                     </Popconfirm>\n                    <span className=\"ant-divider\"/>\n                    <UserDetails className=\"user_details\"  pass={record}/>\n                </span>\n            ) },\n        ];\n        }\n \n    appendPerson(event){//得到子元素传过来的值\n        let array = [];\n        let count = 0;\n        this.state.dataSource.forEach(function (element) {\n            Object.keys(element).some(function (key) {\n                if (key === 'nid') {\n                    count++;\n                    array[count] = element.nid\n                }\n            })\n        })\n        let sortData =array.sort();//对遍历得到的数组进行排序\n        let MaxData = sortData[(this.state.dataSource.length)-1]//取最后一位下标的值\n        event.key=MaxData+1;\n        event.nid = MaxData+1;\n        this.setState({\n              dataSource:[...this.state.dataSource,event]\n          })\n \n    }\n \n    onDelete(index){\n            console.log(index)\n            const dataSource = [...this.state.dataSource];\n            dataSource.splice(index, 1);//index为获取的索引，后面的 1 是删除几行\n            this.setState({ dataSource });\n    }\n \n    handleSelectedDelete(){\n        if(this.state.selectedRowKeys.length>0){\n            console.log(...this.state.selectedRowKeys)\n            const dataSource = [...this.state.dataSource]\n            dataSource.splice(this.state.selectedRows,this.state.selectedRows.length)\n            this.setState({ dataSource });\n        }\n        else{\n \n        }\n    }\n \n    render() {\n        //联动选择框\n       const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                this.setState({//将选中的id和对象存入state\n                        selectedRowKeys:selectedRowKeys,\n                        selectedRows:selectedRows\n                })\n                console.log(selectedRows,selectedRowKeys)\n            },\n            onSelect: (record, selected, selectedRows) => {\n                //console.log( record, ` selected :${selected}`,`selectedRows:${selectedRows}`);\n            },\n            onSelectAll: (selected, selectedRows, changeRows) => {\n                //console.log(selected, selectedRows, changeRows);\n            },\n            getCheckboxProps: record => ({\n                disabled: record.name === 'Disabled User',    // Column configuration not to be checked\n            }),\n        }\n        return (\n            <div className=\"div_body\">\n              <div id=\"div_left\"></div>\n              <div id=\"div-right\">\n                  <div className=\"table_oftop\">\n                      <Button type=\"primary\" icon=\"search\" style={{float:\"right\",marginLeft:10}}>查询</Button>\n                      <Input placeholder=\"input search text\" style ={{width:300,float:\"right\"}}/>\n                      <div id=\"add_delete\">\n                      <Button type=\"primary\" className=\"selectedDelete\" onClick={this.handleSelectedDelete}>删除所选</Button>\n                      <AddUser className=\"add_user_btn\" callback={this.appendPerson}/>\n                      </div>\n                  </div>\n                <Table columns={this.columns}\n                       dataSource={this.state.dataSource}\n                       className=\"table\"\n                       rowSelection={rowSelection}\n                       scroll ={{y:400}}/>\n \n            </div>\n            </div>\n        );\n    }\n}\nmodule.exports = ExampleTable;\n\n\nnpm下载依赖包\n基于react 和react-dom\nnpm install react-html-table-to-excel --save\nyarn add react-html-table-to-excel\n\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nclass Table extends PureComponent {\n\n    constructor(props) {\n        super(props);\n    }\n    this.state = {\n    \tref:this.props.attr  // 从父组件获取参数判断该table是否需要导出\n    }\n    componentDidMount() {\n    \tif (this.state.ref == 'table') {\n    \t\tconst tableCon = ReactDOM.findDOMNode(this.refs['table']); // 通过ref属性找到该table\n    \t\tconst table = tableCon.querySelector('table');  //获取table\n    \t\ttable.setAttribute('id','table-to-xls')     //给该table设置属性\n    \t}\n    }\n\n    render() {\n    const { attr } = this.props;\n\n        return (\n            <div>\n                <ReactHTMLTableToExcel\n                    id=\"test-table-xls-button\"\n                    className=\"download-table-xls-button\"\n                    table=\"table-to-xls\"\n                    filename=\"文件名称\" \n                    sheet=\"工作表名称\"\n                    buttonText=\"导出按钮名称\"/>\n              // 下为antd table组件\n              <Table  \n              ...省略其他属性配置\n              \tref={attr || ''}\n              />\n\n            </div>\n        );\n    }\n}\n\nexport default Table\n")])])]),n("p",[e._v("第二种方式\n使用\n1.安装依赖：npm install xlsx；")]),e._v(" "),n("p",[e._v("2.在项目中引用：import * as XLSX from ‘xlsx’;")]),e._v(" "),n("p",[e._v("3.定义上传input：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318151724100.png",alt:"在这里插入图片描述"}}),e._v("\n4.定义handleExcel方法:\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318151800316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n2.对应的css:\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318151829800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),n("p",[e._v("表格数据导出\n1.安装依赖：npm i xlsx-oc --save\n2.在项目中导入：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318151856877.png",alt:"在这里插入图片描述"}}),e._v("\n3.在项目使用：\n定义导出button\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318151922222.png",alt:"在这里插入图片描述"}}),e._v("\n定义点击方法:")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318151944679.png",alt:"在这里插入图片描述"}}),e._v("\n定义的表头和传入的数据\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318152007220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("3、AddUser.jsx\n\nimport React from 'react';\nimport {Form,Input,Button,Select,Modal} from 'antd'\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n \nclass  AddUser extends React.Component{//在es6中定义一个AddUser类\n     constructor(props){//构造函数\n         super(props);\n         this.state = {\n             visible:false\n         };\n         this.handleAdd = this.handleAdd.bind(this);\n         this.handleSubmit = this.handleSubmit.bind(this);\n         this.handleOk = this.handleOk.bind(this)\n         this.handleClear = this.handleClear.bind(this)\n     }\n    handleAdd() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleSubmit(e){//提交表单\n        e.preventDefault();\n         this.props.form.validateFieldsAndScroll((err,values)=>{\n             if(!err){\n                 //console.log('接收的值：',values);\n                 this.setState({\n                     visible:false\n                 })\n                 this.props.form.resetFields();//清空提交的表单\n                 //当值传递到父元素后，通过回调函数触发appendPerson方法将参数values带到父元素\n                 this.props.callback(values);\n             }\n         })\n    }\n \n    handleClear(){\n        this.props.form.resetFields();\n    }\n \n    handleOk() {\n        this.setState({\n            visible: false\n            });\n    }\n    render(){\n \n     const {getFieldDecorator} = this.props.form;\n     const formItemLayout = {\n         labelCol:{span : 6},\n         wrapperCol:{span: 14}\n     };\n     const tailFormItemLayout = {\n         wrapperCol: {\n             span: 14,\n             offset: 8\n         }\n     };\n        return(\n            <div>\n                <Button type=\"primary\" onClick={this.handleAdd}>添加用户</Button>\n            <Modal title=\"新建用户\" visible={this.state.visible} onCancel={this.handleOk} onOk={this.handleOk}>\n                <Form onSubmit={this.handleSubmit}>\n                    <FormItem {...formItemLayout} label = \"用户名\"  hasFeedback>\n                        {getFieldDecorator('name', {\n                            rules:[{\n                                required:true,message:'请输入您的 name！'\n                            }]\n                        })(\n                            <Input placeholder=\"请输入您的用户名！\"/>\n                        )}\n                        </FormItem>\n                    <FormItem {...formItemLayout} label=\"性别\" hasFeedback>\n                        {getFieldDecorator('gender',{\n                            rules:[{\n                                required:true,message:'请输入您的 gender！'\n                            }]\n                        })(\n                            <Select placeholder=\"请选择您的性别\">\n                                <Option value=\"男\">男</Option>\n                                <Option value=\"女\">女</Option>\n                            </Select>\n                )}\n                    </FormItem>\n                    <FormItem {...formItemLayout} label=\"年龄\" hasFeedback>\n                        {getFieldDecorator('age',{\n                            rules:[{required:true,message:'请选择您的 Age'\n                            }]\n                        })(\n                            <Select placeholder=\"请选择你您的年龄\">\n                                    <Option value=\"26\">26</Option>\n                                    <Option value=\"27\">27</Option>\n                                    <Option value=\"28\">28</Option>\n                            </Select>\n                        )}\n                    </FormItem>\n                    <FormItem {...formItemLayout} label=\"就读学校\" hasFeedback>\n                        {getFieldDecorator('schoolname',{\n                            rules:[{required:true,message:'请输入您的就读学校'}]\n                        })(\n                            <Input placeholder=\"请输入您的就读学校！\"/>\n                        )}\n                    </FormItem>\n                    <FormItem {...formItemLayout} label=\"在校表现\" hasFeedback>\n                        {getFieldDecorator('description',{\n                            rules:[{required:true,message:'请输入您的在校表现'}]\n                        })(\n                            <Input type=\"textarea\" rows={3} placeholder=\"请输入您的在校表现!\"/>\n                        )}\n                    </FormItem>\n                    <FormItem {...tailFormItemLayout} style={{padding:10}}>\n                        <Button type=\"primary\" htmlType=\"submit\" size=\"large\">提交</Button>\n                        <Button type=\"primary\" size=\"large\" onClick={this.handleClear}>重置</Button>\n                    </FormItem>\n                </Form>\n            </Modal>\n            </div>\n        )\n    }\n}\nAddUser = Form.create()(AddUser); //解决了getFieldDecorator无法定义;\n \nexport default AddUser;\n\n4、UserDetails.jsx\n\nimport React from 'react'\nimport {Modal,Button} from 'antd'\n/*\n \n */\nclass  UserDetails extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:false\n        }\n        this.handlePopup = this.handlePopup.bind(this);\n        this.handleOkOrCancel = this.handleOkOrCancel.bind(this);\n    }\n    handlePopup() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOkOrCancel(){\n        this.setState({\n            visible: false\n        });\n    }\n \n    render(){\n        return(\n            <div>\n                <a onClick={this.handlePopup}>详情</a>\n                <Modal title={this.props.pass.name} visible={this.state.visible}\n                       onOk=   {this.handleOkOrCancel} onCancel={this.handleOkOrCancel}>\n                    <p>姓名：   {this.props.pass.name}</p>\n                    <p>性别：    {this.props.pass.gender}</p>\n                    <p>年龄：      {this.props.pass.age}</p>\n                    <p>就读学校：   {this.props.pass.schoolname}</p>\n                    <p>在校表现：   {this.props.pass.description}</p>\n                </Modal>\n            </div>\n        )\n    }\n \n}\n \nexport default UserDetails;\n\n5、ExampleStyle.css\n#div-right{\n    width:80%;\n    height:400px;\n    text-Align:center;\n    margin: 0 auto;\n}\n.div_body{\n    margin-top: 0.5%;\n}\n.table_oftop{\n    padding: 10px;\n}\n.selectedDelete{\n    float: left;\n    margin-left: 35%;\n}\n.add_user_btn{\n    margin-left: auto;\n}\n.user_details{\n    float: right;\n}\n\n\n //点击选中\n  onSelectKey = e => {\n    let keys = this.state.UserPortrait;\n    getUserSelf({ id: e }).then(res => {\n      if (!res.errors || res.errors.length === 0) {\n        var arr = res.data.user;\n        keys.push({ avatar: arr.avatar, name: arr.name, id: arr.id });\n        this.setState(\n          {\n            UserPortrait: keys,\n          },\n          () => {\n            console.log(this.state.UserPortrait);\n          },\n        );\n        console.log(keys);\n      }\n    });\n  };\n\n  //点击表单删除\n  onDeselectKye = e => {\n    console.log(e);\n    let keys = this.state.UserPortrait;\n    keys.forEach((item, index, arr) => {\n      if (item.id == e) {\n        arr.splice(index, 1);\n      }\n    });\n    //console.log(keys)\n    this.setState(\n      {\n        UserPortrait: keys,\n      },\n      () => {\n        console.log(this.state.UserPortrait);\n      },\n    );\n  };\n\n\n<Form.Item\n                    label={<FormattedMessage id=\"component.form.submission.executor\" />}\n                    wrapperCol={{ span: 15 }}\n                  >\n                    {getFieldDecorator('assignUserIds', {\n                      rules: [\n                        {\n                          required: true,\n                          message: formatMessage({ id: 'component.select.placeholder' }), //component.please.enter\n                        },\n\n                      ],\n                      initialValue: this.state.userIdList,\n                    })(\n                      <Select\n                        onSelect={this.onSelectKey}\n                        onDeselect={this.onDeselectKye}\n                        placeholder={<FormattedMessage id=\"component.please.enter\" />}\n                        showSearch\n                        value={userIdList}\n                        mode=\"multiple\"\n                        filterOption={(input, option) =>\n                          option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                        style={{ width: 280 }}\n                      >\n                        {this.state.getUser.map((item, index) => {\n                          return (\n                            <Option value={item.id} key={index}>\n                              {item.name}\n                            </Option>\n                          );\n                        })}\n                      </Select>,\n                    )}\n                  </Form.Item>\n\n<Form.Item>\n                  <div style={{ width: '100%', marginLeft: '15%' }}>\n                    <ul style={{ width: '40%', height: '100%' }}>\n                      {this.state.UserPortrait &&\n                      this.state.UserPortrait.map(item => {\n                        return (\n                          <li style={{ borderRadius: 5 }} className=\"approve\">\n                            {/* <div className=\"delete\" onClick={()=>this.onDelete(item.id)}></div> */}\n                            <img\n                              src={\n                                item.avatar\n                                  ? item.avatar\n                                  : 'https://xiniunet.oss-cn-hangzhou.aliyuncs.com//512824102474878976/upload/1235149587552018432.png'\n                              }\n                              className=\"approve-img user\"\n                            ></img>\n                            <div className=\"approve-name\">{item.name}</div>\n                            <div className=\"approve-position\" title=\"\"></div>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </Form.Item>\n\nimport React from 'react';\nimport PicturesWalls from '@/components/picturesWalls/index';\nimport {\n  findCategory,\n  fieldCategoryFind,\n  createTickeCategroy,\n  findTctSystem,\n  findTctTemplate,\n  getUserSelf, getUserList\n} from '@/services/ticket';\nimport moment from 'moment';\nimport {FormattedMessage, formatMessage} from 'umi-plugin-react/locale';\nimport {\n  Breadcrumb,\n  Select,\n  Form,\n  Alert,\n  Radio,\n  Input,\n  Tooltip,\n  Button,\n  Row,\n  Col,\n  Checkbox,\n  InputNumber,\n  DatePicker,\n  TimePicker,\n  Popconfirm,\n  message,\n} from 'antd';\nimport SubmitImport from './SubmitImport';\n\nconst {Option} = Select;\nconst {TextArea} = Input;\nconst language = localStorage.getItem('language');\n\nclass Submit extends React.Component {\n  constructor(props: any) {\n    super(props);\n  }\n\n  state = {\n    loading: true,\n    orderCount: [],\n    mainLineData: [],\n    mainCircleData: [],\n    dataSubmit: [],\n    //按钮状态\n    buttonLodingSubmit: false,\n    buttonLodingSave: false,\n    fieldDataConfig: [],\n    //提交\n    templateId: '',\n    //提交\n    categoryID: '',\n    categoryName: '',\n    //时间关闭框状态\n    open: false,\n    listData: [],\n    isShow: false,\n    picFileData: {},\n    //picFileList:[],\n    fieldType: '',\n    isfieldType: false,\n    imgObj: {\n      url: '',\n      id: '',\n    },\n    vm: {\n      pageNumber: 1,\n      pageSize: 10,\n      totalCount: 0,\n    },\n    systemListData: [],\n    templateListData: [],\n    UserPortrait: [],\n    getUser: [],\n    userIdList: [],\n    enableRole: true,\n  };\n\n  componentWillMount() {\n    // this.getCategoryDate();\n    this.initUrlData();\n    this.getCategoryData();\n    this.getUserDate();\n  }\n\n  //外部提交解析url参数\n  initUrlData = () => {\n    console.log(this.props.location.query);\n    let { ticketSystemId, ticketFieldData, objectType, objectId } = this.props.location.query;\n    if(ticketSystemId) {\n      let flag = !localStorage.getItem('mark');\n      localStorage.setItem('systemId',ticketSystemId);\n      localStorage.setItem('mark','system');\n      if(flag){\n        window.location.reload();\n      }\n    }\n    let ticketFieldDataArray = [];\n    try {\n      ticketFieldDataArray = JSON.parse(ticketFieldData)\n    }catch (e){\n\n    }\n    this.setState({\n      ticketSystemId: ticketSystemId,\n      ticketFieldDataArray: ticketFieldDataArray,\n      objectType: objectType,\n      objectId: objectId,\n    })\n  };\n\n  //初进提交页面渲染系统、类别\n  getCategoryData = () => {\n    let systemId = localStorage.getItem('systemId');\n    if (systemId) {\n      let data = {\n        pageSize: 0,\n        systemId: systemId,\n        language: language\n      }\n      findTctTemplate(data).then(res => {\n        if (!res.errors || res.errors.length === 0) {\n          this.setState(\n            {\n              loading: false,\n              templateListData: res.data.result,\n            }\n          );\n        }\n      });\n    } else {\n      let data = {\n        pageSize: 0,\n        language: language\n      }\n      findTctSystem(data).then(res => {\n        if (!res.errors || res.errors.length === 0) {\n          this.setState(\n            {\n              loading: false,\n              systemListData: res.data.result,\n            }\n          );\n        }\n      });\n    }\n  }\n\n  //获取沟通类别 数据\n  getCategoryDate() {\n    let pageNumber = this.state.vm.pageNumber;\n    let pageSize = this.state.vm.pageSize;\n    let systemId = localStorage.getItem('systemId');\n    let language = localStorage.getItem('language');\n    let data: any = {\n      systemId: systemId,\n      language: language,\n    };\n    let datas = {\n      ...data,\n      pageNumber: pageNumber,\n      pageSize: 0,\n    };\n    findCategory(datas).then(res => {\n      if (!res.errors || res.errors.length === 0) {\n        this.setState(\n          {\n            loading: false,\n            listData: res.data.result,\n            vm: {\n              ...this.state.vm,\n              totalCount: parseInt(res.data.totalCount),\n            },\n          },\n          () => {\n            //console.log(this.state.listData)\n          },\n        );\n      }\n    });\n  }\n\n  //  上传图片\n  updateCallBack = (response: any, file: any, fileid) => {\n    console.log(file);\n    console.log(fileid);\n    if (response == 'undefined') {\n      this.setState({\n        buttonLodingSave: true,\n        buttonLodingSubmit: true,\n      });\n    }\n    let picFileData = this.state.picFileData;\n    picFileData[fileid] = file;\n    this.setState({\n      picFileData: picFileData,\n    });\n    //console.log(file);\n    if (response && file && file.length > 0) {\n      // console.log(response.url);\n      console.log(response);\n      this.setState({\n        imgObj: {\n          url: response.url,\n          id: response.id,\n        },\n        buttonLodingSave: false,\n        buttonLodingSubmit: false,\n      });\n    } else {\n      this.setState({\n        buttonLodingSave: false,\n        buttonLodingSubmit: false,\n      });\n    }\n  };\n  handleSelectChange = e => {\n    this.setState({\n      categoryName: e,\n    });\n  };\n\n  handleSystemChange = e => {\n    this.setState({\n      systemId: e.target.value,\n      mainLineData: [],\n      userIdList:[],\n      UserPortrait:[],\n    })\n    this.props.form.resetFields('category');\n\n    let data = {\n      systemId: e.target.value,\n      pageSize: 0,\n    }\n    findTctTemplate(data).then(res => {\n      if (!res.errors || res.errors.length === 0) {\n        this.setState(\n          {\n            loading: false,\n            templateListData: res.data.result,\n          }\n        );\n      }\n    });\n  };\n\n  handleCategoryChange = e => {\n    let split = e.target.value.split(\",\");\n    this.setState({isShow: true, picFileData: {}, categoryName: split[1]});\n    this.props.form.resetFields(); //点击显示表单时，先清空之前的数据\n    this.setState({\n      userIdList:[],\n      UserPortrait:[]\n    })\n\n    let pageSize = 0;\n    let language = localStorage.getItem('language');\n    let systemId = localStorage.getItem('systemId');\n    let data: any = {\n      pageSize: pageSize,\n      templateId: split[0],\n      language: language,\n      systemId: systemId,\n    };\n    fieldCategoryFind(data)\n      .then(res => {\n        //console.log(res)\n        if (!res.errors || res.errors.length === 0) {\n          console.log(res);\n          let mainLineData = JSON.parse(JSON.stringify(res.data.result));\n          let picFileData = {};\n          mainLineData.map(item => {\n            console.log(item);\n            if (item.fieldType == 'ATTACHMENT') {\n              console.log(1111);\n              picFileData[item.fieldId] = [];\n            }\n          });\n          console.log(picFileData);\n          this.setState(\n            {\n              picFileData: picFileData,\n              enableRole: res.data.result.length>0?res.data.result[0].enableRole:false,\n            },()=>{\n              console.log(\"saa\",this.state.enableRole)\n            }\n          );\n          this.setState(\n            {\n              mainLineData: res.data.result,\n              templateId: split[0],\n              isShow: this.state.isShow,\n              loading: false,\n            },\n            () => {\n              console.log(this.state)\n              sessionStorage.setItem('templateId', res.data.result.templateId);\n              localStorage.setItem('categoryID', res.data.result.categoryID);\n            },\n          );\n        }\n      })\n      .catch(() => {\n        this.setState({isShow: false});\n      });\n  }\n\n  showtemplate = (templateId, categoryID, e: any) => {\n    this.setState({isShow: true, picFileData: {}});\n    this.props.form.resetFields(); //点击显示表单时，先清空之前的数据\n    let pageSize = 0;\n    let language = localStorage.getItem('language');\n    let systemId = localStorage.getItem('systemId');\n    let data: any = {\n      pageSize: pageSize,\n      templateId: templateId,\n      language: language,\n      systemId: systemId,\n    };\n    fieldCategoryFind(data)\n      .then(res => {\n        //console.log(res)\n        if (!res.errors || res.errors.length === 0) {\n          console.log(res);\n          let mainLineData = JSON.parse(JSON.stringify(res.data.result));\n          let picFileData = {};\n          mainLineData.map(item => {\n            console.log(item);\n            if (item.fieldType == 'ATTACHMENT') {\n              console.log(1111);\n              picFileData[item.fieldId] = [];\n            }\n          });\n          console.log(picFileData);\n          this.setState(\n            {\n              picFileData: picFileData,\n            },\n            () => {\n              console.log(this.state.picFileData);\n            },\n          );\n          this.setState(\n            {\n              mainLineData: res.data.result,\n              categoryID: categoryID,\n              templateId: templateId,\n              isShow: this.state.isShow,\n              loading: false,\n            },\n            () => {\n              sessionStorage.setItem('templateId', res.data.result.templateId);\n              localStorage.setItem('categoryID', res.data.result.categoryID);\n            },\n          );\n        }\n      })\n      .catch(() => {\n        this.setState({isShow: false});\n      });\n  };\n\n  //提交按钮\n  submitGetData = (e: any) => {\n    e.preventDefault();\n    this.setState({buttonLodingSubmit: true});\n    let this_ = this;\n    this.props['form'].validateFields((err: any, values: any) => {\n      if (!err) {\n        let systemId = localStorage.getItem('systemId');\n        let dataTemp = this_.state.mainLineData;\n        let save = [];\n        for (let key in values) {\n          if (key != 'category' && key != 'system' && key != 'assignUserIds') {\n            var value = values[key];\n            var fieldType = null;\n            var fieldCode = null;\n            var fieldName = null;\n            dataTemp.map(function (data) {\n              if (data.fieldId == key) {\n                fieldType = data.fieldType;\n                fieldCode = data.fieldCode;\n                fieldName = data.fieldName;\n                if (data.fieldType == 'DATE' && value !== undefined) {\n                  if (value) {\n                    value = moment(value._d).format('YYYY/MM/DD');\n                  }\n                }\n                if (data.fieldType == 'TIME' && value !== undefined) {\n                  if (value) {\n                    value = moment(value._d).format('HH:mm:ss');\n                  }\n                }\n                if (data.fieldType == 'DATETIME' && value !== undefined) {\n                  if (value) {\n                    value = moment(value._d).format('YYYY-MM-DD HH:mm:ss');\n                  }\n                }\n              }\n            });\n            var obj = {\n              fieldId: key,\n              fieldValue: value,\n              fieldType: fieldType,\n              fieldCode: fieldCode,\n              fieldName: fieldName,\n            };\n            if (obj.fieldType == 'ATTACHMENT') {\n              var picFileListImages = [];\n              this.state.picFileData[obj.fieldId].map(function (item) {\n                picFileListImages.push(item.response.data.url);\n              });\n              obj.fieldValue = picFileListImages;\n              //console.log(obj.fieldValue)\n            }\n            save.push(obj);\n          }\n        }\n        let assignPerson=this.state.UserPortrait.length>0?this.state.UserPortrait.map(function(elem,index){\n          return elem.id;\n        }).join(\",\"):'';\n        let data = {\n          systemId: systemId,\n          categoryId: this.state.categoryID,\n          templateId: this.state.templateId,\n          ticketFields: save,\n          assignPerson: assignPerson,\n          isSubmit: true,\n          enableRole: this.state.enableRole,\n          objectType: this.state.objectType,\n          objectId: this.state.objectId,\n        };\n        console.log(data);\n        createTickeCategroy(data)\n          .then(res => {\n            console.log(res);\n            if (!res.errors || res.errors.length === 0) {\n              this.setState(\n                {\n                  dataSubmit: res.data,\n                  loading: false,\n                  buttonLodingSubmit: false,\n                },\n                () => {\n                  this.props.history.push(\n                    '/ticket/submit/submission?categoryId=' +\n                    this.state.dataSubmit.number +\n                    '&submitUserName=' +\n                    this.state.dataSubmit.submitUserName +\n                    '&categroyName=' +\n                    this.state.categoryName,\n                  );\n                },\n              );\n            }\n          })\n          .catch(() => {\n            this.setState({\n              buttonLodingSubmit: false,\n            });\n          });\n      } else {\n        this.setState({\n          buttonLodingSubmit: false,\n        });\n      }\n    });\n  };\n  //保存按钮\n  hanleclick = e => {\n    console.log(e);\n    e.preventDefault();\n    this.setState({buttonLodingSave: true});\n    let this_ = this;\n    this.props['form'].validateFields((err: any, values: any) => {\n      if (!err) {\n        let systemId = localStorage.getItem('systemId');\n        let dataTemp = this_.state.mainLineData;\n        let save = [];\n        for (let key in values) {\n          if (key != 'category' && key != 'system' && key != 'assignUserIds') {\n            var value = values[key];\n            var fieldType = null;\n            var fieldCode = null;\n            dataTemp.map(function (data) {\n              if (data.fieldId == key) {\n                fieldType = data.fieldType;\n                fieldCode = data.fieldCode;\n                if (data.fieldType == 'DATE' && value !== undefined) {\n                  if (value) {\n                    value = moment(value._d).format('YYYY/MM/DD');\n                  }\n                }\n                if (data.fieldType == 'TIME' && value !== undefined) {\n                  if (value) {\n                    value = moment(value._d).format('HH:mm:ss');\n                  }\n                }\n                if (data.fieldType == 'DATETIME' && value !== undefined) {\n                  if (value) {\n                    value = moment(value._d).format('YYYY-MM-DD HH:mm:ss');\n                  }\n                }\n              }\n            });\n            var obj = {\n              fieldId: key,\n              fieldValue: value,\n              fieldType: fieldType,\n              fieldCode: fieldCode,\n            };\n            if (obj.fieldType == 'ATTACHMENT') {\n              var picFileListImages = [];\n              this.state.picFileData[obj.fieldId].map(function (item) {\n                picFileListImages.push(item.response.data.url);\n              });\n              obj.fieldValue = picFileListImages;\n            }\n            save.push(obj);\n          }\n        }\n        let assignPerson=this.state.UserPortrait.length>0?this.state.UserPortrait.map(function(elem,index){\n          return elem.id;\n        }).join(\",\"):'';\n        let data = {\n          systemId: systemId,\n          categoryId: this.state.categoryID,\n          templateId: this.state.templateId,\n          ticketFields: save,\n          assignPerson: assignPerson,\n          isSubmit: false,\n          enableRole: this.state.enableRole,\n          objectType: this.state.objectType,\n          objectId: this.state.objectId,\n        };\n        console.log(data);\n        createTickeCategroy(data)\n          .then(res => {\n            console.log(res);\n            if (!res.errors || res.errors.length === 0) {\n              this.setState(\n                {\n                  dataSubmit: res.data,\n                  loading: false,\n                  buttonLodingSave: false,\n                },\n                () => {\n                  this.props.history.push(\n                    '/ticket/submit/preserve?categoryId=' +\n                    this.state.dataSubmit.number +\n                    '&submitUserName=' +\n                    this.state.dataSubmit.submitUserName +\n                    '&categroyName=' +\n                    this.state.categoryName,\n                  );\n                },\n              );\n            }\n          })\n          .catch(() => {\n            this.setState({\n              buttonLodingSave: false,\n            });\n          });\n      } else {\n        this.setState({\n          buttonLodingSave: false,\n        });\n      }\n    });\n  };\n  //点击选中\n  onSelectKey = e => {\n    let keys = this.state.UserPortrait;\n    getUserSelf({ id: e }).then(res => {\n      if (!res.errors || res.errors.length === 0) {\n        var arr = res.data.user;\n        keys.push({ avatar: arr.avatar, name: arr.name, id: arr.id });\n        this.setState(\n          {\n            UserPortrait: keys,\n          },\n          () => {\n            console.log(this.state.UserPortrait);\n          },\n        );\n        console.log(keys);\n      }\n    });\n  };\n\n  //点击表单删除\n  onDeselectKye = e => {\n    console.log(e);\n    let keys = this.state.UserPortrait;\n    keys.forEach((item, index, arr) => {\n      if (item.id == e) {\n        arr.splice(index, 1);\n      }\n    });\n    //console.log(keys)\n    this.setState(\n      {\n        UserPortrait: keys,\n      },\n      () => {\n        console.log(this.state.UserPortrait);\n      },\n    );\n  };\n\n  //获取转交人的信息\n  getUserDate() {\n    let data = {\n      pageSize: 0,\n    };\n    //转交接口\n    getUserList(data).then(res => {\n      if (!res.errors || res.errors.length === 0) {\n        this.setState({\n          getUser: res.data.result,\n        });\n      }\n    });\n  }\n\n  //重置按钮功能\n  onConfirm = () => {\n    this.props.form.resetFields();\n    this.setState(\n      {\n        isShow: false,\n        UserPortrait:[],\n        userIdList:[],\n      },\n      () => {\n        message.info(formatMessage({id: 'component.reset.success'}));\n      },\n    );\n  };\n\n  //时间关闭按钮\n  handleClose = () => {\n    this.setState({open: false});\n  };\n  //点击打开时间框\n  handleOpenChange = open => {\n    this.setState({open});\n  };\n\n  render() {\n    const {getFieldDecorator} = this.props['form'];\n    const submitForm = {\n      labelCol: {\n        xl: 7,\n        xxl: 5,\n      },\n      wrapperCol: {\n        xl: 7,\n        xxl: 9,\n      },\n    };\n    const submitFormButton = {\n      labelCol: {span: 5},\n      wrapperCol: {\n        xl: 20,\n        xxl: 14,\n      },\n    };\n    const { userIdList } = this.state;\n    console.log(\"userIdList\",userIdList)\n\n    const text = (\n      <p style={{textAlign: 'center'}}>\n        <span>{<FormattedMessage id=\"component.support.format\"/>}.jpg .png .jpeg .bmp</span>\n      </p>\n    );\n    const texts = <FormattedMessage id=\"component.form.category.reset.messages\"/>;\n\n    const systemId = localStorage.getItem('systemId');\n    let importData = {\n      fields: this.state.mainLineData,\n      systemId: localStorage.getItem('systemId'),\n      templateId: this.state.templateId,\n    }\n    console.log(this.state.systemListData)\n    return (\n      <div>\n        <div className=\"contentHead\">\n          <Breadcrumb>\n            <Breadcrumb.Item>\n              {<FormattedMessage id=\"component.navigation.communicationManagement\"/>}\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>\n              <a href=\"#/ticket/submit\">\n                {<FormattedMessage id=\"component.navigation.submitCommunicationForm\"/>}\n              </a>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>{<FormattedMessage id=\"component.create\"/>}</Breadcrumb.Item>\n          </Breadcrumb>\n          <div className=\"bigTitle\">\n            <span>{<FormattedMessage id=\"component.navigation.submitCommunicationForm\"/>}</span>\n          </div>\n          <div\n            style={language == 'ZH_CN' ? {display: ''} : {display: 'none'}}\n            className=\"doStyle\"\n          >\n            选择类别进行沟通单的提交\n          </div>\n        </div>\n        <div className=\"contentBody\" style={{minHeight: 850,position:\"relative\",top:0,left:0}}>\n          {/* 内容部分 */}\n          <div style={{marginTop: 40}}>\n            <div >\n              <Form {...submitForm}>\n                {\n                  !systemId && <Form.Item label={<FormattedMessage id=\"component.form.submission.system\"/>}>\n                    {getFieldDecorator('system', {\n                      rules: [\n                        {\n                          required: true,\n                          message: <FormattedMessage id=\"component.form.submission.system\"/>,\n                        },\n                      ],\n                      initialValue: this.state.systemId,\n                    })(\n                      <Radio.Group\n                        onChange={e => this.handleSystemChange(e)}\n                      >\n                        {\n                          this.state.systemListData.map(item => {\n                            return <Radio value={item.id}>{item.name}</Radio>\n                          })\n                        }\n                      </Radio.Group>\n                    )}\n                  </Form.Item>\n                }\n                {\n                  (this.state.systemId || systemId) &&\n                  <Form.Item label={<FormattedMessage id=\"component.form.submission.category\"/>}>\n                    {getFieldDecorator('category', {\n                      rules: [\n                        {\n                          required: true,\n                          message: <FormattedMessage id=\"component.form.submission.category\"/>,\n                        },\n                      ],\n                    })(\n                      <Radio.Group\n                        onChange={e => this.handleCategoryChange(e)}\n                      >\n                        {\n                          this.state.templateListData.map(item => {\n                            return <Radio value={item.id + ',' + item.name}>{item.name}</Radio>\n                          })\n                        }\n                      </Radio.Group>\n                    )}\n                  </Form.Item>\n                }\n              </Form>\n            </div>\n\n            {this.state.isShow && (\n              <Form {...submitForm}>\n                <Row gutter={24}>\n                  {this.state.mainLineData.map((item, index) => {\n                    let initValue = null;\n                    var keysRadio = '';\n                    var fieldId = item.fieldId;\n                    if (item.fieldType == 'RADIO') {\n                      var list = JSON.parse(item.fieldDataConfig.split(','));\n                      for (var i = 0; i < list.length; i++) {\n                        if (list[i].checked) {\n                          keysRadio = list[i].name;\n                          break;\n                        }\n                      }\n                    }\n                    var keysCheckeBox = [];\n                    if (item.fieldType == 'CHECKBOX') {\n                      var data = JSON.parse(item.fieldDataConfig.split(','));\n                      for (var i = 0; i < data.length; i++) {\n                        if (data[i].checked) {\n                          keysCheckeBox.push(data[i].name);\n                          break;\n                        }\n                      }\n                    }\n                    var keysDropList = '';\n                    if (item.fieldType == 'DROPLIST') {\n                      var drop = JSON.parse(item.fieldDataConfig.split(','));\n                      for (var i = 0; i < drop.length; i++) {\n                        if (drop[i].checked) {\n                          keysDropList = drop[i].name;\n                          break;\n                        }\n                      }\n                    }\n                    if(this.state.ticketFieldDataArray){\n                      let ticketFieldArr = JSON.parse(JSON.stringify(this.state.ticketFieldDataArray));\n                      let targetField = ticketFieldArr.filter(key => key.key==fieldId);\n                      if(targetField.length>0){\n                        initValue = targetField[0].value;\n                      }\n                    }\n                    // console.log(keysRadio)\n                    // console.log(keysCheckeBox)\n                    return (\n                      <Form.Item\n                        label={item.fieldName}\n                        key={index}\n                        style={{\n                          display:\n                            item.isSubmitView == undefined ? '' : item.isSubmitView ? '' : 'none',\n                        }}\n                      >\n                        {getFieldDecorator(item.fieldId, {\n                          rules: [\n                            {\n                              required:\n                                item.isSubmitView == undefined\n                                  ? item.isRequired\n                                  : item.isSubmitView\n                                  ? item.isRequired\n                                  : false,\n                              message: formatMessage({id: 'component.please.input'}),\n                            },\n                          ],\n                          initialValue:\n                            (initValue ? initValue : '') ||\n                            (item.fieldType == 'RADIO' ? keysRadio : '') ||\n                            (item.fieldType == 'CHECKBOX' ? keysCheckeBox : '') ||\n                            (item.fieldType == 'DROPLIST' ? keysDropList : ''),\n                        })(\n                          item.fieldType == 'TEXTBOX' ? (\n                            <Input style={{width: 390}} placeholder={item.fieldPlaceholder}/>\n                          ) : item.fieldType == 'DROPLIST' ? (\n                            <Select placeholder={item.fieldPlaceholder} style={{width: 390}}>\n                              {JSON.parse(item.fieldDataConfig.split(',')).map((item, index) => {\n                                return (\n                                  <Option value={item.name} key={index + '1'}>\n                                    {item.name}\n                                  </Option>\n                                );\n                              })}\n                            </Select>\n                          ) : item.fieldType == 'DATE' ? (\n                            <DatePicker style={{width: 390}}/>\n                          ) : item.fieldType == 'RADIO' ? (\n                            <Radio.Group>\n                              {JSON.parse(item.fieldDataConfig.split(',')).map((item, index) => {\n                                //console.log(item)\n                                return (\n                                  <Radio value={item.name} key={index} style={{marginRight: 12}}>\n                                    {item.name}\n                                  </Radio>\n                                );\n                              })}\n                            </Radio.Group>\n                          ) : item.fieldType == 'CHECKBOX' ? (\n                            <Checkbox.Group>\n                              {JSON.parse(item.fieldDataConfig.split(',')).map((item, index) => {\n                                //console.log(item)\n                                return (\n                                  <Checkbox\n                                    value={item.name}\n                                    key={index}\n                                    style={{marginRight: 12}}\n                                  >\n                                    {item.name}\n                                  </Checkbox>\n                                );\n                              })}\n                            </Checkbox.Group>\n                          ) : item.fieldType == 'TIME' ? (\n                            <TimePicker\n                              open={this.state.open}\n                              onOpenChange={this.handleOpenChange}\n                              style={{width: 390}}\n                              addon={() => (\n                                <Button size=\"small\" type=\"primary\" onClick={this.handleClose}>\n                                  OK\n                                </Button>\n                              )}\n                            />\n                          ) : item.fieldType == 'DATETIME' ? (\n                            <DatePicker style={{width: 390}} showTime/>\n                          ) : item.fieldType == 'TEXT' ? (\n                            <TextArea style={{width: 390}} rows={3}/>\n                          ) : item.fieldType == 'DECIMAL' ? (\n                            <InputNumber style={{width: 390}} step={0.01}/>\n                          ) : item.fieldType == 'INTEGER' ? (\n                            <InputNumber style={{width: 390}} min={1} precision={0}/> //decimalSeparator=\"0\" 卡控输入小数点就是输入0    precision={0} 输入值四舍五入 输入0.5以下默认1\n                          ) : item.fieldType == 'URL' ? (\n                            <Input style={{width: 390}}/>\n                          ) : item.fieldType == 'ATTACHMENT' ? (\n                            <div>\n                              <PicturesWalls\n                                picFileList={this.state.picFileData[item.fieldId] || []}\n                                handlePictureFileId={(response, file) =>\n                                  this.updateCallBack(response, file, item.fieldId)\n                                }\n                              />\n                              <Alert\n                                style={{width: 360, padding: '0 0 20 0', marginTop: 30}}\n                                message={\n                                  <FormattedMessage id=\"component.form.category.image.messages\"/>\n                                }\n                                type=\"info\"\n                                showIcon\n                              />\n                            </div>\n                          ) : (\n                            ''\n                          ),\n                        )}\n                      </Form.Item>\n                    );\n                  })}\n                </Row>\n              </Form>\n            )}\n            {!this.state.enableRole&&<div >\n              <div >\n                <Form.Item>\n                  <div style={{ width: '100%', marginLeft: '15%' }}>\n                    <ul style={{ width: '40%', height: '100%' }}>\n                      {this.state.UserPortrait &&\n                      this.state.UserPortrait.map(item => {\n                        return (\n                          <li style={{ borderRadius: 5 }} className=\"approve\">\n                            {/* <div className=\"delete\" onClick={()=>this.onDelete(item.id)}></div> */}\n                            <img\n                              src={\n                                item.avatar\n                                  ? item.avatar\n                                  : 'https://xiniunet.oss-cn-hangzhou.aliyuncs.com//512824102474878976/upload/1235149587552018432.png'\n                              }\n                              className=\"approve-img user\"\n                            ></img>\n                            <div className=\"approve-name\">{item.name}</div>\n                            <div className=\"approve-position\" title=\"\"></div>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </Form.Item>\n                <Form {...submitForm}>\n\n                  <Form.Item\n                    label={<FormattedMessage id=\"component.form.submission.executor\" />}\n                    wrapperCol={{ span: 15 }}\n                  >\n                    {getFieldDecorator('assignUserIds', {\n                      rules: [\n                        {\n                          required: true,\n                          message: formatMessage({ id: 'component.select.placeholder' }), //component.please.enter\n                        },\n\n                      ],\n                      initialValue: this.state.userIdList,\n                    })(\n                      <Select\n                        onSelect={this.onSelectKey}\n                        onDeselect={this.onDeselectKye}\n                        placeholder={<FormattedMessage id=\"component.please.enter\" />}\n                        showSearch\n                        value={userIdList}\n                        mode=\"multiple\"\n                        filterOption={(input, option) =>\n                          option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                        style={{ width: 280 }}\n                      >\n                        {this.state.getUser.map((item, index) => {\n                          return (\n                            <Option value={item.id} key={index}>\n                              {item.name}\n                            </Option>\n                          );\n                        })}\n                      </Select>,\n                    )}\n                  </Form.Item>\n                </Form>\n              </div>\n            </div>}\n\n            <Form {...submitFormButton} style={{textAlign: 'center'}}>\n              <Form.Item>\n                {/* 跳转提交页面 */}\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  onClick={e => this.submitGetData(e)}\n                  loading={this.state.buttonLodingSubmit}\n                >\n                  {<FormattedMessage id=\"component.submission\"/>}\n                </Button>\n                {/* 跳转保存页面 */}\n                <Button\n                  style={{marginLeft: 40}}\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  onClick={this.hanleclick}\n                  loading={this.state.buttonLodingSave}\n                >\n                  {<FormattedMessage id=\"component.preservation\"/>}\n                </Button>\n                <Popconfirm\n                  placement=\"top\"\n                  title={texts}\n                  onConfirm={this.onConfirm}\n                  okText={<FormattedMessage id=\"component.confirm\"/>}\n                  cancelText={<FormattedMessage id=\"component.cancel\"/>}\n                >\n                  <Button\n                    style={{marginLeft: 40}}\n                    // onClick={e => {\n                    //   ;\n                    // }}\n                  >\n                    {<FormattedMessage id=\"component.reset\"/>}\n                  </Button>\n                </Popconfirm>\n              </Form.Item>\n            </Form>\n          </div>\n          <div style={{width:120,right:'30%',top:'7%',position:\"absolute\"}}>\n            {\n              this.state.isShow && <SubmitImport\n                data={importData}\n                style={{marginRight: '20px'}}\n              />\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(Submit);\n\n//图片上传提示语\n{\n  /* <Tooltip placement=\"right\" title={text}>\n   <div style={{ width: '102px', height: '102px' }}>\n    <PicturesWalls\n      picFileList={this.state.picFileList}\n       handlePictureFileId={this.updateCallBack}\n      />\n   </div>\n</Tooltip> */\n}\n\n\naimport React, { Component } from 'react';\nimport {Card, Row, Col, Statistic, Icon, Radio, Tabs, Button, Form, DatePicker, Table, Empty} from 'antd';\nimport Echarts from 'echarts-for-react';\nimport moment from 'moment';\nimport {PageHeaderWrapper} from \"@ant-design/pro-layout\";\nimport {getTodayQuantity, getStatisticsByMouth, getStatisticsByToday, getStatisticsByWeek, outpatientAppintmentFind, examinationAppintmentFind} from '../services/hospital';\nimport style from '../assets/css/welcome.less';\n\nclass Welcome extends Component {\n  constructor(props: Readonly<{}>) {\n    super(props);\n  }\n\n  state = {\n    loading: false,\n    todayNum: {examination: 0, outpatient: 0, revisit: 0, total: 0},\n    key: '1',\n    type: 'calendar',\n    calendar: 'month',\n    calendarThead: [],\n    calendarThbody: [],\n    columns: [\n      {title: '日期', dataIndex: 'dateType', key: 'dateType'},\n      {title: '时间', dataIndex: 'timeStartType', key: 'timeStartType',render(text,record){\n         return  (<span>{record.timeStartType}-{record.timeEndType}</span>)\n        }\n      },\n      {title: '预约人数', dataIndex: 'count', key: 'count'}\n    ],\n    pagination: {current: 1, pageSize: 8, onChange: (page: number) => { this.getListOrderData(page) }, total: 0},\n    list: [],\n    startDate: new Date().getTime(),\n    endDate: new Date().getTime(),\n    xAxis: [],\n    outpatient: [],\n    examination: []\n  };\n\n  componentDidMount () {\n    this.getTodayPeoplesNums();\n    this.getAppointmentStatisticsByToday(0);\n  }\n\n  //获取当天的门诊/体检/回访的人数\n  getTodayPeoplesNums = () => {\n    getTodayQuantity({}).then((res: any) => {\n      if (!res.errors || res.errors.length === 0) {\n        let examination = res.hospitalHomePages.filter((item: any) => item.name === 'examination');\n        let outpatient = res.hospitalHomePages.filter((item: any) => item.name === 'outpatient');\n        let revisit = res.hospitalHomePages.filter((item: any) => item.name === 'revisit');\n        let nums: any = {\n          examination: examination[0] ? examination[0].count : 0,\n          outpatient: outpatient[0] ? outpatient[0].count : 0,\n          revisit: revisit[0] ? revisit[0].count : 0,\n        }\n        nums.total = nums.examination + nums.outpatient;\n        this.setState({todayNum: nums})\n      }\n    })\n  }\n\n  //获取今天/昨天的预约统计\n  getAppointmentStatisticsByToday = (day: number) => {\n    let date = new Date().getTime() - day;\n    getStatisticsByToday({yearDate: new Date(date)['format']()}).then((res: any) => {\n      if ((!res.errors || res.errors.length === 0) && res.appointmentDates && res.appointmentDates.length > 0) {\n        let examination = [], outpatient = [], xAxis = [];\n        for (let i = 0; i < 23; i++) {\n          xAxis.push(i < 10 ? ('0' + i + '时') : (i + '时'));\n          examination.push(res.appointmentDates[0]['day' + i] || 0);\n          outpatient.push(res.appointmentDates[1]['day' + i] || 0);\n        }\n        this.setState({examination, outpatient, xAxis})\n      }\n    })\n  }\n\n  //获取本周的预约统计\n  getAppointmentStatisticsByWeek = () => {\n    let date = new Date(), day = (date.getDay() ? date.getDay() : 7), start: any = date.getTime() - ((day - 1) * 8.64e7), end: any = date.getTime() + ((7 - day) * 8.64e7);\n    getStatisticsByWeek({startDate: new Date(start)['format'](), endDate: new Date(end)['format']()}).then((res: any) => {\n      if (!res.errors || res.errors.length === 0) {\n        let examination = [], outpatient = [], xAxis = [], week = ['周一', '周二', '周三', '周四', '周五', '周六', '周日'];\n        for (let i = 1; i <= 7; i++) {\n          xAxis.push(week[i-1]);\n          examination.push(res.weeks[0]['day' + i] || 0);\n          outpatient.push(res.weeks[1]['day' + i] || 0);\n        }\n        this.setState({examination, outpatient, xAxis})\n      }\n    })\n  }\n\n  //获取本月的预约统计\n  getAppointmentStatisticsByMouth = () => {\n    getStatisticsByMouth({yearMonth: new Date()['format']('yyyy-MM')}).then((res: any) => {\n      if (!res.errors || res.errors.length === 0) {\n        let examination = [], outpatient = [], xAxis = [];\n        for (let i = 1; i <= new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate(); i++) {\n          xAxis.push(i + '号');\n          examination.push(res.profileSummaryByMonths[0]['day' + i] || 0);\n          outpatient.push(res.profileSummaryByMonths[1]['day' + i] || 0);\n        }\n        this.setState({examination, outpatient, xAxis})\n      }\n    })\n  }\n\n  //今日/昨日/本周/本月按钮\n  showDataSwitchButtons = () => {\n    if (this.state.key !== '1') return null;\n    return (\n      <Radio.Group defaultValue=\"toDay\">\n        <Radio.Button value=\"toDay\" onChange={()=>this.getAppointmentStatisticsByToday(0)}>今日</Radio.Button>\n        <Radio.Button value=\"yesterday\" onChange={()=>this.getAppointmentStatisticsByToday(8.64e7)}>昨日</Radio.Button>\n        <Radio.Button value=\"week\" onChange={()=>this.getAppointmentStatisticsByWeek()}>本周</Radio.Button>\n        <Radio.Button value=\"mouth\" onChange={()=>this.getAppointmentStatisticsByMouth()}>本月</Radio.Button>\n      </Radio.Group>\n    )\n  }\n\n  //切换月/周/日日历模式\n  switchClendar = (calendar: string) => {\n    if (this.state.loading) return ;\n    this.setState({calendar, startDate: new Date().getTime(), endDate: new Date().getTime()}, () => {\n      this.checkClendarPrevOrNextDate(0);\n    })\n  }\n\n  //预约日历前进后退按钮\n  checkClendarPrevOrNextDate = (step: number) => {\n    if (this.state.loading || this.state.key === '1') return ;\n    let current = this.state.startDate, dateObj = {\n      loading: true,\n      week: {\n        startDate: moment(current).week(moment(current).week() + step).startOf('week').valueOf(),\n        endDate: moment(current).week(moment(current).week() + step).startOf('week').valueOf() + 6 * 86400000\n      },\n      month: {\n        startDate: moment(current).month(moment(current).month() + step).startOf('month').valueOf(),\n        endDate: moment(current).month(moment(current).month() + step).endOf('month').valueOf()\n      },\n      date: {startDate: moment(current).add(step, 'days').valueOf(), endDate: moment(current).add(step, 'days').valueOf()}\n    }\n    this.setState(dateObj[this.state.calendar], () => {\n      let fun = {\n        week: () => this.calculationWeekCalendar(),\n        date: () => this.calculationDayCalendar(),\n        month: () => this.calculationMonthCalendar(),\n      }\n      return fun[this.state.calendar]();\n    })\n  }\n\n  //获取列表数据\n  getListOrderData = async (current: number) => {\n    this.props['form'].validateFields(async (err: any, values: any) => {\n      if (values.appointmentTimeBegin) {\n        values.appointmentTimeBegin = moment(values.appointmentTimeBegin).format('YYYY-MM-DD')\n      }\n      if (values.appointmentTimeEnd) {\n        values.appointmentTimeEnd = moment(values.appointmentTimeEnd).format('YYYY-MM-DD')\n      }\n      let parms = {hospitalId: sessionStorage.hospitalId, statisticsWay: 'list', pageNumber: current, pageSize: this.state.pagination.pageSize, ...values};\n      let res: any = this.state.key === '2' ? await outpatientAppintmentFind(parms) : await examinationAppintmentFind(parms);\n      if (!res.errors || res.errors.length === 0) {\n        this.setState({list: res.result, pagination: { ...this.state.pagination, current, total: parseInt(res.totalCount)}})\n      }\n    })\n  }\n\n  //计算周日历\n  calculationWeekCalendar = async () => {\n    let week = ['日', '一', '二', '三', '四', '五', '六'], interval = ['8:30', '10:00', '12:00', '13:30', '15:30', '17:30', '合计'], calendarThead: any = [''], calendarThbody: any = [], startDate = this.state.startDate, total: any = [];\n    let parms = {hospitalId: sessionStorage.hospitalId, statisticsWay: 'date', statisticsType: 'week', appointmentTimeBegin: moment(this.state.startDate).format('YYYY-MM-DD'), appointmentTimeEnd: moment(this.state.endDate).format('YYYY-MM-DD')};\n    let res: any = this.state.key === '3' ? await examinationAppintmentFind(parms) : await outpatientAppintmentFind(parms);\n    if (!res.errors || res.errors.length === 0) {\n      interval.forEach((item: string, index: number) => {\n        let source: any = [{content: item, tdStyle: item === '合计' ? {verticalAlign: 'middle', color: '#1890ff'} : {}}];\n        for (let i = 0; i < (item === '12:00' || item === '17:30' ? 1 : 7); i++) {\n          if (index === 0) {\n            calendarThead.push(`${moment(startDate).add(i, 'days').format('MM月DD日')} (${week[new Date(startDate + (i * 86400000)).getDay()]})`);\n          }\n          let content: any = res.result.find((key: any) => key.timeStartType === item && key.monthDayType === moment(startDate).add(i, 'days').format('MM-DD')) || {count: 0};\n          if (item !== '合计' && item !== '17:30' && item !== '12:00') {\n            total[i] = (total[i] || 0) + content.count;\n          }\n          source.push({content: (item === '12:00' ? '午休中' : item === '17:30' ? '下班' : item == '合计' ? total[i] + '人': (content.count + '人')), colSpan: (item === '12:00' || item === '17:30' ? 7 : 1), tdStyle: item === '12:00' || item === '17:30' ? { background: 'rgba(24,144,225,0.1)' } : {}})\n        }\n        calendarThbody.push({source});\n      })\n    }\n    this.setState({calendarThbody, calendarThead, loading: false});\n  }\n\n  //计算天日历\n  calculationDayCalendar = async () => {\n    let interval = ['8:30', '10:00', '12:00', '13:30', '15:30', '17:30'], calendarThead: any = ['', moment(this.state.startDate).format('MM月DD日')], calendarThbody: any = [];\n    let parms = {hospitalId: sessionStorage.hospitalId, statisticsWay: 'date', statisticsType: 'day', appointmentTime: moment(this.state.startDate).format('YYYY-MM-DD')};\n    let res: any = this.state.key === '3' ? await examinationAppintmentFind(parms) : await outpatientAppintmentFind(parms);\n    if (!res.errors || res.errors.length === 0) {\n      interval.forEach((item: string, index: number) => {\n        let content: any = res.result.find((key: any) => key.timeStartType === item) || {count: 0};\n        let source: any = [{content: item}, {content: (item === '12:00' ? '午休中' : item === '17:30' ? '下班' : (content.count + '人')), colSpan: (item === '12:00' || item === '17:30' ? 7 : 1), tdStyle: item === '12:00' || item === '17:30' ? { background: 'rgba(24,144,225,0.1)' } : {}}];\n        calendarThbody.push({source});\n      })\n    }\n\n    this.setState({calendarThbody, calendarThead,loading: false});\n  }\n\n  //计算月日历\n  calculationMonthCalendar = async () => {\n    this.setState({loading: true});\n    let startDate = new Date(this.state.startDate), totalDay = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0).getDate(), calendarThbody: any = [], calendarThead: any = [], prefix: number = (new Date(startDate.getFullYear(), startDate.getMonth(), 1).getDay() || 7) - 1, suffix: number = 7 - (new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0).getDay() || 7), list = [];\n    let parms = {hospitalId: sessionStorage.hospitalId, statisticsWay: 'date', statisticsType: 'month', appointmentTime: moment(this.state.startDate).format('YYYY-MM')};\n    let res: any = this.state.key === '3' ? await examinationAppintmentFind(parms) : await outpatientAppintmentFind(parms);\n    if (!res.errors || res.errors.length === 0) {\n      for (let i = 1; i <= totalDay; i++) {\n        let isDisable = moment(startDate).add(i - 1, 'days').format('YYYYMMDD') < moment(new Date()).format('YYYYMMDD');\n        let content: any = res.result.find((item: any) => parseInt(item.dayType) === i) || {};\n        list.push({date: (i < 10 ? '0' + i : i), content: ((content.count || 0) +'人'), colSpan: 1, classN: isDisable ? 'disable' : new Date().getDate() === i ? 'active' : ''})\n      }\n      for (let i = 1; i <= prefix; i++) {\n        list.unshift({classN: 'disable'})\n      }\n      for (let i = 1; i <= suffix; i++) {\n        let isDisable = new Date().getFullYear() > startDate.getFullYear() || new Date().getMonth() + 1 > startDate.getMonth() + 1;\n        list.push(isDisable ? {classN: 'disable'} : {})\n      }\n      for (let i = 1; i <= list.length; i++) {\n        if (i % 7 === 0) {\n          calendarThbody.push({ source: list.slice(i - 7, i)})\n        }\n      }\n    }\n    this.setState({ calendarThbody, calendarThead, loading: false })\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props['form']\n    let option: any = {\n      xAxis: {type: 'category', data: this.state.xAxis},\n      yAxis: {type: 'value'},\n      tooltip: {trigger: 'axis', axisPointer : {type : 'line'}},\n      legend: {data:['体检预约','门诊预约']},\n      series: [\n        {data: this.state.examination, name:'体检预约', type:'line'},\n        {data: this.state.outpatient, type: 'line', name: '门诊预约'}\n        ]\n    };\n    return (\n      <PageHeaderWrapper breadcrumb={false}>\n        <Card title={null} bordered={false}>\n          <Row>\n            <Col md={6} sm={12} xs={24}><Statistic title=\"今日预约人数\" value={this.state.todayNum.total} suffix=\"人\" prefix={<Icon type=\"area-chart\" />} /></Col>\n            <Col md={6} sm={12} xs={24}><Statistic title=\"今日体检人数\" value={this.state.todayNum.examination} suffix=\"人\" prefix={<Icon type=\"pie-chart\" />} /></Col>\n            <Col md={6} sm={12} xs={24}><Statistic title=\"今日门诊人数\" value={this.state.todayNum.outpatient} suffix=\"人\" prefix={<Icon type=\"rise\" />} /></Col>\n            <Col md={6} sm={12} xs={24}><Statistic title=\"今日回访总人数\" value={this.state.todayNum.revisit} suffix=\"人\" prefix={<Icon type=\"dot-chart\" />} /></Col>\n          </Row>\n        </Card>\n\n        <Card bordered={false} title={<Tabs tabBarStyle={{margin: 1}} defaultActiveKey=\"1\" onChange={(key)=>this.setState({key, type: 'calendar'},()=>this.checkClendarPrevOrNextDate(0))}><Tabs.TabPane tab=\"预约统计\" key=\"1\" /><Tabs.TabPane tab=\"门诊\" key=\"2\" /><Tabs.TabPane tab=\"体检\" key=\"3\" /></Tabs>} style={{marginTop: 18}} extra={this.showDataSwitchButtons()}>\n          <div>\n            {/*预约统计*/}\n            {this.state.key === '1' &&\n              <div>\n                <h2 style={{textAlign: 'center', marginBottom: 18}}>{new Date().getMonth() + 1}月份预约统计</h2>\n                <Echarts option={option} />\n              </div>\n            }\n\n            {/*门诊/体检*/}\n            {this.state.key !== '1' &&\n              <div>\n              <div className={style.pane}>\n                <div className={style.paneBtn}>\n                  <Button ghost icon=\"calendar\" className={this.state.type === 'calendar' ? style.active : ''} onClick={() => this.setState({ type: 'calendar' }, () => this.checkClendarPrevOrNextDate(0))}>日历</Button>\n                  <Button ghost icon=\"calendar\" className={this.state.type === 'list' ? style.active : ''} onClick={() => this.setState({ type: 'list', list: [], pagination: {...this.state.pagination, current: 1, total: 0} }, () => this.getListOrderData(1))}>列表</Button>\n                </div>\n                <div className={style.paneCheck} style={this.state.type === 'list' ? { display: 'none' } : {}}>\n                  <label className={this.state.calendar === 'month' ? style.active : ''} onClick={() => this.switchClendar('month')}>月</label>\n                  <label className={this.state.calendar === 'week' ? style.active : ''} onClick={() => this.switchClendar('week')}>周</label>\n                  <label className={this.state.calendar === 'date' ? style.active : ''} onClick={() => this.switchClendar('date')}>日</label>\n                </div>\n                <div className={style.checkDate} style={this.state.type === 'list' ? { display: 'none' } : {}}><Icon type=\"left\" onClick={() => this.checkClendarPrevOrNextDate(-1)}/><span>{moment(this.state.startDate).format(this.state.calendar === 'date' ? 'YYYY年MM月DD日' : 'YYYY年MM月')}</span><Icon type=\"right\" onClick={() => this.checkClendarPrevOrNextDate(1)}/></div>\n              </div>\n\n              {/*月,周,日日历*/}\n              {this.state.type === 'calendar' &&\n                <table className={style.calendar}>\n                  <thead>\n                    <tr>{this.state.calendarThead.map((item: any, index: number) => (<th key={index}>{item}</th>))}</tr>\n                  </thead>\n                  <tbody>\n                  {this.state.calendarThbody.map((item: any, index: number) => (\n                    <tr key={index} className={style[this.state.calendar]}>\n                      {item.source.map((key: any, count: number) => (\n                        <td key={count} className={style[key.classN]} colSpan={key.colSpan} style={key.tdStyle}>\n                          {key.date && <div className={style.date}><span>{key.date}</span></div>}\n                          <div>{key.content}</div>\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                  </tbody>\n              </table>\n              }\n\n              {/*没有数据*/}\n              {!this.state.loading && this.state.calendarThbody.length === 0 && <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />}\n\n              {/*列表*/}\n              {this.state.type === 'list' &&\n                <div style={{ marginTop: 10 }}>\n                  <Form name=\"Form\" layout=\"inline\">\n                    <Form.Item label=\"起始日期\">{getFieldDecorator('appointmentTimeBegin')(<DatePicker placeholder=\"请选择起始日期\"/>)}</Form.Item>\n                    <Form.Item label=\"截止日期\">{getFieldDecorator('appointmentTimeEnd')(<DatePicker placeholder=\"请选择截止日期\"/>)}</Form.Item>\n                    <Form.Item>\n                      <Button type=\"primary\" style={{marginRight: 10}} onClick={()=>this.getListOrderData(1)}>查询</Button>\n                      <Button onClick={() => {this.props['form'].resetFields();this.getListOrderData(1)}}>重置</Button>\n                    </Form.Item>\n                  </Form>\n\n                  <Table style={{ marginTop: 18 }} pagination={this.state.pagination} bordered columns={this.state.columns} rowKey={(record: any, index: number)=>index.toString()} dataSource={this.state.list} loading={this.state.loading}/>\n                </div>\n              }\n            </div>\n            }\n          </div>\n        </Card>\n      </PageHeaderWrapper>\n    );\n  }\n}\n\nexport default Form.create({ name: 'Form' })(Welcome)\n\n\n<TabPane tab=\"已质控\" key=\"2\">\n                <div>\n                  {this.state.tableType === 'visited' && <Form layout=\"inline\" className={styles.searchForm}>\n                  <Row gutter={24}>\n                    <Col span={2} style={{textAlign:\"left\"}}>\n                      科室:\n                    </Col>\n                    <Col span={20}>\n                    <Tag.CheckableTag\n                          style={{marginBottom:\"8px\",fontSize:\"14px\"}}\n                          key=\"0\"\n                          checked={this.state.search.departmentName === '0'}\n                          onChange={() =>\n                            this.setState(\n                              {\n                                pageNumber: 0,\n                                list: [],\n                                search: { ...this.state.search, departmentName: '0' },\n                              },\n                              () => this.getVisitedTableData(),\n                            )\n                          }\n                        >\n                         {'全部'}\n                        </Tag.CheckableTag>\n                      {this.state.departmentList.map((item: any) => (\n                        <Tag.CheckableTag\n                          style={{marginBottom:\"8px\",fontSize:\"14px\"}}\n                          key={item.id}\n                          checked={this.state.search.departmentName === item.name}\n                          onChange={() =>\n                            this.setState(\n                              {\n                                pageNumber: 0,\n                                list: [],\n                                search: { ...this.state.search, departmentName: item.name },\n                              },\n                              () => this.getVisitedTableData(),\n                            )\n                          }\n                        >\n                          {item.name}\n                        </Tag.CheckableTag>\n                      ))}\n                    </Col>\n                    </Row>\n                    <Row>\n                      <FormItem label=\"病人姓名/住院号\">{getFieldDecorator('names', {initialValue: this.state.visitSearch.name})(<Input style={{ width: 160 }} placeholder=\"病人姓名/住院号\" />)}</FormItem>\n                      <Form.Item label={`出院日期`}>{getFieldDecorator(`appointmentTimeVisiteds`, {initialValue: this.state.visitSearch.appointmentTimeBegin ? [moment(new Date(this.state.visitSearch.appointmentTimeBegin)), moment(new Date(this.state.visitSearch.appointmentTimeEnd))] : ''})(<RangePicker allowClear={true} style={{ width: 230 }} onChange={onChangeDate2} />)}</Form.Item>\n                        <Button style={{marginTop: 4,marginLeft:60}} type=\"primary\" onClick={(event)=>this.handlVisiteSearch(event)}>查询</Button>\n                       <Button style={{marginTop: 4,marginLeft:60}} onClick={this.handleFormResetVisited}>重置</Button>\n                    </Row>\n                    <Row>\n                      <Form.Item style={{whiteSpace:\"nowrap\"}} label=\"效验状态\">\n                          {getFieldDecorator('syncStatuss', {initialValue:''})(\n                              <Radio.Group buttonStyle=\"solid\" onChange={this.getStatus.bind(this)}>\n                                  <Radio.Button value=\"\" style={{ marginLeft: '2%' }}>全部({this.state.uvm.totalCount})</Radio.Button>\n                                  <Radio.Button value=\"0\" style={{ marginLeft: '2%'}}>合格{this.state.uvm.totalCount})</Radio.Button>\n                                  <Radio.Button value=\"1\" style={{ marginLeft: '2%' }}>不合格({this.state.uvm.totalCount})</Radio.Button>\n                              </Radio.Group>\n                          )}\n                      </Form.Item>\n                  </Row>\n                    <Row style={{marginTop:\"8px\"}}>\n                      <Button type=\"primary\" onClick={this.qualityManage.bind(this)}>质控</Button>\n                      <Button type=\"primary\" onClick={this.primaryCase.bind(this)} style={{marginLeft:\"12px\"}}>提交</Button>\n                      <Button type=\"primary\" onClick={this.returnCase.bind(this)} style={{marginLeft:\"12px\"}}>退回</Button>\n                      <Button type=\"primary\" onClick={this.reloadCase.bind(this)} style={{marginLeft:\"12px\"}}>刷新</Button>\n                    </Row>\n                    </Form>}\n                  <LayoutTable\n                    columns={this.state.visitedColumns}\n                    dataSource={this.state.visitedListData}\n                    rowSelection={rowSelection}\n                    locale={{ emptyText: '暂无病历' }}\n                    rowKey=\"id\"\n                    rowKey={record => record.id}\n                    loading={false}\n                    vm={this.state.vm}\n                    handlePageChange={this.handlePageChange.bind(this)}\n                    onShowSizeChange={this.onShowSizeChange.bind(this)}\n                    onselectRow = {this.handleRow.bind(this)}\n                  ></LayoutTable>\n                </div>\n              </TabPane>\n              <TabPane tab=\"已打回\" key=\"3\">\n                <div>\n                  {this.state.tableType === 'revisited' && <Form layout=\"inline\" className={styles.searchForm}>\n                  <Row gutter={24}>\n                    <Col span={2} style={{textAlign:\"left\"}}>\n                      科室:\n                    </Col>\n                    <Col span={20}>\n                    <Tag.CheckableTag\n                          style={{marginBottom:\"8px\",fontSize:\"14px\"}}\n                          key=\"0\"\n                          checked={this.state.search.departmentName === '0'}\n                          onChange={() =>\n                            this.setState(\n                              {\n                                pageNumber: 0,\n                                list: [],\n                                search: { ...this.state.search, departmentName: '0' },\n                              },\n                              () => this.getRevisitedTableData(),\n                            )\n                          }\n                        >\n                         {'全部'}\n                        </Tag.CheckableTag>\n                      {this.state.departmentList.map((item: any) => (\n                        <Tag.CheckableTag\n                          style={{marginBottom:\"8px\",fontSize:\"14px\"}}\n                          key={item.id}\n                          checked={this.state.search.departmentName === item.name}\n                          onChange={() =>\n                            this.setState(\n                              {\n                                pageNumber: 0,\n                                list: [],\n                                search: { ...this.state.search, departmentName: item.name },\n                              },\n                              () => this.getRevisitedTableData(),\n                            )\n                          }\n                        >\n                          {item.name}\n                        </Tag.CheckableTag>\n                      ))}\n                    </Col>\n                    </Row>\n                    <Row>\n                        <FormItem label=\"病人姓名/住院号\">{getFieldDecorator('namess', {initialValue: this.state.revisitSearch.name})(<Input style={{ width: 160 }} placeholder=\"病人姓名/住院号\" />)}</FormItem>\n                        <Form.Item label={`出院日期`}>{getFieldDecorator(`appointmentTimeVisitedss`, {initialValue: this.state.revisitSearch.appointmentTimeBegin ? [moment(new Date(this.state.revisitSearch.appointmentTimeBegin)), moment(new Date(this.state.revisitSearch.appointmentTimeEnd))] : ''})(<RangePicker allowClear={true} style={{ width: 230 }} onChange={onChangeDate2} />)}</Form.Item>\n                        <Button style={{marginTop: 4,marginLeft:60}} type=\"primary\" onClick={(event)=>this.handlRevisiteSearch(event)}>查询</Button>\n                        <Button style={{marginTop: 4,marginLeft:60}} onClick={this.handleFormResetRevisited}>重置</Button>\n                    </Row>\n                    <Row>\n                      <Form.Item style={{whiteSpace:\"nowrap\"}} label=\"效验状态\">\n                          {getFieldDecorator('syncStatusss', {initialValue:''})(\n                              <Radio.Group buttonStyle=\"solid\" onChange={this.getStatus.bind(this)}>\n                                  <Radio.Button value=\"\" style={{ marginLeft: '2%' }}>全部({this.state.uvm.totalCount})</Radio.Button>\n                                  <Radio.Button value=\"0\" style={{ marginLeft: '2%'}}>合格{this.state.uvm.totalCount})</Radio.Button>\n                                  <Radio.Button value=\"1\" style={{ marginLeft: '2%' }}>不合格({this.state.uvm.totalCount})</Radio.Button>\n                              </Radio.Group>\n                          )}\n                      </Form.Item>\n                  </Row>\n                    <Row style={{marginTop:\"8px\"}}>\n                      <Button type=\"primary\" onClick={this.reprimaryCase.bind(this)}>重新提交</Button>\n                      <Button type=\"primary\" onClick={this.reloadCase.bind(this)} style={{marginLeft:\"12px\"}}>刷新</Button>\n                    </Row>\n                  </Form>}\n                  <LayoutTable\n                    columns={this.state.revisitedColumns}\n                    dataSource={this.state.revisitedListData}\n                    rowSelection={rowSelection}\n                    locale={{ emptyText: '暂无病历' }}\n                    rowKey=\"id\"\n                    rowKey={record => record.id}\n                    loading={false}\n                    vm={this.state.revm}\n                    handlePageChange={this.handlePageChange.bind(this)}\n                    onShowSizeChange={this.onShowSizeChange.bind(this)}\n                    onselectRow = {this.handleRow.bind(this)}\n                  ></LayoutTable>\n                </div>\n              </TabPane>\n              ```")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);