(window.webpackJsonp=window.webpackJsonp||[]).push([[567],{1055:function(e,t,r){"use strict";r.r(t);var n=r(6),i=Object(n.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"servlet-filter的两种映射方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet-filter的两种映射方式"}},[this._v("#")]),this._v(" servlet  Filter的两种映射方式")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('1）使用通配符*拦截用户的所有请求\nFilter 的 <filter-mapping> 元素用于配置过滤器拦截的资源信息，如果想让过滤器拦截所有的请求，那么可以使用通配符*实现，具体实现方式如下：\n<filter>\n    <filter-name>MyFilter</filter-name>\n    <filter-class>com.mengma.filter.MyFilter</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>MyFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n2）拦截不同方式的访问请求\n在 web.xml 文件中，每一个 <filter-mapping> 元素都可以配置一个 Filter 所负责拦截的资源。在 <filter-mapping> 元素中有一个特殊的子元素 <dispatcher>，该元素用于指定过滤器所拦截的资源被 Servlet 容器调用的方式。<dispatcher> 元素的值共有四个，如表 1 所示。\n表 1 <dispatcher>元素的值\n名称\t功能描述\nREQUEST\t当用户直接访问页面时，Web 容器将会调用过滤器。如果目标资源通过 RequestDispatcher 的 include() 或 forward() 方法访问，那么该过滤器将不会被调用\nINCLUDE\t如果目标资源通过 RequestDispatcher 的 include() 方法访问，那么该过滤器将会被调用。除此之外，该过滤器不会被调用\nFORWARD\t如果目标资源通过 RequestDispatcher 的 forward() 方法访问，那么该过滤器将会被调用。除此之外，该过滤器不会被调用\nERROR\t如果目标资源通过声明式异常处理机制调用，那么该过滤器将会被调用。除此之外，该过滤器不会被调用\n为了让读者更好地理解表 1 中的四个值的作用，下面以 FORWARD 为例，分步骤演示 Filter 对转发请求的拦截效果。\n1）创建ForwardServlet\n在 filterDemo01 项目的 com.mengma.filter 包中创建一个名为 ForwardServlet 的 Servlet 类，该类用于将请求转发给 first.jsp 页面，如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class ForwardServlet extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        request.getRequestDispatcher("/first.jsp").forward(request, response);\n    }\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doGet(request, response);\n    }\n}\n2）创建 first.jsp\n在项目的 WebContent 目录中创建一个名称为 first.jsp 的页面，该页面用于输出内容，编辑代码如下所示。\n<%@ page language="java" contentType="text/html; charset=utf-8"\n    pageEncoding="utf-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n       "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n<title>Insert title here</title>\n</head>\n<body>\n    first.jsp\n</body>\n</html>\n3）创建并编辑过滤器 ForwardFilter\n在 com.mengma.filter 包中创建一个名称为 ForwardFilter 的过滤器，该过滤器专门用于对 first.jsp 页面进行拦截。需要注意的是，在填写配置信息时，需要将 Edit Filter Mapping 窗口中 Select dispatchers 下的 Forward 复选框选中，如图 1 所示。\n\n配置拦截信息\n图 1  配置拦截信息\n\n创建完成后，编辑 ForwardFilter 类。编辑后的实现代码如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\npublic class ForwardFilter implements Filter {\n    public void init(FilterConfig fConfig) throws ServletException {\n        // 过滤对象在初始化时调用，可以配置一些初始化参数\n    }\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n        // 用于拦截用户的请求，如果和当前过滤器的拦截路径匹配，该方法会被调用\n        PrintWriter out = response.getWriter();\n        out.write("Hello FilterTest");\n    }\n    public void destroy() {\n        // 过滤器对象在销毁时自动调用，释放资源\n    }\n}\n此时需在 web.xml 文件中添加 ForwardFilter 的映射信息。代码中增加了一个 <dispatcher> 子元素，并且该元素的值为 FORWARD，如下所示：\n<filter>\n    <filter-name>ForwardFilter</filter-name>\n    <filter-class>com.mengma.filter.ForwardFilter</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>ForwardFilter</filter-name>\n    <url-pattern>/first.jsp</url-pattern>\n    <dispatcher>FORWARD</dispatcher>\n</filter-mapping>\n4）运行项目并查看结果\n启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/filterDemo01/ForwardServlet 访问 ForwardServlet，\n\n')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);