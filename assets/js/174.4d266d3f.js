(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{663:function(n,t,i){"use strict";i.r(t);var r=i(6),a=Object(r.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"java-打印类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-打印类型"}},[this._v("#")]),this._v(" Java  打印类型")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\n-  打印菱形\n\npublic class Diamond {\n    public static void main(String[] args) {\n        print(8); // 输出 8 行的菱形\n    }\n \n    public static void print(int size) {\n        if (size % 2 == 0) {\n            size++; // 计算菱形大小\n        }\n        for (int i = 0; i < size / 2 + 1; i++) {\n            for (int j = size / 2 + 1; j > i + 1; j--) {\n                System.out.print(" "); // 输出左上角位置的空白\n            }\n            for (int j = 0; j < 2 * i + 1; j++) {\n                System.out.print("*"); // 输出菱形上半部边缘\n            }\n            System.out.println(); // 换行\n        }\n        for (int i = size / 2 + 1; i < size; i++) {\n            for (int j = 0; j < i - size / 2; j++) {\n                System.out.print(" "); // 输出菱形左下角空白\n            }\n            for (int j = 0; j < 2 * size - 1 - 2 * i; j++) {\n                System.out.print("*"); // 输出菱形下半部边缘\n            }\n            System.out.println(); // 换行\n        }\n    }\n}\n\n- 九九乘法表\n\npublic class MultiplicationTable {\n    public static void main(String[] args) {\n        for(int i=1;i<=9;i++) {\n            for(int j=1;j<=i;j++) {\n                System.out.print(j+"×"+i+"="+i*j+"\\t");// \\t 跳到下一个TAB位置\n            }\n            System.out.println();\n        }\n    }\n}\n\n- 三角形\n\nclass Demo{\n    public static void main(String[] args){\n        for(int i=1;i<=5;i++){\n            for(int j=5; i<=j; j--)\n                System.out.print(" ");\n            for(int j=1; j<=i; j++)\n                System.out.print("*");\n            for(int j=1; j<i; j++)\n                System.out.print("*");\n            System.out.println();\n        }\n    }\n}\n\n- 打印倒立的三角形\n\npublic class InvertedTriangle {\n    public static void main(String[] args) {\n         //打印倒立的三角形\n        for (int m = 1; m <= 4; m++) {\n            //打印空格\n            for (int n = 0; n <= m; n++) {\n                System.out.print(" ");\n            }\n            //打印*\n            for (int x = 1; x <= 7 -2 * (m - 1); x++) {\n                System.out.print("*");\n            }\n            System.out.println();\n        }        \n    }\n}\n\n- 打印平行四边形\n\npublic class Parallelogram {\n    public static void main(String[] args) {\n         //外层循环 每次打出一个*\n        for (int i = 1; i <=5; i++) {\n            //填充空格\n            for (int j = 1; j <= 5 - i; j++) {\n                System.out.print(" ");\n            }\n            //内层循环 每次打印一个*\n            for (int k = 1; k <= 5; k++) {\n                System.out.print("*");\n            }\n            System.out.println();\n        }\n    }\n}\n\n- 打印矩形\n\npublic class Rect {\n    public static void main(String[] args) {\n         //外层循环 每次输出一行*\n        for (int i = 1; i <= 5; i++) {\n            System.out.print("*");\n            //内层循环 每次输出一个*\n            for (int j = 1; j <= 5; j++) {\n                System.out.print("*");\n            }\n            System.out.println();\n        }\n    }\n}\n\n- 汉诺塔算法\n\npublic class MainClass {\n    public static void main(String[] args) {\n        int nDisks = 3;\n        doTowers(nDisks, \'A\', \'B\', \'C\');\n    }\n    public static void doTowers(int topN, char from, char inter, char to) {\n        if (topN == 1){\n            System.out.println("Disk 1 from "\n            + from + " to " + to);\n        }else {\n            doTowers(topN - 1, from, to, inter);\n            System.out.println("Disk "\n            + topN + " from " + from + " to " + to);\n            doTowers(topN - 1, inter, from, to);\n        }\n    }\n}\n\n- 阶乘\n\npublic class MainClass {\n    public static void main(String args[]) {\n    for (int counter = 0; counter <= 10; counter++){\n        System.out.printf("%d! = %d\\n", counter,\n        factorial(counter));\n    }\n    }\n    public static long factorial(long number) {\n        if (number <= 1)\n            return 1;\n        else\n            return number * factorial(number - 1);\n    }\n}\n\n- 斐波那契数列\n\npublic class MainClass {\n    public static void main(String[] args) {\n        for (int counter = 0; counter <= 10; counter++){\n            System.out.printf("Fibonacci of %d is: %d\\n", counter, fibonacci(counter));\n        }\n    }\n \n    public static long fibonacci(long number) {\n        if ((number == 0) || (number == 1))\n            return number;\n        else\n            return fibonacci(number - 1) + fibonacci(number - 2);\n    }\n}\n\npublic static void main(String[] args) {\n   Object testObject = new ArrayList();\n      displayObjectClass(testObject);\n   }\n   public static void displayObjectClass(Object o) {\n      if (o instanceof Vector)\n      System.out.println("对象是 java.util.Vector 类的实例");\n      else if (o instanceof ArrayList)\n      System.out.println("对象是 java.util.ArrayList 类的实例");\n      else\n      System.out.println("对象是 " + o.getClass() + " 类的实例");\n   }\n}\n\n- break 关键字用法\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] intary = { 99,12,22,34,45,67,5678,8990 };\n        int no = 5678;\n        int i = 0;\n        boolean found = false;\n        for ( ; i < intary.length; i++) {\n            if (intary[i] == no) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            System.out.println(no + " 元素的索引位置在: " + i);\n        } \n        else {\n            System.out.println(no + " 元素不在数组中");\n        }\n    }\n}\n\n- continue 关键字用法\n\npublic class Main {\n    public static void main(String[] args) {\n        StringBuffer searchstr = new StringBuffer("hello how are you. ");\n        int length = searchstr.length();\n        int count = 0;\n        for (int i = 0; i < length; i++) {\n            if (searchstr.charAt(i) != \'h\')\n            continue;\n            count++;\n            searchstr.setCharAt(i, \'h\');\n        }\n        System.out.println("发现 " + count \n        + " 个 h 字符");\n        System.out.println(searchstr);\n    }\n}\n\n\n- enum\n\nenum Car {\n    lamborghini,tata,audi,fiat,honda\n}\npublic class Main {\n    public static void main(String args[]){\n        Car c;\n        c = Car.tata;\n        switch(c) {\n            case lamborghini:\n                System.out.println("你选择了 lamborghini!");\n                break;\n            case tata:\n                System.out.println("你选择了 tata!");\n                break;\n            case audi:\n                System.out.println("你选择了 audi!");\n                break;\n            case fiat:\n                System.out.println("你选择了 fiat!");\n                break;\n            case honda:\n                System.out.println("你选择了 honda!");\n                break;\n            default:\n                System.out.println("我不知道你的车型。");\n                break;\n        }\n    }\n}\n\n- enum\nenum Car {\n    lamborghini(900),tata(2),audi(50),fiat(15),honda(12);\n    private int price;\n    Car(int p) {\n        price = p;\n    }\n    int getPrice() {\n        return price;\n    } \n}\npublic class Main {\n    public static void main(String args[]){\n        System.out.println("所有汽车的价格：");\n        for (Car c : Car.values())\n        System.out.println(c + " 需要 " \n        + c.getPrice() + " 千美元。");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] intary = { 1,2,3,4};\n        forDisplay(intary);\n        foreachDisplay(intary);\n    }\n    public static void forDisplay(int[] a){  \n        System.out.println("使用 for 循环数组");\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + " ");\n        }\n        System.out.println();\n    }\n    public static void foreachDisplay(int[] data){\n        System.out.println("使用 foreach 循环数组");\n        for (int a  : data) {\n            System.out.print(a+ " ");\n        }\n    }\n}\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        int[] arr = {1, 2, 3, 4, 5};\n        \n        System.out.println("----------使用 for 循环------------");\n        for(int i=0; i<arr.length; i++)\n        {\n            System.out.println(arr[i]);\n        }\n        \n        System.out.println("---------使用 For-Each 循环-------------");\n        \n        //增强的 for 循环 For-Each\n        for(int element:arr)\n        {\n            System.out.println(element);\n        }\n        \n        System.out.println("---------For-Each 循环二维数组-------------");\n        \n        //遍历二维数组\n        int[][] arr2 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} ;\n        for(int[] row : arr2)\n        {\n            for(int element : row)\n            {\n                System.out.println(element);\n            }\n        }\n        \n        //以三种方式遍历集合 List\n        List<String> list = new ArrayList<String>();\n        \n        list.add("Google");\n        list.add("Runoob");\n        list.add("Taobao");\n        \n        System.out.println("----------方式1：普通for循环-----------");\n        for(int i = 0; i < list.size(); i++)\n        {\n            System.out.println(list.get(i));\n        }\n        \n        System.out.println("----------方式2：使用迭代器-----------");\n        for(Iterator<String> iter = list.iterator(); iter.hasNext();)\n        {\n            System.out.println(iter.next());\n        }\n        \n        System.out.println("----------方式3：For-Each 循环-----------");\n        for(String str: list)\n        {\n            System.out.println(str);\n        }\n    }\n}\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);