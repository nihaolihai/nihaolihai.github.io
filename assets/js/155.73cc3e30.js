(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{643:function(t,s,n){"use strict";n.r(s);var a=n(6),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"java-object-getclass-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-object-getclass-方法"}},[t._v("#")]),t._v(" Java Object getClass() 方法")]),t._v(" "),n("p",[t._v("Object getClass() 方法用于获取对象的运行时对象的类。")]),t._v(" "),n("p",[t._v("语法\nobject.getClass()\n参数\n无 。")]),t._v(" "),n("p",[t._v("返回值\n返回对象的类。")]),t._v(" "),n("p",[t._v("实例\n以下实例演示了 getClass() 方法的使用，String 和 ArrayList 继承了 Object，所以可以直接使用 getClass() 方法：")]),t._v(" "),n("p",[t._v("实例\nimport java.util.ArrayList;")]),t._v(" "),n("p",[t._v("class RunoobTest {\npublic static void main(String[] args) {")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('// getClass() with Object\nObject obj1 = new Object();\nSystem.out.println("obj1 的类为: " + obj1.getClass());\n\n// getClass() with String\nString obj2 = new String();\nSystem.out.println("obj2 的类为: " + obj2.getClass());\n\n// getClass() with ArrayList\nArrayList<Integer> obj3 = new ArrayList<>();\nSystem.out.println("obj3 的类为: " + obj3.getClass());\n}\n')])])]),n("p",[t._v("}\n以上程序执行结果为：")]),t._v(" "),n("p",[t._v("obj1 的类为: class java.lang.Object\nobj2 的类为: class java.lang.String\nobj3 的类为: class java.util.ArrayList\n自定义类调用 getClass() 方法：")]),t._v(" "),n("p",[t._v("实例\nclass RunoobTest {\npublic static void main(String[] args) {")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    // 创建 RunoobTest 类的对象\n    RunoobTest obj = new RunoobTest();\n    \n    // RunoobTest 继承 Object 类，Object 是所有类的超类\n    // 调用 getClass() 方法\n    System.out.println(obj.getClass());\n}\n")])])]),n("p",[t._v("}")])])}),[],!1,null,null,null);s.default=e.exports}}]);