(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{683:function(n,e,r){"use strict";r.r(e);var t=r(6),s=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"maven搭建ssm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven搭建ssm"}},[this._v("#")]),this._v(" Maven搭建SSM")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('前面介绍了基于 Maven 使用 Struts+Spring+Hibernate（SSH）框架，模仿企业级应用的开发过程，实现了用户的 CRUD 功能。接下来再使用 SpringMVC+Spring+MyBatis（SSM）框架，同样模仿企业级应用的开发过程，实现用户的 CRUD 功能。\n\n目的很明确，让用户能直接基于 SSH 和 SSM 两个流行框架进行项目开发，减少学习到使用之间的转换过程。\n创建公共 POM\n为了使公司项目有正常的沉淀和重用，先创建基于 SSM 框架开发的公共 POM 构件，以免以后项目和开发人员的重复搭建。\n\n基于 SSM 框架，用户可以独立搭建 SpringMVC、Spring 和 MyBatis 三个基本的 POM 构件。其中，Spring 的 POM 在前面的样例中已经搭建好了，叫 SpringPOM 构件。本节主要介绍 SpringMVC 和 MyBatis 构件 POM。\n1. SpringMVC POM\n因为 SpringMVC 同 Spring 已经在 SpringPOM 配置好了，现在只需继承 SpringPOM。\n\n另外，SpringMVC 封装的是 Web 层应用，底层使用的是 Jsp/Servlet 技术，所以在 SpringMVC POM 中需要加入 Jsp/Servlet 相关的依赖。\n\n因为在用户 CRUD 样例中需要有 JSON 的响应，而且 JSON 的请求和响应在实际项目中也很普通，所以在 SpringMVC POM 中也添加了 JSON 的相关依赖。\n\npom.xml 的详细内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.pom</groupId>\n    <artifactId>SpringPOM</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>SpringPOM</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        \x3c!-- 3.2.16.RELEASE,3.1.4.RELEASE --\x3e\n        <project.build.spring.version>4.2.7.RELEASE\n        </project.build.spring.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n        \x3c!-- spring --\x3e\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        \x3c!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --\x3e\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aspects</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>5.0.0.Final</version>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n2. MyBatis POM\n考虑到 MyBatis 最终要同 Spring 集成，并且是基于 MySQL 数据库。在 MyBatis 的 POM 中需要定义如下关键的依赖。\nMyBatis 构件。\nMyBatis 同 Spring 集成的构件。\n连接池构件。\nMySQL 数据库驱动构件。\n\nMyBatis4MySQLPOM 的 pom.xml 详细内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.pom</groupId>\n    <artifactId>MyBatis4MySQLPOM</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>MyBatis4MySQLPOM</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        \x3c!-- 3.6.5.Final,3.3.2.GA --\x3e\n        <project.build.mybatis.version>3.4.0</project.build.mybatis.version>\n    </properties>\n    <dependencies>\n        \x3c!-- MyBatis --\x3e\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>${project.build.mybatis.version}</version>\n        </dependency>\n        \x3c!-- MyBatis同Spring的集成构件 --\x3e\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>1.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.generator</groupId>\n            <artifactId>mybatis-generator-core</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n        \x3c!-- Datasource连接池 --\x3e\n        <dependency>\n            <groupId>commons-dbcp</groupId>\n            <artifactId>commons-dbcp</artifactId>\n            <version>1.4</version>\n        </dependency>\n        \x3c!-- MySQL数据库驱动 --\x3e\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.34</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n实现MyBatis DAO模块\n因为它同 SSH 框架实现的用户 CRUD 功能一样，所以在 SSM 中，DAO 层的接口同 SSH 中的 DAO 层接口是一样的，这里就不再重新定义了，直接重用前面样例中创建的 MvnSSHDemo.DAO 构件。这里直接创建 MyBatis 的 DAO 实现部分工程，对 DAO 层接口基于 MyBatis 进行实现。\n1. 创建 MvnSSMDemo.DAO.MyBatis 工程\nMvnSSMDemo.DAO.MyBatis 的工程中，只需创建 Maven 的普通 Java 工程就行。\n2. 编写 pom.xml\nMvnSSMDemo.DAO.MyBatis 是基于 MyBatis 实现的，所以 pom 先继承 MyBatis4MySQLPOM，然后考虑到同 Spring 集成，并且实现的是 MvnSSHDemo.DAO 中定义的接口，所以需要添加 SpringPOM 和 MvnSSHDemo.DAO 的构件依赖。\n\n注意，因为 SpringPOM 是 pom 构件，所以在应用它的依赖的时候，需要指定 type 为 pom，详细情况查看 pom.xml。\n\npom.xml 内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>cn.com.mvn.pom</groupId>\n        <artifactId>MyBatis4MySQLPOM</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>cn.com.mvn.ssm.demo</groupId>\n    <artifactId>MvnSSMDemo.DAO.MyBatis</artifactId>\n    <packaging>jar</packaging>\n    <name>MvnSSMDemo.DAO.MyBatis</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        \x3c!--SpringPOM构件依赖 --\x3e\n        <dependency>\n            <groupId>cn.com.mvn.pom</groupId>\n            <artifactId>SpringPOM</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n            <type>pom</type>\n        </dependency>\n        \x3c!--DAO接口依赖 --\x3e\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.DAO</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n3. 编写实现代码\n基于 MyBatis 实现的 DAO 持久层，需要写以下代码。\n\nMyBatisConfiguration.java，配置 MyBatis 的基本信息，包括数据库连接信息。\npackage cn.com.mvn.ssm.demo.dao.mybatis;\nimport java.io.IOException;\nimport java.util.Properties;\nimport javax.sql.DataSource;\nimport org.apache.commons.dbcp.BasicDataSource;\nimport org.apache.ibatis.io.Resources;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.mapper.MapperScannerConfigurer;\nimport org.springframework.beans.factory.annotation.Autowire;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.core.io.support.ResourcePatternResolver;\n@Configuration // 允许注解\n@ComponentScan(basePackages = { "cn.com.mvn" }) // 注解类的基本包\npublic class MyBatisConfiguration {\n    // 将方法结果按Bean管理，别的地方可以按类型进行装配\n    @Bean(autowire = Autowire.BY_TYPE)\n    public DataSource dataSource() {\n        // 创建数据源\n        BasicDataSource dataSource = new BasicDataSource();\n        Properties prop = null;\n        try {\n            // 读资源文件中的数据库连接信息\n            prop = Resources.getResourceAsProperties("db.properties");\n            String driverClass = prop.getProperty("jdbc.driverClassName");\n            String jdbcUrl = prop.getProperty("jdbc.url");\n            String uname = prop.getProperty("jdbc.username");\n            String password = prop.getProperty("jdbc.password");\n            dataSource.setDriverClassName(driverClass);\n            dataSource.setUrl(jdbcUrl);\n            dataSource.setUsername(uname);\n            dataSource.setPassword(password);\n            dataSource.setRemoveAbandonedTimeout(60);\n            dataSource.setRemoveAbandoned(true);\n            dataSource.setLogAbandoned(false);\n            dataSource.setMinIdle(10);\n            dataSource.setMinEvictableIdleTimeMillis(30000);\n            dataSource.setMaxWait(10);\n            dataSource.setInitialSize(2);\n            dataSource.setMaxActive(10);\n            dataSource.setTimeBetweenEvictionRunsMillis(30000);\n            dataSource.setValidationQuery("SELECT 1");\n            dataSource.setTestOnReturn(false);\n            dataSource.setTestOnBorrow(true);\n            dataSource.setTestWhileIdle(true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return dataSource;\n    }\n    // 将返回结果对象定义成一个name为sqlSessionFactory的bean\n    @Bean(name = "sqlSessionFactory")\n    public SqlSessionFactoryBean getSqlSesssionFactoryBean() {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource());\n        /*\n         * ClassPathResource re = new ClassPathResource("myBatisConfig.xml");\n         * bean.setConfigLocation(re);\n         */\n        ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n        Resource[] resources;\n        try {\n            // 设置MyBatis视图映射文件的路径\n            resources = resolver.getResources("classpath:cn/com/mvn/ssm/demo/dao/mybatis/entity/*Mapper.xml");\n            bean.setMapperLocations(resources);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return bean;\n    }\n    // 创建Mapper和接口的绑定配置器Bean，名称为mapper\n    @Bean(name = "mapper", autowire = Autowire.BY_NAME)\n    public MapperScannerConfigurer getMapperScannerConfigurer() {\n        MapperScannerConfigurer conf = new MapperScannerConfigurer();\n        // 设置要绑定的接口基本包路径\n        conf.setBasePackage("cn.com.mvn.ssm.demo.dao.mybatis.impl");\n        // 设置连接数据库的sqlSessionFactory\n        conf.setSqlSessionFactoryBeanName("sqlSessionFactory");\n        return conf;\n    }\n}\nIMvnDAO4MyBatis.java，继承前面定义的 DAO 接口，完成 MyBatis 接口定义。\npackage cn.com.mvn.ssm.demo.dao.mybatis.impl;\nimport cn.com.mvnb.ssh.demo.dao.IMvnUserDAO;\npublic interface IMvnUserDAO4MyBatis extends IMvnUserDAO {\n}\nMvnUserMapper.xml，MvnUser 实体的映射文件。\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper\n    namespace="cn.com.mvn.ssm.demo.dao.mybatis.impl.IMvnUserDAO4MyBatis">\n    <resultMap type="cn.com.mvn.ssh.demo.entity.MvnUser"\n        id="UserMap">\n        <id column="ur_id" property="urId" />\n        <result column="ur_user_name" property="urUserName" />\n        <result column="ur_password" property="urPassword" />\n        <result column="ur_age" property="urAge" />\n        <result column="ur_status" property="urStatus" />\n    </resultMap>\n    <insert id="addUser" useGeneratedKeys="true" keyProperty="urId"\n        parameterType="cn.com.mvn.ssh.demo.entity.MvnUser">\n        insert into mvn_user\n        (ur_user_name,ur_password,ur_age,ur_status)\n        values\n        (#{urUserName},#{urPassword},#{urAge},#{urStatus})\n    </insert>\n    <update id="update"\n        parameterType="cn.com.mvn.ssh.demo.entity.MvnUser">\n        update mvn_user set\n        ur_age=#{urAge},ur_status=#{urStatus} where\n        ur_id=#{urId}\n    </update>\n    <delete id="deleteUser"\n        parameterType="cn.com.mvn.ssh.demo.entity.MvnUser">\n        delete from mvn_user where ur_id=#{urId}\n    </delete>\n    <select id="findUserById" resultMap="UserMap"\n        parameterType="int">\n        select * from mvn_user where ur_id=#{id}\n    </select>\n    <select id="findUserByUserName" resultMap="UserMap"\n        parameterType="java.lang.String">\n        select * from mvn_user where ur_user_name=#{userName}\n    </select>\n    <select id="findUsers" resultMap="UserMap">\n        select * from mvn_user order by ur_id\n    </select>\n</mapper>\ndb.properties，数据库连接信息配置文件。\njdbc.username=root\njdbc.password=root\njdbc.url=jdbc:mysql://localhost:3306/mvn_db\njdbc.driverClassName=com.mysql.jdbc.Driver\n\n4. 编写测试代码\n测试代码是 TestMvnUserDAOImp.java 类，里面基于 JUnit 对 DAO 接口中的每个方法做了测试。\n\n为了完成它，同时避免 MyBatisDAO 集成到系统项目中的改动，添加了一个供 MvnUserDAOImpl 测试的服务类。里面不加业务逻辑，直接调用 DAO 接口中的方法，只是在类上面添加了事务管理。所以测试代码主要有以下几个部分。\n\n1）IMvnUserService.java，临时测试用的服务层接口。\npackage cn.com.mvn.ssm.demo.mybatis.service;\nimport java.util.List;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\npublic interface IMvnUserService {\n    /**\n     * 在数据库中，添加一个新的MvnUser对象\n     *\n     * @param user 需要添加的用户实体对象，该对象需要有用户名、密码、年龄和状态属性\n     *\n     * @return void\n     * @throws RuntimeException 添加失败或出现其它意外\n     */\n    public void addUser(MvnUser user);\n    /**\n     * 更新MvnUser对象。该对象中需要设置年龄、状态和id属性，属性和状态是要更新的新值，id为条件\n     *\n     * @param user 需要更新的MvnUser对象\n     *\n     * @return void\n     * @throws RuntimeException 更新失败或出现其它意外\n     */\n    public void update(MvnUser user);\n    /**\n     * 删除MvnUser对象，该对象中需要有要删除对象的id属性，id属性为删除条件\n     *\n     * @param user 要删除的MvnUser对象\n     *\n     * @return void\n     * @throws RuntimeException 删除失败或出现其它意外\n     */\n    public void deleteUser(MvnUser user);\n    /**\n     * 根据id查询对应的MvnUser对象\n     *\n     * @param id 要查询的MvnUser对象的id\n     * @return MvnUser id对应的MvnUser对象，如果没有对象，返回null\n     * @throws RuntimeException 出现意外情况\n     */\n    public MvnUser findUserById(int id);\n    /**\n     * 根据用户名查询对应的MvnUser对象\n     *\n     * @param userName 要查询的MvnUser对象的用户名\n     * @return MvnUser 用户对应的MvnUser对象，如果没有对象，返回null\n     * @throws RuntimeException 出现意外情况\n     */\n    public MvnUser findUserByUserName(String userName);\n    /**\n     * 查找数据库中所有的用户对象，以List集合的形式返回\n     *\n     * @return List<MvnUser> 所有用户对象的集合\n     * @throws RuntimeException 出现意外情况\n     */\n    public List<MvnUser> findUsers();\n}\n2）MvnUserServiceImpl.java，临时测试的服务层实现类。\npackage cn.com.mvn.ssm.demo.mybatis.service.impl;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport cn.com.mvn.ssh.demo.dao.IMvnUserDAO;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssm.demo.mybatis.service.IMvnUserService;\n@Service("userService")\n@Transactional\npublic class MvnUserServiceImpl implements IMvnUserService {\n    @Autowired\n    private IMvnUserDAO userDAO;\n    public void addUser(MvnUser user) {\n        this.userDAO.addUser(user);\n    }\n    public void update(MvnUser user) {\n        this.userDAO.update(user);\n    }\n    public void deleteUser(MvnUser user) {\n        this.userDAO.deleteUser(user);\n    }\n    public MvnUser findUserById(int id) {\n        return this.userDAO.findUserById(id);\n    }\n    public MvnUser findUserByUserName(String userName) {\n        return this.userDAO.findUserByUserName(userName);\n    }\n    public List<MvnUser> findUsers() {\n        return this.userDAO.findUsers();\n    }\n}\n3）TestMvnUserDAOImpl.java，基于 JUnit 的单元测试类。\npackage cn.com.mvn.ssm.demo.dao.mybatis.impl;\nimport java.util.List;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.entity.Status;\nimport cn.com.mvn.ssm.demo.mybatis.service.IMvnUserService;\nimport junit.framework.Assert;\npublic class TestMvnUserDAOImpl {\n    private ApplicationContext ctx;\n    private IMvnUserService userService;\n    @Before\n    public void init() {\n        this.ctx = new ClassPathXmlApplicationContext("applicationContext.xml");\n        this.userService = (IMvnUserService) ctx.getBean("userService");\n    }\n    @Test\n    public void testAddUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("myBatisUserName");\n        this.userService.addUser(user);\n        user = this.userService.findUserByUserName("myBatisUserName");\n        Assert.assertTrue(user != null && user.getUrAge() == 11);\n        this.userService.deleteUser(user);\n    }\n    @Test\n    public void testDeleteUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("myBatisUserName");\n        this.userService.addUser(user);\n        user = this.userService.findUserByUserName("myBatisUserName");\n        this.userService.deleteUser(user);\n        MvnUser u = this.userService.findUserByUserName("myBatisUserName");\n        Assert.assertTrue(user != null && u == null);\n    }\n    @Test\n    public void testFindUserById() {\n        MvnUser user = this.userService.findUserById(1);\n        Assert.assertEquals(user.getUrUserName(), "zhangsan");\n    }\n    @Test\n    public void testFindByUserName() {\n        MvnUser user = this.userService.findUserByUserName("zhangsan");\n        Assert.assertEquals("123", user.getUrPassword());\n    }\n    @Test\n    public void testFindUsers() {\n        List<MvnUser> userList = this.userService.findUsers();\n        Assert.assertTrue(userList.size() > 0);\n    }\n    @After\n    public void destory() {\n        this.userService = null;\n        this.ctx = null;\n    }\n}\n4）applicationContext.xml，测试的时候，Spring 的配置文件。\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-4.0.xsd">\n    <context:component-scan base-package="cn.com.mvn" />\n</beans>\n5. 测试、安装和发布\n同前面的类似。\n实现 Spring 的 Service 层模块\nSSM 中的 Service 层实现同 SSH 框架中的 Service 层实现一样。唯一不同的是 DAO 的注入只能用 @Autowired 根据类型注入，不能用 @Qualifier 根据名称注入。\n\n因为前面 MyBatis DAO 的实现使用的是 MyBatis3 的新特征：接口和映射文件自动绑定，没有自己独立实现 DAO 类，更没有在 Spring 容器中配置 DAO Bean、指定 Bean 的名称。\n\nMvnSSMDemo.Service.Impl 工程的实现步骤如下。\n1. 创建 MvnSSMDemo.Service.Impl 工程\n只需创建 Maven 的简单 Java 工程。\n2. 编写 pom.xml 骨架文件\npom 内容主要体现在以下几个方面。\n继承 SpringPOM 公共构件，避免重复配置对 Spring 相关构件的依赖。\n添加 MvnSSHDemo.DAO 接口依赖和 MvnSSHDemo.Service 接口依赖。\n为了方便测试，添加 MvnSSMDemo.DAO.MyBatis 依赖，scope 范围是 test。\n\npom.xml 的代码如下所示：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>cn.com.mvn.pom</groupId>\n        <artifactId>SpringPOM</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>cn.com.mvn.ssm.demo</groupId>\n    <artifactId>MvnSSMDemo.Service.Impl</artifactId>\n    <packaging>jar</packaging>\n    <name>MvnSSMDemo.Service.Impl</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.DAO</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.Service</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssm.demo</groupId>\n            <artifactId>MvnSSMDemo.DAO.MyBatis</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n3. 编写实现代码\nService 层主要实现用户对象的 CRUD 功能，同 SSH 中的 Service 层的代码类似，唯一不同的是，对 DAO 对象的注入只能用 byType 的自动注入，不能用 byName。Service 层的内容如下。\n\nUserServiceImpl.java，实现用户的 CRUD 功能。\npackage cn.com.mvn.ssh.demo.service.impl;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\nimport cn.com.mvn.ssh.demo.dao.IMvnUserDAO;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.service.IUserService;\n//@Configuration\n@Service("userService") // 注册成服务组件\n@Transactional // 要求启动事务\npublic class UserServiceImpl implements IUserService {\n    @Autowired // 自动根据类型注入\n    // @Qualifier("userDAO") // 根据name注入\n    private IMvnUserDAO userDAO;\n    @Transactional(propagation = Propagation.REQUIRED) // 需要进行事务管理\n    public void createUser(MvnUser user) {\n        // 验证输入的用户是否为null\n        if (user == null) {\n            throw new RuntimeException("创建的user不能为null");\n        }\n        // 验证用户名是否有存在\n        MvnUser u = this.userDAO.findUserByUserName(user.getUrUserName());\n        if (u != null) {\n            throw new RuntimeException(u.getUrUserName() + " 已经存在");\n        }\n        this.userDAO.addUser(user);\n    }\n    @Transactional(propagation = Propagation.REQUIRED) // 需要进行事务管理\n    public void editUser(int age, String status, int id) {\n        // 根据id找到以前的用户对象\n        MvnUser user = this.userDAO.findUserById(id);\n        // 判断用户是否存在，不存在抛异常，存在就更新\n        if (user == null) {\n            throw new RuntimeException("id为" + id + "用户不存在");\n        } else {\n            user.setUrAge(age);\n            user.setUrStatus(status);\n            this.userDAO.update(user);\n        }\n    }\n    @Transactional(propagation = Propagation.REQUIRED) // 需要进行事务管理\n    public void deleteUser(int id) {\n        // 根据id找到以前的用户对象\n        MvnUser user = this.userDAO.findUserById(id);\n        // 判断用户是否存在，不存在抛异常，存在就删除\n        if (user == null) {\n            throw new RuntimeException("id为" + id + "用户不存在");\n        } else {\n            this.userDAO.deleteUser(user);\n        }\n    }\n    @Transactional(readOnly = true) // 只读，不需要进行事务管理\n    public MvnUser searchUser(int id) {\n        MvnUser user = null;\n        user = this.userDAO.findUserById(id);\n        return user;\n    }\n    @Transactional(readOnly = true) // 只读，不需要进行事务管理\n    public MvnUser searchUser(String userName) {\n        MvnUser user = null;\n        user = this.userDAO.findUserByUserName(userName);\n        return user;\n    }\n    @Transactional(readOnly = true) // 只读，不需要进行事务管理\n    public List<MvnUser> searchUsers() {\n        List<MvnUser> userList = null;\n        userList = this.userDAO.findUsers();\n        return userList;\n    }\n}\n4. 编写测试代码\nMvnSSMDemo.Service.Impl 的测试代码有两个。\n1）TestUserServiceImpl.java\n实现测试 UserServiceImpl.java 的 JUnit 代码，内容如下所示：\npackage cn.com.mvn.ssh.demo.service.impl;\nimport java.util.List;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.entity.Status;\nimport cn.com.mvn.ssh.demo.service.IUserService;\nimport junit.framework.Assert;\npublic class TestUserServiceImpl {\n    private IUserService userService;\n    private ApplicationContext ctx = null;\n    @Before\n    public void init() {\n        this.ctx = new ClassPathXmlApplicationContext("applicationContext.xml");\n        this.userService = (IUserService) ctx.getBean("userService");\n    }\n    @Test\n    public void testCreateUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("service1");\n        this.userService.createUser(user);\n        MvnUser u = this.userService.searchUser("service1");\n        boolean bool = u != null && u.getUrAge() == 11 && u.getUrStatus().equals(Status.ACTIVE.getStatus());\n        Assert.assertTrue(bool);\n        // 删除用户\n        this.userService.deleteUser(u.getUrId());\n    }\n    @Test\n    public void testEditUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("service1");\n        this.userService.createUser(user);\n        MvnUser u = this.userService.searchUser("service1");\n        this.userService.editUser(88, Status.INACTIVE.getStatus(), u.getUrId());\n        u = this.userService.searchUser("service1");\n        Assert.assertTrue(u.getUrAge() == 88 && u.getUrStatus().equals(Status.INACTIVE.getStatus()));\n        this.userService.deleteUser(u.getUrId());\n    }\n    @Test\n    public void testDeleteUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("service1");\n        this.userService.createUser(user);\n        MvnUser u = this.userService.searchUser("service1");\n        this.userService.deleteUser(u.getUrId());\n        MvnUser u2 = this.userService.searchUser(u.getUrId());\n        Assert.assertTrue(u != null && u2 == null);\n    }\n    @Test\n    public void testSearchUserById() {\n        MvnUser user = this.userService.searchUser(1);\n        Assert.assertNotNull(user);\n    }\n    @Test\n    public void testSearchUserByUserName() {\n        MvnUser user = this.userService.searchUser("zhangsan");\n        Assert.assertNotNull(user);\n    }\n    @Test\n    public void testSearchUsers() {\n        List<MvnUser> userList = this.userService.searchUsers();\n        Assert.assertTrue(userList != null && userList.size() > 0);\n    }\n    @After\n    public void destory() {\n        this.userService = null;\n        this.ctx = null;\n    }\n}\n2）applicationContext.xml\n测试时要初始化 Spring 容器。因为只在测试起作用，所以该文件要同前面的 TestUserServiceImpl.java 代码一样，放在 src/test 的对应子目录下，代码如下所示：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-4.0.xsd">\n    <context:component-scan base-package="cn.com.mvn" />\n</beans>\n5. 测试安装和发布\n右击“工程”，选择 Run As→Maven test→install→deploy 命令完成测试安装和发布，发布完成后，Archiva 私服上可以看到 MvnSSMDemo.Service.Impl 的构件。\n实现 SpringMVC Web 模块\n用户 CRUD 模块的 SSM Web 层实现，这里采用的是 SpringMVC 4.x 版本，用的是零配置方式实现的。\n\n所以要理解后面的代码实现需要有 SpringMVC 4.x 的开发基础，建议没有接触过的读者先参考 SpringMVC 4.0 注解开发 Web 应用的相关资料。\n\nWeb 层基于框架的开发流程可以抽象成以下几个部分。\n在 web.xml 中配置框架的拦截入口，可能是过滤器，也可能是 servlet。\n开发显示层代码一般是 jsp 页面。\n开发控制层代码，实现接收请求数据，调用 service 处理请求数据，返回结果 view 层的标记。\n通过配置文件描述框架运行时，对请求的处理代码的对应关系和页面转换流程。\n\n基于 SpringMVC 4.x 用零配置方式开发 Web 层也是同样的流程。只是因为是零配置方式，也就看不到配置文件相关的代码，但是以前配置文件描述的信息肯定还是要描述的，只是用注解或其他方式体现。\n\n对 SpringMVC Web 的实现思路有了基本了解后，接下来就开始实现 SSMDemo 的 Web 层功能。\n1. 创建 Maven 的 Web 工程\n前面大部分工程都是基于 Maven 的普通 Java 工程。这里要基于创建 Web 应用的插件创建 Web 工程，详细过程如下。\n\n单击 Maven 中的创建 Maven Project 的选项，如图 1 所示。\n\n创建Maven Project\n图 1  创建 Maven Project\n\n单击 Next 按钮，进入 Archetype 的选择界面，选择 webapp-javaee6 插件，如图 2 所示。\n\n选择webapp-jee5\n图 2  选择webapp-javaee6\n\n单击 Next 按钮，进入类似如图 3 所示的界面，在界面中输入工程的 Group Id、Artifact Id、Package，选择一个 Version 版本。\n\n输入项目坐标\n图 3  输入项目坐标\n\n单击 Finish 按钮，创建 Web 工程，项目就创建好了。\n2. 编写和完善 pom.xml\n用户 CRUD 的模块实现，需要有 Spring 和 Spring web，Spring webmvc 的相关 jar 包，同时还需要在前面阶段开发的 MvnSSHDAO.DAO 和 MvnSSHService.Service 定义的接口上进行开发，MvnSSMDAO.MyBatis 和 MvnSSMService.Service.Impl 的实现基础上进行测试。\n\n所以 pom.xml 中主要体现在对 SpringPOM 父 pom 构件的继承和对后面四个构件的依赖。\n\n另外，为了发布到 Web 服务器上运行，需要配置 cargo-maven2-plugin 插件。\n\npom.xml 详细内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>cn.com.mvn.pom</groupId>\n        <artifactId>SpringMVCPOM</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>cn.com.mvn.ssm.demo</groupId>\n    <artifactId>MvnSSMDemo.SpringMVC</artifactId>\n    <packaging>war</packaging>\n    <name>MvnSSMDemo.SpringMVC</name>\n    <url>http://maven.apache.org</url>\n    <dependencies>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.Service</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        \x3c!-- 接口和实现 --\x3e\n        <dependency>\n            <groupId>cn.com.mvn.ssm.demo</groupId>\n            <artifactId>MvnSSMDemo.Service.Impl</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssm.demo</groupId>\n            <artifactId>MvnSSMDemo.DAO.MyBatis</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.DAO</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            \x3c!-- Cargo插件 --\x3e\n            <plugin>\n                \x3c!-- 指定插件名称及版本号 --\x3e\n                <groupId>org.codehaus.cargo</groupId>\n                <artifactId>cargo-maven2-plugin</artifactId>\n                <version>1.4.8</version>\n                <configuration>\n                    <wait>true</wait>       \x3c!--是否说明，操作start、stop等后续操作必须等前面操作完成才能继续 --\x3e\n                    <container>               \x3c!-- 容器的配置 --\x3e\n                        <containerId>tomcat7x</containerId>                     \x3c!-- 指定tomcat版本 --\x3e\n                        <type>installed</type>                                  \x3c!-- 指定类型：standalone, installed等 --\x3e\n                        <home>C:\\java\\servers\\apache-tomcat-7.0.69_64</home>    \x3c!-- 指定Tomcat的位置，即catalina.home --\x3e\n                    </container>\n                    <configuration>           \x3c!-- 具体的配置 --\x3e\n                        <type>existing</type>                                   \x3c!-- 类型，existing:存在 --\x3e\n                        <home>C:\\java\\servers\\apache-tomcat-7.0.69_64</home>    \x3c!-- Tomcat的位置，即catalina.home --\x3e\n                    </configuration>\n                    <deployables>                                 \x3c!-- 部署设置 --\x3e\n                        <deployable>                              \x3c!-- 部署的War包名等 --\x3e\n                            <groupId>cn.com.mvn.ssm.demo</groupId>\n                            <artifactId>MvnSSMDemo.SpringMVC</artifactId>\n                            <type>war</type>\n                            <properties>\n                                <context>MvnSSMDemo</context>   \x3c!-- 部署路径 --\x3e\n                            </properties>\n                        </deployable>\n                    </deployables>\n                    <deployer>                                            \x3c!-- 部署配置 --\x3e\n                        <type>installed</type>                          \x3c!-- 类型 --\x3e\n                    </deployer>\n                </configuration>\n                <executions>\n                    \x3c!-- 执行的动作 --\x3e\n                    <execution>\n                        <id>verify-deployer</id>\n                        <phase>install</phase>      \x3c!-- 解析install --\x3e\n                        <goals>\n                            <goal>deployer-deploy</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>clean-deployer</id>\n                        <phase>clean</phase>\n                        <goals>\n                            <goal>deployer-undeploy</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n3. 编写实现代码\nSpringMVC Web 的代码列表和对应的作用描述如下。\n\n1）SpringMVCIntializer.java。在 Web 容器中初始化 DispatcherServlet。Web 服务器启动时会自己调用初始化，代替以前在 web.xml 中配置 DispatcherServlet 的 servlet 和 servlet-mapping。\npackage cn.com.mvn.ssm.demo.web.configuration;\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n//继承初始化父类，让web服务器能自动识别，初始化SpringMVC Servlet入口组件\n//代替在web.xml中配置org.springframework.web.servlet.DispatcherServlet\npublic class SpringMVCInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        // 加载SpringMVC的基本配置类\n        return new Class[] { SpringMVCConfiguration.class };\n    }\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return null;\n    }\n    @Override\n    protected String[] getServletMappings() {\n        // 指定SpringMVC的mapping url-pattern\n        return new String[] { "/" };\n    }\n}\n2）SpringMVCConfiguration.java。完成 SpringMVC 框架运行的基本信息配置，包括视图转换器、类型转换器、多国语言的资源文件、请求路径匹配和不被 SpringMVC 框架拦截的请求等。\npackage cn.com.mvn.ssm.demo.web.configuration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.PathMatchConfigurer;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.springframework.web.servlet.view.JstlView;\n@Configuration\n@EnableWebMvc // 支持SpringMVC\n@ComponentScan(basePackages = "cn.com.mvn") // SpringMVC自动扫描组件类的基本包\npublic class SpringMVCConfiguration extends WebMvcConfigurerAdapter {\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        // 注册视图转换器\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n        viewResolver.setViewClass(JstlView.class);\n        viewResolver.setPrefix("/");\n        viewResolver.setSuffix(".jsp");\n        registry.viewResolver(viewResolver);\n    }\n    /*\n     * Configure ResourceHandlers to serve static resources like CSS/ Javascript\n     * etc...\n     *\n     */\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        // 设置不需要经过SpringMVC框架过滤的资源，比如js css 和 images等\n        registry.addResourceHandler("/static/**").addResourceLocations("/static/");\n        registry.addResourceHandler("/js/**").addResourceLocations("/js/");\n    }\n    /*\n     * Configure Converter to be used. In our example, we need a converter to\n     * convert string values[Roles] to UserProfiles in newUser.jsp\n     */\n    @Override\n    public void addFormatters(FormatterRegistry registry) {\n        // registry.addConverter(roleToUserProfileConverter);\n    }\n    /**\n     * Configure MessageSource to lookup any validation/error message in\n     * internationalized property files\n     */\n    @Bean\n    public MessageSource messageSource() {\n        // 添加资源文件（多国语言）\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n        messageSource.setBasename("messages");\n        return messageSource;\n    }\n    /**\n     * Optional. It\'s only required when handling \'.\' in @PathVariables which\n     * otherwise ignore everything after last \'.\' in @PathVaidables argument. It\'s a\n     * known bug in Spring [https://jira.spring.io/browse/SPR-6164], still present\n     * in Spring 4.1.7. This is a workaround for this issue.\n     */\n    @Override\n    public void configurePathMatch(PathMatchConfigurer matcher) {\n        matcher.setUseRegisteredSuffixPatternMatch(true);\n    }\n}\n3）Message.java。定义 VO 类，封装页面提示信息，主要是 id 和 message。\npackage cn.com.mvn.ssm.demo.web.vo;\npublic class Message {\n    private String code;\n    private String message;\n    public Message(String message) {\n        super();\n        this.message = message;\n    }\n    public String getCode() {\n        return code;\n    }\n    public void setCode(String code) {\n        this.code = code;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public void setMessage(String message) {\n        this.message = message;\n    }\n}\n4）UserController.java。实现用户 CRUD 的所有控制逻辑代码，包括请求映射注解的描述。\npackage cn.com.mvn.ssm.demo.web.controller;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.ModelAndView;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.service.IUserService;\nimport cn.com.mvn.ssm.demo.web.vo.Message;\n@Controller("userController")\n@RequestMapping("/user")\npublic class UserController {\n    @Autowired\n    @Qualifier("userService")\n    private IUserService userService;\n    @RequestMapping("/add")\n    @ResponseBody\n    public Message addUser(MvnUser user) {\n        Message msg = new Message("添加成功");\n        try {\n            this.userService.createUser(user);\n        } catch (Exception e) {\n            e.printStackTrace();\n            msg.setMessage("添加失败:" + e.getMessage());\n        }\n        return msg;\n    }\n    @RequestMapping("/delete")\n    @ResponseBody\n    public Message deleteUser(int id) {\n        Message msg = new Message("删除成功");\n        try {\n            this.userService.deleteUser(id);\n        } catch (Exception e) {\n            e.printStackTrace();\n            msg.setMessage("删除失败:" + e.getMessage());\n        }\n        return msg;\n    }\n    @RequestMapping("/edit")\n    @ResponseBody\n    public Message editUser(@RequestParam("status") String status, @RequestParam("age") int age,\n            @RequestParam("id") int id) {\n        Message msg = new Message("修改成功");\n        try {\n            this.userService.editUser(age, status, id);\n        } catch (Exception e) {\n            e.printStackTrace();\n            msg.setMessage("修改失败:" + e.getMessage());\n        }\n        return msg;\n    }\n    @RequestMapping("/searchUser")\n    @ResponseBody\n    public MvnUser searchUser(@RequestParam("id") int id) {\n        MvnUser user = this.userService.searchUser(id);\n        return user;\n    }\n    @RequestMapping("/searchUsers")\n    public ModelAndView searchUsers() {\n        ModelAndView mv = new ModelAndView();\n        mv.setViewName("userList");\n        mv.addObject("userList", this.userService.searchUsers());\n        return mv;\n    }\n}\n5）index.jsp。CRUD 的框架页面，里面包含 CRUD 的操作按钮和内嵌用户列表的 Div，还有每个操作对应的 JS 代码。\n<%@page contentType="text/html" pageEncoding="UTF-8"%>\n<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n<title>测试用户CRUD操作</title>\n<script type="text/javascript" src="js/jquery-3.2.1.min.js"><\/script>\n<script type="text/javascript">\n    $(document).ready(function() {\n        // 页面加载完后，自动发searchUsersServlet请求，加载到userListDiv中显示\n        $("#userListDiv").load("user/searchUsers");\n    });\n    // 新增 按钮事件触发函数\n    function toAdd() {\n        // 获取addForm中的请求信息\n        var _data = $("#addForm").serialize();\n        //alert(_data);\n        // 发添加新用户的Ajax请求\n        $.ajax({\n            type : \'post\',\n            url : \'user/add\',\n            data : _data,\n            dataType : \'json\', // 指定返回数据的格式：json\n            success : function(msg) {\n                alert(msg.message);\n                // 更新最新的用户列表信息\n                $("#userListDiv").load("user/searchUsers");\n            }\n        });\n    }\n    function toEdit() {\n        var _data = $("#editForm").serialize();\n        alert(_data);\n        $.ajax({\n            type : \'post\',\n            url : \'user/edit\',\n            data : _data,\n            dataType : \'json\',\n            success : function(msg) {\n                alert(msg.message);\n                $("#userListDiv").load("user/searchUsers");\n            }\n        });\n    }\n    function toDelete() {\n        var chks = $("input[name=\'checkbox\']:checked");\n        if (chks.length == 0) {\n            alert("请选择要删除的用户");\n        } else if (chks.length > 1) {\n            alert("一次只能删除一个用户");\n        } else {\n            var to = confirm("您确定要删除选中的用户?");\n            if (to) {\n                var _data = "id=" + chks.val();\n                $.ajax({\n                    type : \'post\',\n                    data : _data,\n                    url : \'user/delete\',\n                    dataType : \'json\',\n                    success : function(msg) {\n                        alert(msg);\n                        $("#userListDiv").load("user/searchUsers");\n                    }\n                });\n            }\n        }\n    }\n    function toShowAdd() {\n        $("#LayerAdd").show(1000);\n    }\n    function toShowEdit() {\n        //alert($("input[name=\'checkbox\']:checked").length);\n        var chks = $("input[name=\'checkbox\']:checked");\n        if (chks.length == 0) {\n            alert("请选择要编辑的用户");\n        } else if (chks.length > 1) {\n            alert("一次只能修改一个用户");\n        } else {\n            var _data = "id=" + chks.val();\n            $.ajax({\n                type : \'post\',\n                data : _data,\n                url : \'user/searchUser\',\n                dataType : \'json\',\n                //contentType:\'application/json;charset=UTF-8\',\n                success : function(msg) {\n                    $("#editForm #id").val(msg.urId);\n                    $("#editForm #userName").val(msg.urUserName);\n                    $("#editForm #age").val(msg.urAge);\n                    $("#editForm #status").val(msg.urStatus);\n                    //alert($("#editForm #age").val());\n                    $("#LayerEdit").show(1000);\n                }\n            });\n        }\n    }\n    function toCloseAdd() {\n        $("#LayerAdd").hide(1000);\n    }\n    function toCloseEdit() {\n        $("#LayerEdit").hide(1000);\n    }\n<\/script>\n<style type="text/css">\n\x3c!--\n.STYLE2 {\n    color: #000000\n}\n#LayerAdd {\n    position: absolute;\n    left: 113px;\n    top: 183px;\n    width: 434px;\n    height: 193px;\n    z-index: 1;\n    background-color: #99FFFF;\n    display: none;\n}\n#LayerEdit {\n    position: absolute;\n    left: 113px;\n    top: 183px;\n    width: 434px;\n    height: 193px;\n    z-index: 1;\n    background-color: #99FFFF;\n    display: none;\n}\n--\x3e\n</style>\n</head>\n<body>\n    <div id="LayerAdd">\n        <form name="addForm" name="addForm" id="addForm" method="post" action="">\n            <table width="98%" border="0" align="center" cellpadding="0" cellspacing="0">\n                <tr>\n                    <td colspan="2" align="center">\n                        <strong><BR>添加新用户<br></strong>\n                    </td>\n                </tr>\n                <tr>\n                    <td width="47%" align="right">用户名：</td>\n                    <td width="53%">\n                        <input name="urUserName" type="text" id="userName">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">密码：</td>\n                    <td>\n                        <input name="urPassword" type="password" id="password">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">年龄：</td>\n                    <td>\n                        <input name="urAge" type="text" id="age">\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan="2">&nbsp;</td>\n                </tr>\n                <tr>\n                    <td colspan="2" align="center">\n                        <input type="button" name="Submit4" value="添加" onclick="toAdd()">\n                        <input type="button" name="Submit5" value="关闭" onclick="toCloseAdd()">\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div id="LayerEdit">\n        <form name="editForm" id="editForm" method="post" action="">\n            <input type="hidden" name="id" id="id" />\n            <table width="98%" border="0" align="center" cellpadding="0" cellspacing="0">\n                <tr>\n                    <td colspan="2" align="center">\n                        <strong><br>修改用户信息<br> </strong>\n                    </td>\n                </tr>\n                <tr>\n                    <td width="47%" align="right">用户名：</td>\n                    <td width="53%">\n                        <input name="userName" type="text" id="userName" readonly="readonly">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">年龄：</td>\n                    <td>\n                        <input name="age" type="text" id="age">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">状态：</td>\n                    <td>\n                        <select name="status" id="status">\n                            <option value="Active">Active</option>\n                            <option value="Inactive">Inactive</option>\n                            <option value="Locked">Locked</option>\n                            <option value="Deleted">Deleted</option>\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan="2">&nbsp;</td>\n                </tr>\n                <tr>\n                    <td colspan="2" align="center">\n                        <input type="button" name="Submit4" value="修改" onclick="toEdit()">\n                        <input type="button" name="Submit5" value="关闭" onclick="toCloseEdit()">\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <p>&nbsp;</p>\n    <p>测试用户CRUD页面</p>\n    <table width="539" border="1">\n        <tr>\n            <td colspan="5" align="right">\n                <input type="button" name="Submit" value="新增" onclick="toShowAdd()">\n                <input type="submit" name="Submit2" value="修改" onclick="toShowEdit()">\n                <input type="button" name="Submit3" value="删除" onclick="toDelete()">\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div id="userListDiv"></div>\n            </td>\n        </tr>\n    </table>\n    <p>&nbsp;</p>\n</body>\n</html>\n6）userList.jsp。显示用户列表的页面。\n<%@page contentType="text/html" pageEncoding="UTF-8"%>\n<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n<table width="100%" border="1">\n    <tr>\n        <td width="51" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong><span class="STYLE2">选择</span></strong>\n            </div>\n        </td>\n        <td width="111" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>序号</strong>\n            </div>\n        </td>\n        <td width="137" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>用户名</strong>\n            </div>\n        </td>\n        <td width="105" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>年龄</strong>\n            </div>\n        </td>\n        <td width="101" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>状态</strong>\n            </div>\n        </td>\n    </tr>\n    <c:forEach items="${userList }" var="_user" varStatus="status">\n        <c:choose>\n            <c:when test="${status.index%2==0 }">\n                <tr bgcolor="#FFFFFF">\n            </c:when>\n            <c:otherwise>\n                <tr bgcolor="#99FFFF">\n            </c:otherwise>\n        </c:choose>\n        <td>\n            <input type="checkbox" name="checkbox" value="${_user.urId }">\n        </td>\n        <td>${status.index+1 }</td>\n        <td>${_user.urUserName }</td>\n        <td>${_user.urAge }</td>\n        <td>${_user.urStatus }</td>\n        </tr>\n    </c:forEach>\n</table>\n7）Jquery-3.2.1.min.js。jQuery 的 JS，CRUD 操作的时候需要实现逻辑 JS 代码，都是基于它来的。该文件放在 JS 目录下，千万不要遗忘。\n4. 编译、测试、安装、发布和启动服务器\n编译、测试、安装和发布同前面模块项目的操作一样。\n\n具体操作都是：右击“工程”，选择 Run As→Maven test→install→deploy 命令。\n\n发布好后，在 Tomcat 的 webapps 发布目录下会有 MvnSSMDemo.war 文件，启动 Tomcat 就可以自动发布 Web 应用。\n整合成SSM\n前面以分模块的方式实现了每个功能，包括公共 DAO、Service 接口的定义，基于 MyBatis 的 DAO 实现，Service 的独立实现，还有基于 SpringMVC 的 Web 层实现，并且能够集成到 SpringMVC 的 Web 层代码中共同完成测试。\n\n但是为了方便管理，有必要创建一个工程，将前面独立实现的各个模块管理起来。这样每次编译、测试、安装和发布的时候都能基于 Maven 实现自动同步。\n\n整合 SSM 模块的具体步骤如下。\n1. 创建工程\n只需创建一个简单的 Java 工程，按当初的设计输入 groupId 和 artifactId 与版本。这里的 demo 分别是 cn.com.mvn.ssm.demo、MvnSSMDemo 和 0.0.1-SNAPSHOT。\n2. 配置 pom.xml\n打开 pom.xml，在里面添加包含的模块，并且设置 packaging 为 pom。\n\n前面介绍的是基于编辑器直接编写 pom.xml，这里介绍基于 MyEclipse 的图形化界面，基于向导界面修改 pom.xml（添加模块）。\n\n通过单击不同标签选择打开方式，如图 4 所示。\n\npom.xml\n图 4  pom.xml\n\n如果选择的是 pom.xml，显示的是 pom.xml 源文件，可以按以前的方式基于源代码修改 pom.xml。现在选择 Overview 标签，显示界面如图 5 所示。\n\n可视化pom.xml\n图 5  可视化pom.xml\n\n单击 Modules 范围内的 Add… 按钮就可以通过图形界面选择需要添加的模块。保存后就完成了模块的集成。\n3. 编译、测试、安装和发布\n\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);