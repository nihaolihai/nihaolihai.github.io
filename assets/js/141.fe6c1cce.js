(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{634:function(n,l,o){"use strict";o.r(l);var a=o(6),t=Object(a.a)({},(function(){var n=this,l=n.$createElement,o=n._self._c||l;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h2",{attrs:{id:"java-枚举-enum"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#java-枚举-enum"}},[n._v("#")]),n._v(" Java 枚举(enum)")]),n._v(" "),o("p",[n._v("Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。")]),n._v(" "),o("p",[n._v("Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割。")]),n._v(" "),o("p",[n._v("例如定义一个颜色的枚举类。")]),n._v(" "),o("p",[n._v("enum Color\n{\nRED, GREEN, BLUE;\n}\n以上枚举类 Color 颜色常量有 RED, GREEN, BLUE，分别表示红色，绿色，蓝色。")]),n._v(" "),o("p",[n._v("使用实例：")]),n._v(" "),o("p",[n._v("实例\nenum Color\n{\nRED, GREEN, BLUE;\n}")]),n._v(" "),o("p",[n._v("public class Test\n{\n// 执行输出结果\npublic static void main(String[] args)\n{\nColor c1 = Color.RED;\nSystem.out.println(c1);\n}\n}\n执行以上代码输出结果为：")]),n._v(" "),o("p",[n._v("RED\n内部类中使用枚举\n枚举类也可以声明在内部类中：")]),n._v(" "),o("p",[n._v("实例\npublic class Test\n{\nenum Color\n{\nRED, GREEN, BLUE;\n}")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("// 执行输出结果\npublic static void main(String[] args)\n{\n    Color c1 = Color.RED;\n    System.out.println(c1);\n}\n")])])]),o("p",[n._v("}\n执行以上代码输出结果为：")]),n._v(" "),o("p",[n._v("RED\n每个枚举都是通过 Class 在内部实现的，且所有的枚举值都是 public static final 的。")]),n._v(" "),o("p",[n._v("以上的枚举类 Color 转化在内部类实现：")]),n._v(" "),o("p",[n._v("class Color\n{\npublic static final Color RED = new Color();\npublic static final Color BLUE = new Color();\npublic static final Color GREEN = new Color();\n}\n迭代枚举元素\n可以使用 for 语句来迭代枚举元素：")]),n._v(" "),o("p",[n._v("实例\nenum Color\n{\nRED, GREEN, BLUE;\n}\npublic class MyClass {\npublic static void main(String[] args) {\nfor (Color myVar : Color.values()) {\nSystem.out.println(myVar);\n}\n}\n}\n执行以上代码输出结果为：")]),n._v(" "),o("p",[n._v("RED\nGREEN\nBLUE\n在 switch 中使用枚举类\n枚举类常应用于 switch 语句中：")]),n._v(" "),o("p",[n._v("实例\nenum Color\n{\nRED, GREEN, BLUE;\n}\npublic class MyClass {\npublic static void main(String[] args) {\nColor myVar = Color.BLUE;")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('switch(myVar) {\n  case RED:\n    System.out.println("红色");\n    break;\n  case GREEN:\n     System.out.println("绿色");\n    break;\n  case BLUE:\n    System.out.println("蓝色");\n    break;\n}\n')])])]),o("p",[n._v("}\n}\n执行以上代码输出结果为：")]),n._v(" "),o("p",[n._v("蓝色\nvalues(), ordinal() 和 valueOf() 方法\nenum 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Seriablizable 和 java.lang.Comparable 两个接口。")]),n._v(" "),o("p",[n._v("values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：")]),n._v(" "),o("p",[n._v("values() 返回枚举类中所有的值。\nordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。\nvalueOf()方法返回指定字符串值的枚举常量。\n实例\nenum Color\n{\nRED, GREEN, BLUE;\n}")]),n._v(" "),o("p",[n._v("public class Test\n{\npublic static void main(String[] args)\n{\n// 调用 values()\nColor[] arr = Color.values();")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('    // 迭代枚举\n    for (Color col : arr)\n    {\n        // 查看索引\n        System.out.println(col + " at index " + col.ordinal());\n    }\n\n    // 使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException\n    System.out.println(Color.valueOf("RED"));\n    // System.out.println(Color.valueOf("WHITE"));\n}\n')])])]),o("p",[n._v("}\n执行以上代码输出结果为：")]),n._v(" "),o("p",[n._v("RED at index 0\nGREEN at index 1\nBLUE at index 2\nRED\n枚举类成员\n枚举跟普通类一样可以用自己的变量、方法和构造函数，构造函数只能使用 private 访问修饰符，所以外部无法调用。")]),n._v(" "),o("p",[n._v("枚举既可以包含具体方法，也可以包含抽象方法。 如果枚举类具有抽象方法，则枚举类的每个实例都必须实现它。")]),n._v(" "),o("p",[n._v("实例\nenum Color\n{\nRED, GREEN, BLUE;")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('// 构造函数\nprivate Color()\n{\n    System.out.println("Constructor called for : " + this.toString());\n}\n\npublic void colorInfo()\n{\n    System.out.println("Universal Color");\n}\n')])])]),o("p",[n._v("}")]),n._v(" "),o("p",[n._v("public class Test\n{"),o("br"),n._v("\n// 输出\npublic static void main(String[] args)\n{\nColor c1 = Color.RED;\nSystem.out.println(c1);\nc1.colorInfo();\n}\n}\n执行以上代码输出结果为：")]),n._v(" "),o("p",[n._v("Constructor called for : RED\nConstructor called for : GREEN\nConstructor called for : BLUE\nRED\nUniversal Color")]),n._v(" "),o("p",[n._v('enum Color{\nRED{\npublic String getColor(){//枚举对象实现抽象方法\nreturn "红色";\n}\n},\nGREEN{\npublic String getColor(){//枚举对象实现抽象方法\nreturn "绿色";\n}\n},\nBLUE{\npublic String getColor(){//枚举对象实现抽象方法\nreturn "蓝色";\n}\n};\npublic abstract String getColor();//定义抽象方法\n}')]),n._v(" "),o("p",[n._v('public class Test{\npublic static void main(String[] args) {\nfor (Color c:Color.values()){\nSystem.out.print(c.getColor() + "、");\n}\n}\n}')])])}),[],!1,null,null,null);l.default=t.exports}}]);