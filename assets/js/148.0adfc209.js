(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{646:function(a,n,t){"use strict";t.r(n);var e=t(6),s=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"java-hashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-hashmap"}},[a._v("#")]),a._v(" Java HashMap")]),a._v(" "),t("p",[a._v("HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。")]),a._v(" "),t("p",[a._v("HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。")]),a._v(" "),t("p",[a._v("HashMap 是无序的，即不会记录插入的顺序。")]),a._v(" "),t("p",[a._v("HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。")]),a._v(" "),t("p",[a._v("HashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。")]),a._v(" "),t("p",[a._v("HashMap 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。")]),a._v(" "),t("p",[a._v("基本类型对应的包装类表如下：")]),a._v(" "),t("p",[a._v("基本类型\t引用类型\nboolean\tBoolean\nbyte\tByte\nshort\tShort\nint\tInteger\nlong\tLong\nfloat\tFloat\ndouble\tDouble\nchar\tCharacter\nHashMap 类位于 java.util 包中，使用前需要引入它，语法格式如下：")]),a._v(" "),t("p",[a._v("import java.util.HashMap; // 引入 HashMap 类\n以下实例我们创建一个 HashMap 对象 Sites， 整型（Integer）的 key 和字符串（String）类型的 value：")]),a._v(" "),t("p",[a._v("HashMap<Integer, String> Sites = new HashMap<Integer, String>();\n添加元素\nHashMap 类提供类很多有用的方法，添加键值对(key-value)可以使用 put() 方法:")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<Integer, String> Sites = new HashMap<Integer, String>();\n// 添加键值对\nSites.put(1, "Google");\nSites.put(2, "Runoob");\nSites.put(3, "Taobao");\nSites.put(4, "Zhihu");\nSystem.out.println(Sites);\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("{1=Google, 2=Runoob, 3=Taobao, 4=Zhihu}\n以下实例创建一个整型（String）的 key 和 整型（String）的 value：")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<String, String> Sites = new HashMap<String, String>();\n// 添加键值对\nSites.put("one", "Google");\nSites.put("two", "Runoob");\nSites.put("three", "Taobao");\nSites.put("four", "Zhihu");\nSystem.out.println(Sites);\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("{four=Zhihu, one=Google, two=Runoob, three=Taobao}\n访问元素\n我们可以使用 get(key) 方法来获取 key 对应的 value:")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<Integer, String> Sites = new HashMap<Integer, String>();\n// 添加键值对\nSites.put(1, "Google");\nSites.put(2, "Runoob");\nSites.put(3, "Taobao");\nSites.put(4, "Zhihu");\nSystem.out.println(Sites.get(3));\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("Taobao\n删除元素\n我们可以使用 remove(key) 方法来删除 key 对应的键值对(key-value):")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<Integer, String> Sites = new HashMap<Integer, String>();\n// 添加键值对\nSites.put(1, "Google");\nSites.put(2, "Runoob");\nSites.put(3, "Taobao");\nSites.put(4, "Zhihu");\nSites.remove(4);\nSystem.out.println(Sites);\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("{1=Google, 2=Runoob, 3=Taobao}\n删除所有键值对(key-value)可以使用 clear 方法：")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<Integer, String> Sites = new HashMap<Integer, String>();\n// 添加键值对\nSites.put(1, "Google");\nSites.put(2, "Runoob");\nSites.put(3, "Taobao");\nSites.put(4, "Zhihu");\nSites.clear();\nSystem.out.println(Sites);\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("{}\n计算大小\n如果要计算 HashMap 中的元素数量可以使用 size() 方法：")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<Integer, String> Sites = new HashMap<Integer, String>();\n// 添加键值对\nSites.put(1, "Google");\nSites.put(2, "Runoob");\nSites.put(3, "Taobao");\nSites.put(4, "Zhihu");\nSystem.out.println(Sites.size());\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("4\n迭代 HashMap\n可以使用 for-each 来迭代 HashMap 中的元素。")]),a._v(" "),t("p",[a._v("如果你只想获取 key，可以使用 keySet() 方法，然后可以通过 get(key) 获取对应的 value，如果你只想获取 value，可以使用 values() 方法。")]),a._v(" "),t("p",[a._v("实例\n// 引入 HashMap 类"),t("br"),a._v("\nimport java.util.HashMap;")]),a._v(" "),t("p",[a._v('public class RunoobTest {\npublic static void main(String[] args) {\n// 创建 HashMap 对象 Sites\nHashMap<Integer, String> Sites = new HashMap<Integer, String>();\n// 添加键值对\nSites.put(1, "Google");\nSites.put(2, "Runoob");\nSites.put(3, "Taobao");\nSites.put(4, "Zhihu");\n// 输出 key 和 value\nfor (Integer i : Sites.keySet()) {\nSystem.out.println("key: " + i + " value: " + Sites.get(i));\n}\n// 返回所有 value 值\nfor(String value: Sites.values()) {\n// 输出每一个value\nSystem.out.print(value + ", ");\n}\n}\n}\n执行以上代码，输出结果如下：')]),a._v(" "),t("p",[a._v("key: 1 value: Google\nkey: 2 value: Runoob\nkey: 3 value: Taobao\nkey: 4 value: Zhihu\nGoogle, Runoob, Taobao, Zhihu,\nJava HashMap 方法\nhashmap\nJava HashMap 常用方法列表如下：")]),a._v(" "),t("p",[a._v("方法\t描述\nclear()\t删除 hashMap 中的所有键/值对\nclone()\t复制一份 hashMap\nisEmpty()\t判断 hashMap 是否为空\nsize()\t计算 hashMap 中键/值对的数量\nput()\t将键/值对添加到 hashMap 中\nputAll()\t将所有键/值对添加到 hashMap 中\nputIfAbsent()\t如果 hashMap 中不存在指定的键，则将指定的键/值对插入到 hashMap 中。\nremove()\t删除 hashMap 中指定键 key 的映射关系\ncontainsKey()\t检查 hashMap 中是否存在指定的 key 对应的映射关系。\ncontainsValue()\t检查 hashMap 中是否存在指定的 value 对应的映射关系。\nreplace()\t替换 hashMap 中是指定的 key 对应的 value。\nreplaceAll()\t将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。\nget()\t获取指定 key 对应对 value\ngetOrDefault()\t获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值\nforEach()\t对 hashMap 中的每个映射执行指定的操作。\nentrySet()\t返回 hashMap 中所有映射项的集合集合视图。\nkeySet()\t返回 hashMap 中所有 key 组成的集合视图。\nvalues()\t返回 hashMap 中存在的所有 value 值。\nmerge()\t添加键值对到 hashMap 中\ncompute()\t对 hashMap 中指定 key 的值进行重新计算\ncomputeIfAbsent()\t对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中\ncomputeIfPresent()\t对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。")])])}),[],!1,null,null,null);n.default=s.exports}}]);