(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{599:function(n,t,a){"use strict";a.r(t);var s=a(6),p=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[n._v("#")]),n._v(" IO")]),n._v(" "),a("h3",{attrs:{id:"字节流示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节流示例"}},[n._v("#")]),n._v(" 字节流示例")]),n._v(" "),a("p",[n._v("字节流操作是较为底层的操作，仅用于最原始的I/O。除此外应避免这种底层I/O操作。")]),n._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("CopyBytes")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("IOException")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileInputStream")]),n._v(" in "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileOutputStream")]),n._v(" out "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v('//            in = new FileInputStream("C:\\\\Users\\\\Hyman\\\\Desktop\\\\idoc\\\\xanadu.txt");')]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v('//            in = new FileInputStream("C:\\\\Users\\\\Hyman\\\\Desktop\\\\idoc\\\\outagain.txt");')]),n._v("\n            in "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"C:\\\\Users\\\\Hyman\\\\Desktop\\\\idoc\\\\1.mp4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            out "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileOutputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"C:\\\\Users\\\\Hyman\\\\Desktop\\\\idoc\\\\2.mp4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n           \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// int使用低8位值来保存字节值")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("finally")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//finally块确保流的最终关闭，避免严重的资源泄露")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//当出现异常后，in仍保持null，因此这边在关闭流前做下判断。")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("in "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("out "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),a("h3",{attrs:{id:"字符流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符流"}},[n._v("#")]),n._v(" 字符流")]),n._v(" "),a("p",[n._v("java使用Unicode存储字符值。字符流I/O自动将内部格式转换为本地字符集或从本地字符集转换到内部格式。西方地区，本地字符集通常是\n8位的ascii码超集。使用字符流代替字节流的程序自动适配本地字符集，并可以进行国际化。\n如果字符集不是很优先的事，则可以简单使用字符流，不用关心字符集的问题。等到关心国际化时，再去关注及做微调。")]),n._v(" "),a("p",[n._v("所有字符流类均来自Reader和Writer。专用在文件I/O的字符流类是：FileReader和FileWriter\n字符流是reader和writer的")]),n._v(" "),a("ul",[a("li",[n._v("逐个字符为单元")])]),n._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("CopyCharacters")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("IOException")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileReader")]),n._v(" inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileWriter")]),n._v(" outputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ConstantValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("path "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"xanadu.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            outputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ConstantValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("path "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"characteroutput.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// not work")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v('//            inputStream = new FileReader(ConstantValue.path + "1.mp4");')]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v('//            outputStream = new FileWriter(ConstantValue.path + "characteroutput2.mp4");')]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//int使用低16位来保存字符值")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                outputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("finally")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("outputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                outputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n")])])]),a("p",[n._v("字符流操作文件I/O和字节流的区别在于，字符流使用FileReader，FileWriter，而字节流使用FileInputStream,FileOutputStream。\n字符流是字节流的包装形态。在内部实现上，字符流使用字节流来操作物理I/O，而字符流处理字符和字节间的翻译。FileReader使用\nFileInputStream，FileWriter使用FileOutputStream。")]),n._v(" "),a("p",[n._v("有两种通用的字节到字符的桥接流：InputStreamReader和OutputStreamWriter。如果包内没有满足需求的字符流类，那么使用它们来\n创建字符流。")]),n._v(" "),a("p",[n._v("字符IO通常以比单个字符更大的单元出现。一个常用的单元是行：一串末尾以行终结符结尾的字符串。行终结符回车换行"),a("code",[n._v("\\r\\n")]),n._v("，单个回车"),a("code",[n._v("\\r")]),n._v("\n或单个换行"),a("code",[n._v("\\r")]),n._v("。支持所有行终结符使得程序可以读取任何广泛使用的操作系统上创建的文本文件。")]),n._v(" "),a("ul",[a("li",[n._v("逐行为单元")])]),n._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("CopyLines")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("IOException")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("BufferedReader")]),n._v(" inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("PrintWriter")]),n._v(" outputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("BufferedReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ConstantValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("path "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"xanadu.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            outputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("PrintWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ConstantValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("path "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"characterlineoutput.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("String")]),n._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//返回一行")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("readLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//输出一行，这边的行终结符可能和输入文件中的行终结符不同")]),n._v("\n                outputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("finally")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("outputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                outputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),a("h3",{attrs:{id:"缓冲流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲流"}},[n._v("#")]),n._v(" 缓冲流")]),n._v(" "),a("p",[n._v("字节流和字符流的每次读取或写入是直接由底层OS处理的。这样程序较为低效。因为每次请求将触发磁盘访问，网络活动，或其他相当耗时的操作。\njava平台实现缓冲I/O流来减少此类开销。缓冲输入流从一段内存（缓冲）中读取数据。当缓冲中空了时会调用底层输入API（来填充缓冲）。类似，缓冲输出流\n将数据写入缓冲，当缓冲写满了，调用底层输出API。")]),n._v(" "),a("p",[n._v("程序可以将非缓冲流转换为缓冲流，使用包装技巧。未缓冲流对象传入缓冲流类构造函数的参数，如")]),n._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[n._v("inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("BufferedReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"xanadu.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\noutputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("BufferedWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("FileWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"characteroutput.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n")])])]),a("p",[n._v("有四种缓冲流类用来包装非缓冲流：BufferedInputStream和BufferedOutputStream用来创建缓冲字节流，BufferedReader和BufferedWriter\n创建缓冲字符流。")]),n._v(" "),a("ul",[a("li",[n._v("刷新缓冲流\n通常在关键点将缓冲写出去，而不等到缓冲填满是有意义的。这也就是刷新缓冲。\n一些缓冲流支持自动刷新，通过制定可选的构造函数参数。当启用自动刷新，特定事件将触发缓冲刷新。比如自动刷新的PrintWriter对象\n在每次调用println或format时将刷新缓冲。\n通过调用flush方法可以手动刷新流，任何输出流都可以调用此方法，但只有缓冲流的调用才会有效果。")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nConstranit desc\n@Null 被注解的元索必须为空\n@notNull 被注解的元素必须不为空\n@Min 被注解的元素必须是数字且必须小于等于指定值\n@Max 被注解的元素必须是数字且必须大于等于指定值\n@Past 被注解的元索必须是- -个过去的日期\n@Future 被注解的元素必须是一个将来的日期\n@Pattern 被注解的元素必须符合给定的正则表达式\n@AssertTure 被注解的元素必须为ture\n@AssertFalse 被注解的元素必须为false\n\n附加注解:\nConstranit desc\n@Email 被注解的元素必须是email地址\n@Length 被注解的元素必须在指定的范围内\n@NotEmpty 被注解的元素是必须\n@Range 被注解的元素可以是数字或者是数字的字符串必须在指定的范围内\n@URL 被注解的元素必须是一个URL\n\ndemo\n\n@Max(value = 2,message = "登录类型只能是1或2")\n@Min(value = 1,message = "登录类型只能是1或2")\n@NotNull(message = "登录类型不能为空")\nprivate Integer type;\n\n非空判断\n@NotNull：不能为null，但可以为empty\n\n@NotEmpty：不能为null，而且长度必须大于0\n\n@NotBlank：只能作用在String上，不能为null，而且调用trim()后，长度必须大于0\n\n\n//数字和字母组合可为空字符串 ：\n@Pattern(regexp = "^\\\\s*|[0-9A-Za-z]*$", message = "编号为数字和字母组合")\n\n^ 表示匹配字符串的开始位置 (例外 用在中括号中[ ] 时,可以理解为取反,表示不匹配括号中字符串)\n$ 表示匹配字符串的结束位置\n* 表示匹配 零次到多次\n+ 表示匹配 一次到多次 (至少有一次)\n? 表示匹配零次或一次\n. (圆点)表示匹配单个字符\n| 表示为或者,两项中取一项（可用于两个正则之间）\n( ) 小括号表示匹配括号中全部字符\n[ ] 中括号表示匹配括号中一个字符 范围描述 如[0-9 a-z A-Z]\n{ } 大括号用于限定匹配次数 如 {n}表示匹配n个字符 {n,}表示至少匹配n个字符 {n,m}表示至少n,最多m\n\\ 转义字符 如上基本符号匹配都需要转义字符 如 \\*表示匹配*号\n\\w 表示英文字母和数字 \\W 非字母和数字\n\\d 表示数字 \\D 非数字\n\\s表示空字符串\n当使用-时，需要放在最后一个位置，否则会被当成数字和字母之间区间的标识\n\npackage com.xx.xxx.xxxxx.utils;\n\nimport org.apache.log4j.Logger;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * @author xdja\n * @date 2020/11/20 16:08\n */\npublic final class RegexpUtils {\n    /**\n     * 匹配email地址\n     * <p>\n     * <p>\n     * 格式: XXX@XXX.XXX.XX\n     * <p>\n     * 匹配 : foo@bar.com 或 foobar@foobar.com.au\n     * <p>\n     * 不匹配: foo@bar 或 $$$@bar.com\n     */\n    public static final String EMAIL_REGEXP = "^([a-zA-Z0-9]+[-|\\\\_|\\\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[-|\\\\_|\\\\.]?)*[a-zA-Z0-9]+\\\\.[a-zA-Z]{2,}$";\n    /**\n     * 匹配并提取url\n     * <p>\n     * <p>\n     * 格式: XXXX://XXX.XXX.XXX.XX/XXX.XXX?XXX=XXX\n     * <p>\n     * 匹配 : http://www.suncer.com 或news://www\n     * <p>\n     * 不匹配: c:/window\n     */\n    public static final String URL_REGEXP = "(//w+)://([^/:]+)(://d*)?([^#//s]*)";\n    /**\n     * 匹配并提取http\n     * <p>\n     * 格式: http://XXX.XXX.XXX.XX/XXX.XXX?XXX=XXX 或 ftp://XXX.XXX.XXX 或 https://XXX\n     * <p>\n     * 匹配 : http://www.suncer.com:8080/index.html?login=true\n     * <p>\n     * 不匹配: news://www\n     */\n    public static final String HTTP_REGEXP = "(http|https|ftp)://([^/:]+)(://d*)?([^#//s]*)";\n    /**\n     * 匹配并提取http\n     * <p>\n     * 格式: http://XXX.XXX.XXX.XX/XXX.XXX?XXX=XXX 或 ftp://XXX.XXX.XXX 或 https://XXX\n     * <p>\n     * 匹配 : http://www.suncer.com:8080/index.html?login=true\n     * <p>\n     * 不匹配: news://www\n     */\n    public static final String HTTP_REGEXP_BANNER = "((https|http|ftp|rtsp|mms)?://)([0-9a-z_!~*\'()-]+\\\\.)*([a-zA-Z0-9][-a-zA-Z0-9]{0,62})+(\\\\.[a-zA-Z]{1,4})(:[0-9]{1,4})?((/?)|(/[0-9a-zA-Z_!~*\'().;?:@&=+$,%#-]+)+/?)\\\\.?$";\n    /**\n     * 匹配日期\n     * <p>\n     * <p>\n     * 格式(首位不为0): XXXX-XX-XX或 XXXX-X-X\n     * <p>\n     * <p>\n     * 范围:1900--2099\n     * <p>\n     * <p>\n     * 匹配 : 2005-04-04\n     * <p>\n     * <p>\n     * 不匹配: 01-01-01\n     */\n    public static final String DATE_BARS_REGEXP = "^((((19){1}|(20){1})\\\\d{2})|\\\\d{2})-[0,1]?\\\\d{1}-[0-3]?\\\\d{1}$";\n    /**\n     * wzw\n     * <p>\n     * <p>\n     * 匹配格式 20160606\n     */\n    public static final String DATE_BARS_DAY_REGEXP = "^((((19){1}|(20){1})\\\\d{2})|\\\\d{2})[0,1]?\\\\d{1}[0-3]?\\\\d{1}$";\n    /**\n     * 匹配格式 20130101\n     */\n    public static final String DATE_BARS_REGEXP_SIMPLE =\n            "([\\\\d]{4}(((0[13578]|1[02])((0[1-9])|([12][0-9])|(3[01])))|(((0[469])|11)((0[1-9])|([12][0-9])|30))|(02((0[1-9])|(1[0-9])|(2[0-8])))))|((((([02468][048])|([13579][26]))00)|([0-9]{2}(([02468][048])|([13579][26]))))(((0[13578]|1[02])((0[1-9])|([12][0-9])|(3[01])))|(((0[469])|11)((0[1-9])|([12][0-9])|30))|(02((0[1-9])|(1[0-9])|(2[0-9])))))";\n    /**\n     * 匹配格式 20130101\n     */\n    public static final String DATE_BARS_REGEXP_HOUR_FULL =\n            "^\\\\d{4}-(?:0\\\\d|1[0-2])-(?:[0-2]\\\\d|3[01])( (?:[01]\\\\d|2[0-3])\\\\:[0-5]\\\\d)?$";\n    /**\n     * 匹配日期\n     * <p>\n     * <p>\n     * 格式(首位不为0): XXXX-XX-XX或 XXXX-X-X\n     * <p>\n     * <p>\n     * 范围:1900--2099\n     * <p>\n     * <p>\n     * 匹配 : 2005-04-04 11:00:00\n     * <p>\n     * <p>\n     * 不匹配: 01-01-01\n     */\n    public static final String DATE_BARS_REGEXP_HOUR =\n            "^((((19){1}|(20){1})\\\\d{2})|\\\\d{2})-[0,1]?\\\\d{1}-[0-3]?\\\\d{1}\\\\s[0,2]?\\\\d{1}[0,9]?\\\\d{1}$";\n\n    /**\n     * 匹配 : 2005-04-04 11:00:00\n     */\n    public static final String DATE_BARS_REGEXP_HOUR_MIN_SS =\n            "^\\\\d{4}\\\\D+\\\\d{1,2}\\\\D+\\\\d{1,2}\\\\D+\\\\d{1,2}\\\\D+\\\\d{1,2}\\\\D+\\\\d{1,2}\\\\D*$";\n    /**\n     * 匹配日期\n     * <p>\n     * <p>\n     * 格式: XXXX.XX.XX\n     * <p>\n     * <p>\n     * 范围:\n     * <p>\n     * <p>\n     * 匹配 : 2005.04.04\n     * <p>\n     * <p>\n     * 不匹配: 01.01.01\n     */\n    public static final String DATE_SLASH_REGEXP = "^[0-9]{4}\\\\.[0-9]{2}\\\\.[0-9]{2}$";\n\n    /**\n     * 匹配电话\n     * <p>\n     * <p>\n     * 格式为: 0XXX-XXXXXX(10-13位首位必须为0) 或0XXX XXXXXXX(10-13位首位必须为0) 或\n     * <p>\n     * (0XXX)XXXXXXXX(11-14位首位必须为0) 或 XXXXXXXX(6-8位首位不为0) 或 XXXXXXXXXXX(11位首位不为0)\n     * <p>\n     * <p>\n     * 匹配 : 0371-123456 或 (0371)1234567 或 (0371)12345678 或 010-123456 或 010-12345678 或 12345678912\n     * <p>\n     * <p>\n     * 不匹配: 1111-134355 或 0123456789\n     */\n    public static final String PHONE_REGEXP =\n            "^(?:0[0-9]{2,3}[-//s]{1}|//(0[0-9]{2,4}//))[0-9]{6,8}$|^[1-9]{1}[0-9]{5,7}$|^[1-9]{1}[0-9]{10}$";\n\n    /**\n     * 11位手机号格式验证\n     */\n    public static final String MOBILE_PHONE_REGEXP = "^1[3,4,5,6,7,8,9]\\\\d{9}$";\n    /**\n     * 20位联系方式格式验证\n     */\n    public static final String PHONE_20_REGEXP = "^[0-9\\\\-]{1,20}$";\n\n    /**\n     * 匹配身份证\n     * <p>\n     * 格式为: XXXXXXXXXX(10位) 或 XXXXXXXXXXXXX(13位) 或 XXXXXXXXXXXXXXX(15位) 或 XXXXXXXXXXXXXXXXXX(18位)\n     * <p>\n     * 匹配 : 0123456789123\n     * <p>\n     * 不匹配: 0123456\n     */\n    public static final String IDENTITY_CARD_REGEXP =\n            "^[1-9]\\\\d{5}[1-9]\\\\d{3}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}([0-9]|X)$";\n    /**\n     * 匹配身份证\n     * <p>\n     * 格式为: XXXXXXXXXX(10位) 或 XXXXXXXXXXXXX(13位) 或 XXXXXXXXXXXXXXX(15位) 或 XXXXXXXXXXXXXXXXXX(18位)\n     * <p>\n     * 匹配 : 0123456789123\n     * <p>\n     * 不匹配: 0123456\n     */\n    public static final String ID_CARD_REGEXP = "^d{18} | $";\n\n    /**\n     * 匹配邮编代码\n     * <p>\n     * 格式为: XXXXXX(6位)\n     * <p>\n     * 匹配 : 012345\n     * <p>\n     * 不匹配: 0123456\n     */\n    public static final String ZIP_REGEXP = "^[0-9]{6}$";\n\n    /**\n     * 不包括特殊字符的匹配 (字符串中不包括符号 数学次方号^ 单引号\' 双引号" 分号; 逗号, 帽号: 数学减号- 右尖括号> 左尖括号< 反斜杠/ 即空格,制表符,回车符等 )\n     * <p>\n     * 格式为: x 或 一个一上的字符\n     * <p>\n     * 匹配 : 012345\n     * <p>\n     * 不匹配: 0123456 // ;,:-<>//s].+$";//\n     */\n    public static final String NON_SPECIAL_CHAR_REGEXP = "^[^\'/";\n\n    /**\n     * 匹配一位数的0-1整数\n     */\n    public static final String ZERO__TO_ONE_NUMBER = "[0-1]$";\n\n    /**\n     * 匹配一位数的0-2整数\n     */\n    public static final String ZERO__TO_TWO_NUMBER = "[0-2]$";\n\n    /**\n     * 匹配一位数的0-2整数\n     */\n    public static final String ZERO__TO_THREE_NUMBER = "[0-3]$";\n    /**\n     * 匹配一位数的1-4的非负整数\n     */\n    public static final String ONE__TO_FOUR_NATURAL_NUMBER = "[1-4]$";\n    /**\n     * 匹配一位数的0-4的非负整数\n     */\n    public static final String ZERO__TO_FOUR_NATURAL_NUMBER = "[0-4]$";\n    /**\n     * 匹配一位数的1-3的非负整数\n     */\n    public static final String ONE_TO_THREE_NATURAL_NUMBER = "[1-3]$";\n    /**\n     * 匹配一位数的1-3的非负整数\n     */\n    public static final String ONE__TO_TWO_NATURAL_NUMBER = "[1-3]$";\n    /**\n     * 匹配一位数的1-6的非负整数\n     */\n    public static final String ONE__TO_SIX_NATURAL_NUMBER = "[1-6]$";\n    /**\n     * 匹配0-18的正整数\n     */\n    public static final String ONE_TO_EIGHTEEN_NUMBER = "^(18|[0-9]|(1[0-8]))$";\n\n    /**\n     * 匹配1-99的正整数\n     */\n    public static final String ONE_TO_NINETYNINE_NUMBER = "^(99|[1-9]|([1-9][0-9]))$";\n\n    /**\n     * 匹配非负整数（正整数 + 0)\n     */\n    public static final String NON_NEGATIVE_INTEGERS_REGEXP = "^//d+$";\n    /**\n     * 匹配带1位小数且不超过2位的数\n     */\n    public static final String CAR_LENGTH_REGEXP = "^(\\\\d|\\\\d\\\\d)(\\\\.\\\\d)?$";\n    /**\n     * 匹配整数位最大3位且小数位最大2位的数\n     */\n    public static final String CAR_LOAD_REGEXP = "^(\\\\d{1,3})(\\\\.\\\\d{1,2})?$";\n    /**\n     * 匹配不包括零的非负整数（正整数 > 0)\n     */\n    public static final String NON_ZERO_NEGATIVE_INTEGERS_REGEXP = "^[1-9]+//d*$";\n    /**\n     * 匹配包括零的正整数\n     */\n    public static final String ZERO_NEGATIVE_INTEGERS_REGEXP = "^[0-9]*[0-9][0-9]*$";\n    /**\n     * 匹配正整数\n     */\n    public static final String POSITIVE_INTEGER_REGEXP = "^[0-9]*[1-9][0-9]*$";\n    /**\n     * 匹配非正整数（负整数 + 0）\n     */\n    public static final String NON_POSITIVE_INTEGERS_REGEXP = "^((-//d+)|(0+))$";\n    /**\n     * 匹配负整数\n     */\n    public static final String NEGATIVE_INTEGERS_REGEXP = "^-[0-9]*[1-9][0-9]*$";\n    /**\n     * 匹配整数\n     */\n    public static final String INTEGER_REGEXP = "^-?//d+$";\n    /**\n     * 匹配非负浮点数（正浮点数 + 0）\n     */\n    public static final String NON_NEGATIVE_RATIONAL_NUMBERS_REGEXP = "^\\\\d+(\\\\.\\\\d+)?$";\n    /**\n     * 匹配正浮点数\n     */\n    public static final String POSITIVE_RATIONAL_NUMBERS_REGEXP = "^[0-9]+(.[0-9]{1})?$";\n    /**\n     * 匹配正浮点数(1-6位)\n     */\n    public static final String POSITIVE_ONE_TO_SIX_RATIONAL_NUMBERS_REGEXP = "^((?!0\\\\d)\\\\d+(\\\\.\\\\d{1,6}?))$";\n    /**\n     * 匹配非正浮点数（负浮点数 + 0）\n     */\n    public static final String NON_POSITIVE_RATIONAL_NUMBERS_REGEXP = "^((-//d+(//.//d+)?)|(0+(//.0+)?))$";\n    /**\n     * 匹配负浮点数\n     */\n    public static final String NEGATIVE_RATIONAL_NUMBERS_REGEXP =\n            "^(-(([0-9]+//.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*//.[0-9]+)|([0-9]*[1-9][0-9]*)))$";\n\n    /**\n     * 匹配浮点数\n     */\n    public static final String RATIONAL_NUMBERS_REGEXP = "^(-?//d+)(//.//d+)?$";\n    /**\n     * 匹配由26个英文字母组成的字符串\n     */\n    public static final String LETTER_REGEXP = "^[A-Za-z]+$";\n    /**\n     * 匹配由26个英文字母的大写组成的字符串\n     */\n    public static final String UPWARD_LETTER_REGEXP = "^[A-Z]+$";\n    /**\n     * 匹配由A-D英文字母的大写的字符\n     */\n    public static final String UPWARD_LETTER_A_D = "^[A-D]{1}";\n    /**\n     * 匹配由26个英文字母的大写的字符\n     */\n    public static final String UPWARD_LETTER_STR = "^[A-Z]{1}$";\n    /**\n     * 匹配由26个英文字母的小写组成的字符串\n     */\n    public static final String LOWER_LETTER_REGEXP = "^[a-z]+$";\n    /**\n     * 匹配由数字和26个英文字母组成的字符串\n     */\n    public static final String LETTER_NUMBER_REGEXP = "^[A-Za-z0-9]+$";\n    /**\n     * 匹配由数字、26个英文字母或者下划线组成的字符串\n     */\n    public static final String LETTER_NUMBER_UNDERLINE_REGEXP = "^//w+$";\n    /**\n     * 必须由数字和26个英文字母组合组成的字符串\n     */\n    public static final String LETTER_NUMBER_REGEXP_MUST = "[0-9]+[a-zA-Z]+[0-9a-zA-Z]*|[a-zA-Z]+[0-9]+[0-9a-zA-Z]*";\n    /**\n     * 匹配5位数字\n     */\n    public static final String FIVE_NUMBER_ONLY_REGEXP = "^[0-9]{5}$";\n    /**\n     * 匹配4位数字\n     */\n    public static final String FOUR_NUMBER_ONLY_REGEXP = "^[0-9]{4}$";\n    /**\n     * 匹配1位字母\n     */\n    public static final String ONE_LETTER = "^[a-zA-Z]{1}$";\n    /**\n     * 匹配19位数字\n     */\n    public static final String NINETEEN_NUMBER_ONLY_REGEXP = "^[0-9]{19}$";\n    /**\n     * 匹配8位数字\n     */\n    public static final String EIGHT_NUMBER_ONLY_REGEXP = "^[0-9]{8}$";\n    /**\n     * 匹配19位数字\n     */\n    public static final String TWENTY_NUMBER_ONLY_REGEXP = "^[0-9]{20}$";\n    /**\n     * 匹配1位数字\n     */\n    public static final String NUMBER_ONLY_ONE_REGEXP = "^\\\\d$";\n    /**\n     * 匹配日期\n     * <p>\n     * <p>\n     * 格式: yyyymmdd\n     * <p>\n     * <p>\n     * 范围:\n     * <p>\n     * <p>\n     * 匹配 : 20050404\n     * <p>\n     * <p>\n     * 不匹配: 010101\n     */\n    public static final String DATE_YYYYMMMDD_REGEXP = "("\n            + "(^\\\\d{3}[1-9]|\\\\d{2}[1-9]\\\\d{1}|\\\\d{1}[1-9]\\\\d{2}|[1-9]\\\\d{3}" + "(10|12|0?[13578])"\n            + "((3[01]|[12][0-9]|0?[1-9])?)" + "([\\\\s]?)" + "((([0-1]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9]))?))$" + "|"\n            + "(^\\\\d{3}[1-9]|\\\\d{2}[1-9]\\\\d{1}|\\\\d{1}[1-9]\\\\d{2}|[1-9]\\\\d{3}" + "(11|0?[469])" + "(30|[12][0-9]|0?[1-9])"\n            + "([\\\\s]?)" + "((([0-1]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9]))?))$" + "|"\n            + "(^\\\\d{3}[1-9]|\\\\d{2}[1-9]\\\\d{1}|\\\\d{1}[1-9]\\\\d{2}|[1-9]\\\\d{3}" + "(0?2)" + "(2[0-8]|1[0-9]|0?[1-9])"\n            + "([\\\\s]?)" + "((([0-1]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9]))?))$" + "|"\n            + "(^((\\\\d{2})(0[48]|[2468][048]|[13579][26]))|((0[48]|[2468][048]|[13579][26])00)" + "(0?2)" + "(29)"\n            + "([\\\\s]?)" + "((([0-1]?\\\\d|2[0-3]):([0-5]?\\\\d):([0-5]?\\\\d))?))$" + ")";\n    /**\n     * 匹配日期 格式: yyyymm 匹配 : 200504 不匹配: 010101\n     */\n    public static final String DATE_YYYYMM_REGEXP = "^(\\\\d{4})(0\\\\d{1}|1[0-2])$";\n    /**\n     * 匹配日期 格式: yyyy-MM-dd 10位 匹配 : 2005-04-01 不匹配: 010101\n     */\n    public static final String DATE_YYYY_MM_DD_REGEXP = "^((?:19|20)\\\\d\\\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$";\n    /**\n     * 匹配日期 格式: yyyy/MM/dd 10位 匹配 : 2005/04/01 不匹配: 010101\n     */\n    public static final String DATE_YYYYMMDD_REGEXP = "^((?:19|20)\\\\d\\\\d)/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])$";\n    /**\n     * 匹配日期 格式: yyyyMMdd 8位 匹配 : 20050401 不匹配: 010101\n     */\n    public static final String DATE_YYYYMMDD_EIGHT_REGEXP =\n            "^((?:19|20)\\\\d\\\\d)(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$";\n    /**\n     * 匹配格式 2016-02-02 01:01\n     */\n    public static final String DATE_BARS_REGEXP_HOUR_MIN =\n            "^\\\\d{4}-(?:0\\\\d|1[0-2])-(?:[0-2]\\\\d|3[01]) (?:[01]\\\\d|2[0-3])\\\\:[0-5]\\\\d?$";\n    /**\n     * 匹配格式 2016-02-02 01:01:01\n     */\n    public static final String DATE_BARS_REGEXP_HOUR_MIN_SECOND =\n            "^\\\\d{4}[-]([0][1-9]|(1[0-2]))[-]([1-9]|([012]\\\\d)|(3[01]))([ \\\\t\\\\n\\\\x0B\\\\f\\\\r])(([0-1]{1}[0-9]{1})|([2]{1}[0-4]{1}))([:])(([0-5]{1}[0-9]{1}|[6]{1}[0]{1}))([:])((([0-5]{1}[0-9]{1}|[6]{1}[0]{1})))$";\n    /**\n     * 匹配整数或者空串\n     */\n    public static final String NUMBER_BLANK_REGEXP = "^[1-9]\\\\d*|0|^\\\\s*$";\n    /**\n     * 匹配正整数或者空串\n     */\n    public static final String POSITIVE_NUMBER_BLANK_REGEXP = "^[1-9]\\\\d*|^\\\\s*$";\n    /**\n     * 任意位数的非负整数\n     */\n    public static final String NATURAL_NUMBER = "\\\\d*$";\n    /**\n     * 数字加逗号\n     */\n    public static final String COMMA_NUMBER = "[\\\\d,]*$";\n    /**\n     * 匹配汉字\n     */\n    public static final String CHINESE_VAR = "[\\\\u4e00-\\\\u9fa5]*$";\n    /**\n     * 不允许包含"/"或"\\"正则\n     */\n    public static final String BACK_SLANT_REGEXP = "^[^/^\\\\\\\\]+$";\n\n    /**\n     * 匹配日期 格式: yyyy-MM 7位 匹配 : 2005-04 不匹配: 0101\n     */\n    public static final String DATE_YYYY_MM_REGEXP = "^((?:19|20)\\\\d\\\\d)-(0[1-9]|1[012])$";\n\n\n    private RegexpUtils() {\n    }\n\n    /**\n     * 校验正则表达式结果\n     *\n     * @param content\n     * @param reg\n     * @return\n     */\n    public static boolean validateInfo(String content, String reg) {\n\n        Pattern pat = Pattern.compile(reg);\n        Matcher mat = pat.matcher(content);\n\n        return mat.matches();\n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(test("1"));\n        System.out.println(test("12345678"));\n        System.out.println(test("123456789"));\n        System.out.println(test("1234567"));\n\n    }\n\n    public static boolean test(String date) {\n\n        Pattern pat = Pattern.compile(RegexpUtils.EIGHT_NUMBER_ONLY_REGEXP);\n        Matcher mat = pat.matcher(date);\n        boolean dateType = mat.matches();\n        return dateType;\n    }\n\n}\n\n')])])])])}),[],!1,null,null,null);t.default=p.exports}}]);