(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{752:function(e,n,t){"use strict";t.r(n);var r=t(6),s=Object(r.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"mybatis动态sql之trim、where、set标签"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis动态sql之trim、where、set标签"}},[this._v("#")]),this._v(" MyBatis动态sql之trim、where、set标签")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('本节主要讲解 MyBatis 动态 Sql 的 trim、where、set 标签。\n<trim>元素\n<trim> 元素的主要功能是可以在自己包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是 prefix 和 suffix。\n\n可以把包含内容的首部某些内容覆盖，即忽略，也可以把尾部的某些内容覆盖，对应的属性是 prefixOverrides 和 suffixOverrides。正因为 <trim> 元素有这样的功能，所以也可以非常简单地利用 <trim> 来代替 <where> 元素的功能。\n\n在 myBatisDemo03 应用中测试 <trim> 元素，具体过程如下：\n1）添加 SQL 映射语句\n在 com.mybatis 包的 UserMapper.xml 文件中添加如下 SQL 映射语句：\n\x3c!--使用trim元素根据条件动态查询用户信息--\x3e\n<select id="selectUserByTrim" resultType="com.po.MyUser"parameterType="com.po.MyUser">\n    select * from user\n    <trim prefix="where" prefixOverrides = "and | or">\n        <if test="uname!=null and uname!=\'\'">\n            and uname like concat(\'%\',#{uname},\'%\')\n        </if>\n        <if test="usex!=null and usex!=\'\'">\n            and usex=#{usex}\n        </if>\n    </trim>\n</select>\n2）添加数据操作接口方法\n在 com.dao 包的 UserDao 接口中添加如下数据操作接口方法：\npublic List<MyUser> selectUserByTrim(MyUser user);\n\n3）调用数据操作接口方法\n在 com.controller 包的 UserController 类中添加如下程序调用数据操作接口方法。\n// 使用trim元素查询用户信息\nMyUser trimmu=new MyUser();\ntrimmu.setUname ("张");\ntrimmu.setUsex("男");\nList<MyUser> listByTrim=userDao.selectUserByTrim(trimmu);\nSystem.out.println ("trim 元素=========================");\nfor (MyUser myUser:listByTrim) {\n    System.out.println(myUser);\n}\n4）测试动态 SQL 语句\n运行 com.controller 包中的 TestController 主类，测试动态 SQL 语句。\n<where> 元素\n<where> 元素的作用是会在写入 <where> 元素的地方输出一个 where 语句，另外一个好处是不需要考虑 <where> 元素里面的条件输出是什么样子的，MyBatis 将智能处理。如果所有的条件都不满足，那么 MyBatis 就会查出所有的记录，如果输出后是以 and 开头的，MyBatis 会把第一个 and 忽略。\n\n当然如果是以 or 开头的，MyBatis 也会把它忽略；此外，在 <where> 元素中不需要考虑空格的问题，MyBatis 将智能加上。\n\n在 myBatisDemo03 应用中测试 <where> 元素，具体过程如下：\n1）添加 SQL 映射语句\n在 com.mybatis 包的 UserMapper.xml 文件中添加如下 SQL 映射语句：\n\x3c!--使用where元素根据条件动态查询用户信息--\x3e\n<select id="selectUserByWhere" resultType="com.po.MyUser" parameterType="com.po.MyUser">\n    select * from user\n    <where>\n        <if test="uname != null and uname ! = \'\'">\n            and uname like concat(\'%\',#{uname},\'%\')\n        </if>\n        <if test="usex != null and usex != \'\' ">\n            and usex=#{usex}\n        </if >\n    </where>\n</select>\n2）添加数据操作接口方法\n在 com.dao 包的 UserDao 接口中添加如下数据操作接口方法：\npublic List<MyUser> selectUserByWhere(MyUser user);\n\n3）调用数据操作接口方法\n在 com.controller 包的 UserController 类中添加如下程序调用数据操作接口方法。\n// 使用where元素查询用户信息\nMyUser wheremu=new MyUser();\nwheremu.setUname ("张");\nwheremu.setUsex("男");\nList<MyUser> listByWhere=userDao.selectUserByWhere(wheremu);\nSystem.out.println ("where 元素=========================");\nfor (MyUser myUser:listByWhere) {\n    System.out.println(myUser);\n}\n4）测试动态 SQL 语句\n运行 com.controller 包中的 TestController 主类，测试动态 SQL 语句。\n<set>元素\n在动态 update 语句中可以使用 <set> 元素动态更新列。在 myBatisDemo03 应用中测试 <set> 元素，具体过程如下：\n1）添加 SQL 映射语句\n在 com.mybatis 包的 UserMapper.xml 文件中添加如下 SQL 映射语句：\n\x3c!--使用set元素动态修改一个用户--\x3e\n<update id="updateUserBySet" parameterType="com.po.MyUser">     \n    update user\n    <set>\n        <if test="uname!=null">uname=#{uname}</if>\n        <if test="usex!=null">usex=#{usex}</if>\n    </set>\n    where uid=#{uid}\n</update>\n2）添加数据操作接口方法\n在 com.dao 包的 UserDao 接口中添加如下数据操作接口方法：\npublic int updateUserBySet(MyUser user);\n\n3）调用数据操作接口方法\n在 com.controller 包的 UserController 类中添加如下程序调用数据操作接口方法。\n// 使用set元素查询用户信息\nMyUser setmu=new MyUser();\nsetmu.setUid (1);\nsetmu.setUname("张九");\nint setup=userDao.updateUserBySet(setmu);\nSystem.out.println ("set 元素修改了"+setup+"条记录");\nSystem.out.println ("=========================")\n4）测试动态 SQL 语句\n运行 com.controller 包中的 TestController 主类，测试动态 SQL 语句。\n\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);