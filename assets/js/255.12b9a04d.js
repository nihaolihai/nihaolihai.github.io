(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{746:function(e,s,t){"use strict";t.r(s);var n=t(6),r=Object(n.a)({},(function(){var e=this.$createElement,s=this._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h2",{attrs:{id:"mybatis动态sql之if标签-条件判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis动态sql之if标签-条件判断"}},[this._v("#")]),this._v(" MyBatis动态sql之if标签：条件判断")]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('开发人员通常根据需求手动拼接 SQL 语句，这是一个极其麻烦的工作，而 MyBatis 提供了对 SQL 语句动态组装的功能，恰能解决这一问题。\n\nMyBatis 的动态 SQL 元素与 JSTL 或 XML 文本处理器相似，常用 <if>、<choose>、<when>、<otherwise>、<trim>、<where>、<set>、<foreach> 和 <bind> 等元素。\n\n创建 myBatisDemo03 应用，并将《MyBatis与Spring的整合实例详解》的 MyBatis-Spring 应用的所有 JAR 包和 src 中所有 Java 程序与 XML 文件都复制到 myBatisDemo03 的相应位置。\n\n动态 SQL 通常要做的事情是有条件地包含 where 子句的一部分，所以在 MyBatis 中 <if> 元素是最常用的元素，它类似于 Java 中的 if 语句。在 myBatisDemo03 应用中测试 <if> 元素，具体过程如下：\n1）添加 SQL 映射语句\n在 com.mybatis 包的 UserMapper.xml 文件中添加如下 SQL 映射语句：\n\x3c!--使用 if 元素根据条件动态查询用户信息--\x3e\n<select id="selectUserByIf" resultType="com.po.MyUser" parameterType="com.po.MyUser">\n    select * from user where 1=1\n    <if test="uname!=null and uname!=\'\'">\n        and uname like concat(\'%\',#{uname},\'%\')\n    </if >\n    <if test="usex !=null and usex !=\'\'">\n        and usex=#{usex}\n    </if >\n</select>\n2）添加数据操作接口方法\n在 com.dao 包的 UserDao 接口中添加如下数据操作接口方法：\npublic List<MyUser> selectUserByIf(MyUser user);\n\n3）调用数据操作接口方法\n在 com.controller 包的 UserController 类中添加如下程序调用数据操作接口方法。\n// 使用 if 元素查询用户信息\nMyUser ifmu=new MyUser();\nifmu.setUname ("张");\nifmu.setUsex ("女");\nList<MyUser> listByif=userDao.selectUserByIf(ifmu);\nSystem.out.println ("if元素================");\nfor (MyUser myUser:listByif) {\n    System.out.println(myUser);\n}\n4）测试动态 SQL 语句\n运行 com.controller 包中的 TestController 主类，测试动态 SQL 语句。\n\n')])])])])}),[],!1,null,null,null);s.default=r.exports}}]);