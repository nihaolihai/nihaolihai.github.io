(window.webpackJsonp=window.webpackJsonp||[]).push([[424],{915:function(e,r,t){"use strict";t.r(r);var n=t(6),i=Object(n.a)({},(function(){var e=this.$createElement,r=this._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[r("h2",{attrs:{id:"spring-mvc验证器-validator接口和validationutils类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc验证器-validator接口和validationutils类"}},[this._v("#")]),this._v(" Spring MVC验证器：Validator接口和ValidationUtils类")]),this._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('Validator接口\n创建自定义 Spring 验证器需要实现 org.springframework.validation.Validator 接口，该接口有两个接口方法：\nboolean supports(Class<?> klass)\nvoid validate(Object object,Errors errors)\n\n当 supports 方法返回 true 时，验证器可以处理指定的 Class。validate 方法的功能是验证目标对象 object，并将验证错误消息存入 Errors 对象。\n\n往 Errors 对象存入错误消息的方法是 reject 或 rejectValue，这两个方法的部分重载方法如下：\nvoid reject(String errorCode)\nvoid reject(String errorCode,String defaultMessage)\nvoid rejectValue(String filed,String errorCode)\nvoid rejectValue(String filed,String errorCode,String defaultMessage)\n\n在一般情况下只需要给 reject 或 rejectValue 方法一个错误代码，Spring MVC 框架就会在消息属性文件中查找错误代码，获取相应错误消息。具体示例如下：\nif(goods.getGprice() > 100 || goods.getGprice() < 0){\n    errors.rejectValue("gprice","gprice.invalid");  // gprice.invalid为错误代码\n}\n\nValidationUtils 类\norg.springframework.validation.ValidationUtils 是一个工具类，该类中有几个方法可以帮助用户判定值是否为空。\n\n例如：\nif(goods.getGname()==null || goods.getGname().isEmpty()) {\n    errors.rejectValue("gname","goods.gname.required")\n}\n\n再如：\nif(goods.getGname() == null || goods.getGname().trim().isEmpty()) {\n    errors.rejectValue("gname","goods.gname.required")\n}\n\n上述 if 语句可以编写成：\n//gname为goods对象的属性\nValidationUtils.rejectIfEmptyOrWhitespace(errors,"gname","goods.gname.required");\n\n')])])])])}),[],!1,null,null,null);r.default=i.exports}}]);