(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{772:function(e,a,t){"use strict";t.r(a);var n=t(6),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"day15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day15"}},[e._v("#")]),e._v(" day15")]),e._v(" "),t("p",[e._v("反射(Reflection):Java在运行期间可以动态加载,解析和使用在编译期间不确定的类型\n动态获取类的信息以及使用对象的方法的机制称为反射又称为内省(Introspection)\n动态加载机制:并非一次性加载,而是在需要的时候加载\n可以通过虚拟机参数来    java -verbose:class   查看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("            反射机制提供的功能:\n                      1.加载运行时才能确定的类型\n                      2.解析类的结构,获取类里面的信息\n                      3.操作类型或者实例\n                                  1.访问属性\n                                  2.调用方法\n                                  3.创建对象\n")])])]),t("p",[e._v("反射的API :1)java.lang.Class 类\n用于表示运行时的Java数据类型(数组 接口 枚举 基本类型  类 注解)\n注意:在类加载的时候,Java会自动给用户创建需要的Class对象(用户可以获取)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('               //获取Class实例的5种方法\n               1.对象名.getClass()\n               2.类名.class;\n               3.Class.forName("类的全限定名");\n               4.基本类型.class\n               5.包装类型.class\n')])])]),t("hr"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("           2)在java.lang.reflect 包下面\n                 java.lang.reflect.Field   提供有关类或接口的单个字段的信息，\n                                                    以及对它的动态访问权限。\n                                                   反射的字段可能是一个类（静态）字段或实例字段。 \n                java.lang.reflect.Method  提供关于类或接口上单独某个方法（以及如何访\n                                                       问该方法）的信息。所反映的方法可能是类方法或实例方法（包括抽象方法）。 \n                java.lang.reflect.Constructor   提供关于类的单个构造方法的信息以及对它的访问权限\n                java.lang.reflect.Array    类提供了动态创建和访问 Java 数组的方法。\n")])])]),t("hr"),e._v(" "),t("p",[e._v("Class 类中常用的方法:\n关于属性的:\nField[] getFields()    返回的是所有公开的属性\nField[] getDeclaredFields()   返回所有的属性\nField   getField(String name)  根据属性名称来查询该属性,该属性必须是公开的\nField   getDeclaredField(String name)  ......公开的")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("              关于方法的:\n                            Method[] getMethods():获取的公开的方法,包括从父类中继承过来的\n                            Method[] getDeclaredMethods();//获取所有的,但是不包括从父类中继承过来的方法\n                            Method   getDeclaredMethod(String name, Class<?>... parameterTypes)\n                      \n              关于构造方法的:\n                     Constructor<?>[]   getDeclaredConstructors() ;获取所有构造\n\n                     注意:反射调用构造方法\n                     1.调用空参构造有2种方法,第一种是Class类中的newInstance()\n                            第二种是Constructor中的newInstance(可变列表)\n                       2.调用有参构造只有1种方法    Constructor中的newInstance(可变列表)\n\n              其他方法:\n                       Package getPackage():返回类所在的包\n                       Class<? super T>      getSuperclass() :返回超类\n                       Class<?>[] getInterfaces  返回所实现的接口\n")])])]),t("hr"),e._v(" "),t("h2",{attrs:{id:"java-lang-reflect-field常用方法-int-getmodifiers-java语言访问修饰符在底层都是2的次方-提高效率class-gettype-返回声明类型string-getname-返回属性名java-lang-reflect-method常用方法-int-getmodifiers-同上class-getreturntype-方法的返回类型string-getname-com-tz-day15-point-setxstring-getsimplename-setxclass-getparametertypes-按照声明顺序返回-class-对象的数组-这些对象描述了此-method-对象所表示的方法的形参类型。invoke-object-obj-参数列表-java-lang-reflect-array利用反射技术获取数组的长度-数组的组件类型-根据下标获取值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-field常用方法-int-getmodifiers-java语言访问修饰符在底层都是2的次方-提高效率class-gettype-返回声明类型string-getname-返回属性名java-lang-reflect-method常用方法-int-getmodifiers-同上class-getreturntype-方法的返回类型string-getname-com-tz-day15-point-setxstring-getsimplename-setxclass-getparametertypes-按照声明顺序返回-class-对象的数组-这些对象描述了此-method-对象所表示的方法的形参类型。invoke-object-obj-参数列表-java-lang-reflect-array利用反射技术获取数组的长度-数组的组件类型-根据下标获取值"}},[e._v("#")]),e._v(" java.lang.reflect.Field\n常用方法:\nint  getModifiers();//Java语言访问修饰符在底层都是2的次方,提高效率\nClass<?> getType()   返回声明类型\nString getName()    返回属性名\njava.lang.reflect.Method\n常用方法:\nint getModifiers();//同上\nClass<?>  getReturnType() ;//方法的返回类型\nString getName();// com.tz.day15.Point.setX\nString getSimpleName();//setX\nClass<?>[] getParameterTypes() ;按照声明顺序返回 Class 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型。\ninvoke(Object obj,参数列表)\njava.lang.reflect.Array\n利用反射技术获取数组的长度/数组的组件类型/根据下标获取值")])])}),[],!1,null,null,null);a.default=s.exports}}]);