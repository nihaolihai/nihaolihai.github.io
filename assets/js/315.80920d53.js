(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{809:function(e,n,r){"use strict";r.r(n);var t=r(6),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"微服务是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微服务是什么"}},[e._v("#")]),e._v(" 微服务是什么")]),e._v(" "),r("p",[e._v("微服务架构：\n独立进程，轻量级，独立部署，可以理解为一个一个具体的落地功能\n服务注册与发现，服务调用，服务熔断，负载均衡，服务降级，服务消息队列\nspringcloud：分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的几何体，\n俗称微服务全家桶。")]),e._v(" "),r("p",[e._v("springboot以数字为版本，springcloud以字母为板门")]),e._v(" "),r("p",[e._v("github源码："),r("a",{attrs:{href:"https://github.com/spring-projects/spring-boot",target:"_blank",rel:"noopener noreferrer"}},[e._v("github源码"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("spring官网依赖："),r("a",{attrs:{href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"}},[e._v("spring官网依赖"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("服务注册中心：eureka(挂)、zookeeper、consul、nacos")]),e._v(" "),r("p",[e._v("服务调用：ribbon、loadbalancer、openfeign(feign挂)")]),e._v(" "),r("p",[e._v("服务降级：hystrix(挂)、resilience4j(国外)、sentienl(国内,springcloud>alibaba)")]),e._v(" "),r("p",[e._v("服务网关：zuul(挂)、gateway")]),e._v(" "),r("p",[e._v("服务配置：config(挂)、Apollo、nacos")]),e._v(" "),r("p",[e._v("服务总线：bus(挂)、nacos(自动配置)")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("pom.xml\n\n//父工程pom\n<packeges>pom</packeges>\n//子模块\n<module>\ncloud-provier\n<module/>\n\n//版本控制\n<properties>\n<mysql.version>1.5.7</mysql.version>\n</properties>\n")])])]),r("p",[e._v("maven中的depencymanagement元素能让所有在子项目中引用一个依赖而不用显示的\n列出版本号，管理子类版本号\n比如子pom.xml")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependencies>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n</dependencies>\n")])])]),r("p",[e._v("不写版本号用父类的，写了用本身的")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('@Data\n@AllArgsConstructor\n@NotArgsConstructor\npublic class CommoneResult<T>{\n    private Integer code;\n    private String message;\n    pivate T data;\n    //处理data为空\n    public CommoneResult(Integer code,String message){\n        this(code,messgage,null)\n    }\n\n}\n\n通过restTemplete调其他端口接口\n\n出现run dasgboard(显示启动几个)\n选中项目右击选择show in expoler 点击工程名》.ideal>workspace.xml\n打开添加如下\n<component name="RunDashboard">\n<option name="configurationTypes">\n  <set>\n    <option value="SpringBootApplicationConfigurationType" />\n  </set>\n</option>\n </component>\n')])])]),r("p",[e._v("上传本地包\nmvn clean")]),e._v(" "),r("p",[e._v("mvn install")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependency>\n    <groupId>com.demo.springcloud</groupId>\n    <artifactId>cloud-api-commons</artifactId>\n    <version>${project.version}</version>\n</dependency>\n")])])]),r("h2",{attrs:{id:"java工具库hutool"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java工具库hutool"}},[e._v("#")]),e._v(" java工具库hutool")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.hutool.cn/docs/#/",target:"_blank",rel:"noopener noreferrer"}},[e._v("java工具库hutool"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"常用依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用依赖"}},[e._v("#")]),e._v(" 常用依赖")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependencies>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\x3c!-- 图形化 --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n    <version>1.1.10</version>\n</dependency>\n\x3c!--mysql --\x3e\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n\x3c!--openfeign --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n\x3c!--eureka-server --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n\x3c!--java工具库hutool-all --\x3e\n<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.1.0</version>\n</dependency>\n \x3c!--eureka-client --\x3e\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\x3c!--lombok --\x3e\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n</dependency>\n\x3c!--封装实体 --\x3e\n<dependency>\n    <groupId>com.demo.springcloud</groupId>\n    <artifactId>cloud-api-commons</artifactId>\n    <version>${project.version}</version>\n</dependency>\n\x3c!--热部署 --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <scope>runtime</scope>\n    <optional>true</optional>\n</dependency>\n\x3c!--zookeeper --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>\n</dependency>\n\x3c!--gateway 无需加web,actuator依赖 --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n\x3c!--hystrix --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency> \n\x3c!--hystrix-dashboard仪表盘 --\x3e\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n</dependency> \n\x3c!--短信发送--\x3e\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-alicloud-sms</artifactId>\n</dependency>\n</dependencies>\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <configuration>\n          <fork>true</fork>\n          <addResources>true</addResources>\n        </configuration>\n      </plugin>\n    </plugins>\n</build> \n\x3c!--删除多余依赖 --\x3e\n<dependency>\n   <groupId>ms.platform</groupId>\n   <artifactId>ops-rpc-client</artifactId>\n   <version>1.1.7</version>\n   <exclusions>\n      <exclusion>\n         <groupId>ch.qos.logback</groupId>\n         <artifactId>logback-core</artifactId>\n      </exclusion>\n      <exclusion>\n         <groupId>ch.qos.logback</groupId>\n         <artifactId>logback-classic</artifactId>\n      </exclusion>\n   </exclusions>\n</dependency>\n")])])]),r("h2",{attrs:{id:"集群配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集群配置"}},[e._v("#")]),e._v(" 集群配置")]),e._v(" "),r("p",[e._v("C:\\Windows\\System32\\drivers\\etc\\hosts")]),e._v(" "),r("p",[e._v("127.0.0.1       eureka7001.com")]),e._v(" "),r("p",[e._v("127.0.0.1       eureka7002.com")]),e._v(" "),r("p",[e._v("127.0.0.1       eureka7003.com")]),e._v(" "),r("h2",{attrs:{id:"zookeeper注册中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper注册中心"}},[e._v("#")]),e._v(" zookeeper注册中心")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("配置\nspring:\n  #服务别名，注册到zookeeper服务名称\n  application:\n    name: cloud-consumer-order\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n")])])]),r("p",[e._v("关闭防火墙命令：")]),e._v(" "),r("p",[e._v("systemctl stop firewalld")]),e._v(" "),r("p",[e._v("查看防火墙命令：")]),e._v(" "),r("p",[e._v("systemctl status firewalld")]),e._v(" "),r("p",[e._v("查看网络是否连通")]),e._v(" "),r("p",[e._v("ping 127.0.0.1")]),e._v(" "),r("p",[e._v("整合zookeeper连接")]),e._v(" "),r("p",[e._v("zookeeper嘉宝冲突")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependency>\n<groupId>org.springframework.cloud</groupId>\n<artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>\n\x3c!-- 先排除自带的zookeeper3.5.3 --\x3e\n<exclusions>\n<exclusion>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n\x3c!-- 添加zookeeper3.4.9 --\x3e\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.9</version>\n</dependency>\n")])])]),r("p",[e._v("zookeeper服务节点是临时的而不是持久的")]),e._v(" "),r("h2",{attrs:{id:"consul注册中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#consul注册中心"}},[e._v("#")]),e._v(" consul注册中心")]),e._v(" "),r("p",[e._v("下载consul\nhttps://www.consul.io/downloads")]),e._v(" "),r("p",[e._v("安装步骤consul\nhttps://learn.hashicorp.com/consul")]),e._v(" "),r("p",[e._v("consul使用指南\nhttps://www.springcloud.cc/spring-cloud-consul.html")]),e._v(" "),r("p",[e._v("consul是一套开源的分布式服务发现与配置管理系统\n提供了微服务系统中的服务治理，\n配置中心，控制总线等功能，\n这些功能中的每一个都可以根据需要单独使用，\n也可以一起使用以构造全方位网络，\n特性：服务发现，健康检查(支持HTTP，TCP，docker，shell脚本定制化)，\n键值对存储，多数据中心，可视化web界面\nconsul与zookeeper差不多，区别依赖包以配置项")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("依赖\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n</dependency>\n\n配置\nspring:\n    cloud:\n        consul:\n            host: localhost\n            port: 8500\n            discovery:\n                service-name: ${spring.application.name}\n")])])]),r("h2",{attrs:{id:"eureka注册中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka注册中心"}},[e._v("#")]),e._v(" eureka注册中心")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("配置\n服务端\neureka:\n  instance:\n    hostname: eureka7001.com # eureka服务端的实例名称\n  client:\n    #false表示不向注册中心注册自己\n    register-with-eureka: false\n    #false表示自己端就是注册中心，我的职责维护服务实例，并不需要去检索服务\n    fetch-registry: false\n    service-url:\n      #设置eureka server交互的地址服务和注册服务都需要的依赖\n      #单机配置：defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka\n      #指向其他服务\n      defaultZone: http://eureka7002.com:7002/eureka\n      #指向自己服务\n      #defaultZone: http://eureka7001.com:7001/eureka\n  server:\n    #关闭保护机制，保证不可用服务及时被删除\n    enable-self-preservation: false\n    eviction-interval-timer-in-ms: 2000\n  客户端\n  spring:\n    application:\n      name: cloud-order-service # eureka服务端的实例名称\n  \n  eureka:\n    client:\n      #true表示向注册中心注册自己\n      register-with-eureka: true\n      #是否从服务中心抓取已有的注册信息，默认true，单机无所谓，集群必须为true,才能配合ribbon使用负载均衡\n      fetch-registry: true\n      service-url:\n        #设置eureka server交互的地址服务和注册服务都需要的依赖\n        #单机配置：\n        #defaultZone: http://localhost:7001/eureka\n        #集群配置：\n        defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka\n")])])]),r("p",[e._v("主要注解")]),e._v(" "),r("p",[e._v("//eureka服务端")]),e._v(" "),r("p",[e._v("@EnableEurekaServer")]),e._v(" "),r("p",[e._v("//eureka客户端")]),e._v(" "),r("p",[e._v("@EnableEurekaClient")]),e._v(" "),r("p",[e._v("//该注解用于consul或zookeeper作为注册中心注册服务")]),e._v(" "),r("p",[e._v("@EnableDiscoveryClient")]),e._v(" "),r("h2",{attrs:{id:"ribbon服务调用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ribbon服务调用"}},[e._v("#")]),e._v(" ribbon服务调用")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v(' @LoadBalanced//支持负载均衡\n 比如\n @Configuration\n public class ApplicationContextConfig {\n     @Bean\n     @LoadBalanced\n     public RestTemplate getRestTemplate(){\n         return new RestTemplate();\n     }\n }\n 自定义负载均衡\n @Configuration\n public class MyselfRule {\n     @Bean\n     public IRule myrule(){\n         return new RandomRule();//定义随机\n     }\n }\n @SpringBootApplication(exclude = DataSourceAutoConfiguration.class,scanBasePackages={ "com.demo.springcloud"})\n @EnableEurekaClient\n //自定义@RibbonClient(name = "CLOUD-PAYMENT-SERVICE",configuration = MyselfRule.class)\n public class OrderApplication {\n     public static void main(String[] ares){\n         SpringApplication.run(OrderApplication.class,ares);\n     }\n }\n 调用其他服务\n //单机调用\n public static final String PAY_URL = "http://cloud-provider-payment";\n  @Resource\n  private RestTemplate restTemplate;\n  常用方法\n restTemplate.getForObject(PAY_URL+"/payment/get",,)\n restTemplate.getForEntity(PAY_URL+"/payment/get",,)\n restTemplate.postForObject(PAY_URL+"/payment/get",,)\n restTemplate.postForEntity(PAY_URL+"/payment/get",,)\n \n  /**\n      * 获取服务列表\n      * @return\n      */\n     @GetMapping(value = "/payment/getDiscover")\n     public Object getDiscover(){\n         List<String> services = discoveryClient.getServices();\n         StringBuilder sb= new StringBuilder();\n         StringBuilder sbs= new StringBuilder();\n         for (String element:services) {\n             log.info("服务列表信息："+element);\n             sb.append(element+"\\t");\n         }\n         List<ServiceInstance> instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");\n         for (ServiceInstance serviceInstance:instances) {\n             log.info("服务列表信息："+serviceInstance.getServiceId()+"\\t"+serviceInstance.getHost()+"\\t"+serviceInstance.getUri());\n             sbs.append(serviceInstance.getServiceId()+"\\t"+serviceInstance.getHost()+"\\t"+serviceInstance.getUri());\n         }\n         return this.discoveryClient;\n     }\n')])])]),r("h2",{attrs:{id:"openfeign服务调用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#openfeign服务调用"}},[e._v("#")]),e._v(" openfeign服务调用")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('配置\neureka:\n  client:\n    #false表示不向注册中心注册自己\n    register-with-eureka: false\n    service-url:\n      #设置eureka server交互的地址服务和注册服务都需要的依赖\n      #单机配置：defaultZone: http://localhost:7001/eureka\n      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka\nribbon:\n  # 建立连接所用的时间，适用于网络正常连接，两端连接时间\n  ReadTimeout: 5000\n  # 建立连接后从服务端读取到可用资源所需的时间\n  ConnectTimeout: 5000\nlogging:\n  level:\n    #feign日志以什么级别打印哪个接口\n    com.demo.springcloud.service.PaymentFeignService: debug\n\n/**\n * FEIGN日志打印配置\n */\n@Configuration\npublic class FeignConfig {\n\n    @Bean\n    Logger.Level FeignLoggerLevel(){\n        return Logger.Level.FULL;\n    }\n}\n\n@SpringBootApplication\n@EnableFeignClients//开启feign\npublic class OrderOpenfeignMain80 {\n    public static void main(String[] ares){\n        SpringApplication.run(OrderOpenfeignMain80.class,ares);\n    }\n}\n\n@Component\n@FeignClient(value = "CLOUD-PAYMENT-SERVICE")\npublic interface PaymentFeignService {\n\n    /**\n     * 获取信息\n     * @return\n     */\n    @GetMapping(value = "/payment/get/{id}")\n    CommoneResult<Payment> get(@PathVariable("id") Long id);\n\n    /**\n     * 超时调用\n     * @return\n     */\n    @GetMapping(value = "/payment/feign/timeout")\n    String paymentlFeignTimeout();\n}\n\n/**\n * 服务调用\n */\n@RestController\n@Slf4j\npublic class OrderFeignController {\n\n    @Resource\n    private PaymentFeignService paymentFeignService;\n\n    /**\n     * 获取信息\n     * @return\n     */\n    @GetMapping(value = "/consumerfeign/payment/get/{id}")\n    public CommoneResult<Payment> getPaymentInfo(@PathVariable("id") Long id){\n        CommoneResult<Payment> paymentCommoneResult = paymentFeignService.get(id);\n        return paymentCommoneResult;\n    }\n\n    /**\n     * 超时调用\n     * @return\n     */\n    @GetMapping(value = "/consumerfeign/payment/feign/timeout")\n    public String aymentlFeignTimeout(){\n        return paymentFeignService.paymentlFeignTimeout();\n    }\n}\n')])])]),r("h2",{attrs:{id:"hystrix服务降级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix服务降级"}},[e._v("#")]),e._v(" hystrix服务降级")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/Netflix/Hystrix",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hystrix"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("是一个用于处理分布式系统的延迟和容错的开源库，\n在分布式系统里，许多依赖不可避免的会调用失败，\n比如超时，异常等，能够保证在一个一开出问题的情况下，\n不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性，\n断路器：本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，\n向调用方返回一个符合预期的，可处理的备选响应（fallback）,\n而不是长时间的等待或者抛出异常调用方无法捕捉的异常，这样就保证了服务调用方的线程不会\n被长时间。不必要占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。")]),e._v(" "),r("p",[e._v("服务降级\n以下情况出现：\n程序运行异常、超时、服务熔断触发服务降级、线程池/信号量打满也会导致服务降级")]),e._v(" "),r("p",[e._v("提供者")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("依赖\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n")])])]),r("p",[e._v("消费方需要加")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n")])])]),r("p",[e._v("@EnableCircuitBreaker//开启服务降级")]),e._v(" "),r("p",[e._v("//降级注解，加方法上，注意改value需要重启服务")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('@HystrixCommand(fallbackMethod = "paymentInfoErroHander",commandProperties = {\n@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "3000")\n})\n public String paymentInfoErro(Integer id){\n            //计算异常\n            //int age = 10/0;\n            //超时异常\n    //        try {\n    //            Integer TIME = 1;\n    //            TimeUnit.SECONDS.sleep(TIME);\n    //        }catch (InterruptedException e){\n    //            e.printStackTrace();\n    //        }\n            return "线程池："+Thread.currentThread().getName()+"paymentInfoErro："+id;\n        }\n/**\n * 服务降级处理\n */\npublic String paymentInfoErroHander(Integer id){\n    return "线程池："+Thread.currentThread().getName()+"paymentInfoErroHander："+id+"\\t"+"请稍后再试！";\n}\n\nsleep interrupted杀死进程\n')])])]),r("p",[e._v("消费者")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("依赖\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n\n@EnableHystrix//开启Hystrix\n")])])]),r("p",[e._v("//降级注解，加方法上，注意改value需要重启服务，自定义捕捉，若配置全局且加自定义捕捉，就会捕捉本身异常")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('@HystrixCommand(fallbackMethod = "orderInfoErroHander",commandProperties = {\n    @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")\n    })\n/**\n     * 服务降级处理\n     */\n    public String orderInfoErroHander(Integer id){\n        return "消费方超时，请稍后再试！";\n    }\n')])])]),r("p",[e._v('全局捕捉\ncontroller类上加\n@DefaultProperties(defaultFallback = "globalOrderInfoErroHander")')]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('/**\n * 全部超时捕捉\n * @param id\n * @return\n */\n@GetMapping(value = "/order/hystrix/globalpaymenterr/{id}")\n@HystrixCommand\npublic String paymentInfoGlobalErro(@PathVariable("id")  Integer id){\n    return paymentFeignService.paymentInfoErro(id);\n}\n\n /**\n     * 全局服务降级处理\n     */\n    public String globalOrderInfoErroHander(){\n        return "全局消费方超时，请稍后再试！";\n    }\n')])])]),r("p",[e._v("宕机处理异常")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v(' @Component\n @FeignClient(value = "CLOUD-PAYMENT-HYSTRIX",fallback = PaymentFallHystrixService.class)\n public interface PaymentHystrixService {\n\n     @GetMapping(value = "/hystrix/paymentok/{id}")\n     String paymentInfoOK(@PathVariable("id")  Integer id);\n\n     @GetMapping(value = "/hystrix/paymenterr/{id}")\n     String paymentInfoErro(@PathVariable("id")  Integer id);\n }\n\n /**\n  * 同意捕捉异常超时，宕机\n  */\n @Component\n public class PaymentFallHystrixService implements PaymentHystrixService {\n\n     @Override\n     public String paymentInfoOK(Integer id) {\n         return "paymentInfoOK正常";\n     }\n\n     @Override\n     public String paymentInfoErro(Integer id) {\n         return "paymentInfoErro失败";\n     }\n }\n')])])]),r("p",[e._v("服务熔断：类似家里的保险丝，达到最大阈值\n规则：服务降级=》服务熔断=》恢复调用链路")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.martinfowler.com/bliki/CircuitBreaker.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("服务熔断"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('@HystrixCommand(fallbackMethod = "paymentCircuitBreakerfallback",commandProperties = {\n         @HystrixProperty(name = "circuitBreaker.enabled",value = "true"),//是否开启断路器\n         @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10"),//请求次数超过峰值，熔断器将会从关闭到开启\n         @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000"),//时间窗口期\n         @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "60"),//失败率达到多少值跳闸\n })\n public String paymentCircuitBreaker(@PathVariable("id") Integer id){\n     if(id<0){\n         throw new RuntimeException("****id不能为负数");\n     }\n     return Thread.currentThread().getName()+"调用成功，流水号："+IdUtil.simpleUUID();\n }\n public String paymentCircuitBreakerfallback(@PathVariable("id") Integer id){\n\n     return "****id不能为负数，请稍后再试！"+"\\t"+"id："+id;\n }\n \n 熔断配置\n  Command Properties\n  Execution相关的属性的配置：\n  hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n \n  hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds 命令执行超时时间，默认1000ms\n \n  hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n  hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n  hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\n  semaphore应该占整个容器（tomcat）的线程池的一小部分。\n  Fallback相关的属性\n  这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n \n  hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests 如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n  hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n  Circuit Breaker相关的属性\n  hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n  hystrix.command.default.circuitBreaker.requestVolumeThreshold 一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n  hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n  hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n  hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n  hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n  Metrics相关参数\n  hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n  hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n  hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n  hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds 设置rolling percentile window的时间，默认60000\n  hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n  hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n  hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds 记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n  Request Context 相关参数\n  hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\n  hystrix.command.default.requestLog.enabled 记录日志到HystrixRequestLog，默认true\n \n  Collapser Properties 相关参数\n  hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\n  hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\n  hystrix.collapser.default.requestCache.enabled 是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n \n  ThreadPool 相关参数\n  线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\n  requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n  每秒最大支撑的请求数 (99%平均响应时间 + 缓存值)\n  比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n  （0.060+0.012）\n \n  基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n  当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n  hystrix.threadpool.default.coreSize 并发执行的最大线程数，默认10\n  hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n  hystrix.threadpool.default.queueSizeRejectionThreshold 即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n  hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n  hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n  hystrix.threadpool.default.metrics.rollingStats.numBuckets 将rolling window划分为n个buckets，默认10\n')])])]),r("p",[e._v("服务限流：秒杀高并发等操作(sentinel)")]),e._v(" "),r("h2",{attrs:{id:"hystrix仪表盘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix仪表盘"}},[e._v("#")]),e._v(" hystrix仪表盘")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v(" 依赖\n <dependency>\n     <groupId>org.springframework.cloud</groupId>\n     <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n </dependency>\n @EnableHystrixDashboard//开启hystrix仪表盘\n \n 输入地址\n http://localhost:9001/hystrix\n 发送请求查看压力情况\n http://localhost:8001/hystrix.stream\n")])])]),r("h2",{attrs:{id:"服务网关gateway"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务网关gateway"}},[e._v("#")]),e._v(" 服务网关gateway")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://spring.io/projects/spring-cloud-gateway#learn",target:"_blank",rel:"noopener noreferrer"}},[e._v("服务网关gateway"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("提供一种简单而有效的方式来对api进行路由，以及提供一些强大的过滤功能，\n比如：熔断、限流、重试等")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('移除web依赖\n依赖\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n配置\nserver:\n  port: 9527\n\nspring:\n  #禁用缓存\n  thymeleaf:\n    cache: false\n  application:\n    name: cloud-gateway-service\n  cloud:\n    gateway:\n      routes:\n        - id: payment_routh\n          uri: http://localhost:8001\n          predicates:\n            - Path=/payment/get/**\n\n        - id: payment_routh2\n          uri: http://localhost:8001\n          predicates:\n            - Path=/payment/getPaymentlb/**\n\neureka:\n  instance:\n    hostname: gateway9527\n  client:\n    #true表示向注册中心注册自己\n    register-with-eureka: true\n    #是否从服务中心抓取已有的注册信息，默认true，单机无所谓，集群必须为true,才能配合ribbon使用负载均衡\n    fetch-registry: true\n    service-url:\n      #设置eureka server交互的地址服务和注册服务都需要的依赖\n      #单机配置\n      defaultZone: http://localhost:7001/eureka\n      #集群配置\n      #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka\n\n/**\n * 根据网关做路由配置\n */\n@Configuration\npublic class GatewayConfig {\n\n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder){\n        RouteLocatorBuilder.Builder builder = routeLocatorBuilder.routes();\n        builder.route("path_route",r ->r.path("/guonei").uri("http://news.baidu.com/guonei")).build();\n        return builder.build();\n    }\n\n    @Bean\n    public RouteLocator customRouteLocators(RouteLocatorBuilder routeLocatorBuilder){\n        RouteLocatorBuilder.Builder builder = routeLocatorBuilder.routes();\n        builder.route("path_routes",r ->r.path("/guoji").uri("http://news.baidu.com/guoji")).build();\n        return builder.build();\n    }\n}\n\nhttp://news.baidu.com/\n')])])]),r("p",[e._v("能干什么：反向代理、鉴权、流量控制、熔断、日志监控\n三大核心：route(路由)、predicate(断言)、filter(过滤)\n添加动态配置路由")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v(' https://spring.io/projects/spring-cloud-gateway#learn\n 提供一种简单而有效的方式来对api进行路由，以及提供一些强大的过滤功能，\n 比如：熔断、限流、安全、重试等\n 移除web依赖\n 依赖\n  <dependency>\n     <groupId>org.springframework.cloud</groupId>\n     <artifactId>spring-cloud-starter-gateway</artifactId>\n </dependency>\n 配置\n server:\n   port: 9527\n \n spring:\n   #禁用缓存\n   thymeleaf:\n     cache: false\n   application:\n     name: cloud-gateway-service\n   cloud:\n     gateway:\n       discovery:\n         locator:\n           enabled: true #开启从注册中心动态创建路由的功能，利用微服务名称进行路由\n       routes:\n         - id: payment_routh # 路由的ID，没有规定规则但要求唯一\n           #uri: http://localhost:8001 # 匹配后提供服务的路由地址\n           uri: lb://cloud-payment-service # 提供者服务名称\n           predicates:\n             - Path=/payment/get/** # 断言，路径匹配的进行路由\n \n         - id: payment_routh2 # 路由的ID，没有规定规则但要求唯一\n           #uri: http://localhost:8001 # 匹配后提供服务的路由地址\n           uri: lb://cloud-payment-service # 提供者服务名称\n           predicates:\n             - Path=/payment/getPaymentlb/**  # 断言，路径匹配的进行路由\n\n eureka:\n   instance:\n     hostname: gateway9527\n   client:\n     #true表示向注册中心注册自己\n     register-with-eureka: true\n     #是否从服务中心抓取已有的注册信息，默认true，单机无所谓，集群必须为true,才能配合ribbon使用负载均衡\n     fetch-registry: true\n     service-url:\n       #设置eureka server交互的地址服务和注册服务都需要的依赖\n       #单机配置\n       defaultZone: http://localhost:7001/eureka\n       #集群配置\n       #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka\n \n http://news.baidu.com/\n \n /**\n  * 根据网关做路由配置\n  */\n @Configuration\n public class GatewayConfig {\n \n     @Bean\n     public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder){\n         RouteLocatorBuilder.Builder builder = routeLocatorBuilder.routes();\n         builder.route("path_route",r ->r.path("/guonei").uri("http://news.baidu.com/guonei")).build();\n         return builder.build();\n     }\n \n     @Bean\n     public RouteLocator customRouteLocators(RouteLocatorBuilder routeLocatorBuilder){\n         RouteLocatorBuilder.Builder builder = routeLocatorBuilder.routes();\n         builder.route("path_routes",r ->r.path("/guoji").uri("http://news.baidu.com/guoji")).build();\n         return builder.build();\n     }\n }\n\n 访问 \n http://localhost:9527/payment/getPaymentlb\n http://localhost:9527/guoji\n 官网\n https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.0.RELEASE/reference/html/\n 断言：\n ZonedDateTime.now();\n - After=2020-11-10T20:30:07.417+08:00[Asia/Shanghai] #断言，时间在这之后才能执行\n - Before=2020-11-10T20:30:07.417+08:00[Asia/Shanghai] #断言，时间在这之前才能执行\n - Between=2020-11-10T20:30:07.417+08:00[Asia/Shanghai],2020-12-10T20:30:07.417+08:00[Asia/Shanghai] #Between 时间在这之间才能执行\n - Cookie=username,zzyy #Cookie 请求需要带上cookie[key,value正则匹配]\n 测试\n curl http://localhost:9527/payment/lb --cookie "username=zzyy"\n - Header=X-Request-Id, \\d+  #Header 请求头需要有X-Request-Id属性名,值为整数正则表达式\n 测试\n curl http://localhost:9527/payment/lb -H "X-Request-Id:1234"\n - Host=**.atguigu.com #Host 域名匹配\n - Method=GET #Method 方法请求方式匹配\n - Query=username, \\d+  #必须带有参数名usernamem，且值为正整数\n\n自定义路由谓词工厂\n@Component\npublic class TimeBetweenRoutePredicateFactory extends AbstractRoutePredicateFactory {\n    public TimeBetweenRoutePredicateFactory() {\n        super(TimeBetweenConfig.class);\n    }\n\n    @Override\n    public Predicate apply(TimeBetweenConfig config) {\n        LocalTime start = config.getStart();\n        LocalTime end = config.getEnd();\n        return serverWebExchange -> {\n            LocalTime now = LocalTime.now();\n            return now.isAfter(start) && now.isBefore(end);\n        };\n    }\n\n    @Override\n    public List shortcutFieldOrder() {\n        return Arrays.asList("start","end");\n    }\n}\n\n@Data\nclass TimeBetweenConfig {\n    private LocalTime start;\n    private LocalTime end;\n}\n\n\n 过滤\n /**\n  * 自定义过滤器\n  */\n @Component\n public class MyGobalFilter implements GlobalFilter, Ordered {\n \n     @Override\n     public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n         String uname = exchange.getRequest().getQueryParams().getFirst("uname");\n         if(uname==null){\n             System.out.println("用户名为空");\n             exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);\n             return exchange.getResponse().setComplete();\n         }\n         return chain.filter(exchange);\n     }\n \n     @Override\n     public int getOrder() {\n         return 0;\n     }\n }\n或者\n@Slf4j\n@Component\npublic class PreLogGatewayFilterFactory extends AbstractNameValueGatewayFilterFactory {\n    public PreLogGatewayFilterFactory() {\n    }\n\n    public GatewayFilter apply(NameValueConfig config) {\n        GatewayFilter filter = (((exchange, chain) -> {\n            log.info("请求进来了...{}={}",config.getName(),config.getValue());\n            ServerHttpRequest modifiedRequest = exchange.getRequest().mutate().build();\n            ServerWebExchange modifiedExchange = exchange.mutate().request(modifiedRequest).build();\n            return chain.filter(modifiedExchange);\n        }));\n        return new OrderedGatewayFilter(filter,1000);\n    }\n}\n')])])]),r("h2",{attrs:{id:"分布式配置中心config"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式配置中心config"}},[e._v("#")]),e._v(" 分布式配置中心config")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("集中配置文件")])]),e._v(" "),r("li",[r("p",[e._v("不同环境不同配置，动态化配置更新，分环境部署")])]),e._v(" "),r("li",[r("p",[e._v("比如\n1.dev\n2.test\n3.pro\n4.beta\n5.release")])]),e._v(" "),r("li",[r("p",[e._v("运行期间动态调整配置，不在需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息")])]),e._v(" "),r("li",[r("p",[e._v("当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的的配置")])]),e._v(" "),r("li",[r("p",[e._v("将配置信息以REST接口的形式暴露")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('依赖\n\n <dependencies>\n   \x3c!--config-server --\x3e\n  <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-config-server</artifactId>\n  </dependency>\n  \x3c!--eureka-client --\x3e\n  <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n  </dependency>\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  \x3c!-- 图形化 --\x3e\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n  </dependency>\n  \x3c!--热部署 --\x3e\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n      <scope>runtime</scope>\n      <optional>true</optional>\n  </dependency>\n  \x3c!--lombok --\x3e\n  <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <optional>true</optional>\n  </dependency>\n </dependencies>\n\n `配置\n \n spring:\n #服务别名，注册到eureka服务名称\n application:\n     name: cloud-config-service\n cloud:\n     config:\n     server:\n         git:\n         uri: https://github.com/nihaolihai/springcloud-config.git\n         search-paths:\n             - springcloud-config\n     label: master\n \n eureka:\n client:\n     service-url:\n     defaultZone: http://localhost:7001/eureka\n \n 启动类\n @SpringBootApplication\n @EnableEurekaClient//开启eureka客户端\n @EnableConfigServer//开启配置中心服务\n public class ConfigMain3344 {\n \n     public static void main(String[] ares){\n         SpringApplication.run(ConfigMain3344.class,ares);\n     }\n }\n \n 访问\n http://config-3344.com:3344/config-test.yml\n 或者\n http://config-3344.com:3344/config/test\n \n 客户端\n application.yml是用户级的资源配置项\n boostrap.yml是系统级的，优先级更高\n \n 依赖`\n\n     <dependencies>\n     \x3c!--config --\x3e\n     <dependency>\n         <groupId>org.springframework.cloud</groupId>\n         <artifactId>spring-cloud-starter-config</artifactId>\n         <version>2.2.2.RELEASE</version>\n     </dependency>\n     <dependency>\n         <groupId>org.springframework.cloud</groupId>\n         <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n     </dependency>\n     <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-web</artifactId>\n     </dependency>\n     \x3c!-- 图形化 --\x3e\n     <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-actuator</artifactId>\n     </dependency>\n     \x3c!--热部署 --\x3e\n     <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-devtools</artifactId>\n         <scope>runtime</scope>\n         <optional>true</optional>\n     </dependency>\n </dependencies>\n\n 配置\n \n bootstrap.yml\n server:\n port: 3355\n \n spring:\n #服务别名，注册到eureka服务名称\n application:\n     name: cloud-config-client\n cloud:\n     config:\n     label: master # 分支名称\n     name: config # 配置文件名称\n     profile: dev # 读取后缀名称\n     uri: http://localhost:3344 # 配置中心地址\n \n eureka:\n client:\n     service-url:\n     defaultZone: http://localhost:7001/eureka\n \n eureka:\n client:\n     service-url:\n     defaultZone: http://localhost:7001/eureka\n \n 启动类\n @SpringBootApplication\n @EnableEurekaClient\n public class ConfigClient3355 {\n     public static void main(String[] ares){\n         SpringApplication.run(ConfigClient3355.class,ares);\n     }\n }\n \n 在controller加@RefreshScope注解\n \n @RestController\n @RefreshScope\n public class ConfigController {\n \n     @Value("${config.info}")\n     private String serverinfo;\n \n     @GetMapping(value = "/configinfo")\n     public String getServerInfo(){\n         return serverinfo;\n     }\n }\n')])])]),r("p",[e._v("访问\nhttp://localhost:3355/configinfo")]),e._v(" "),r("p",[e._v("手动改配置中心服务端信息\n需手动调post去刷新")]),e._v(" "),r("p",[e._v('curl -X POST "http://localhost:3355/actuator/refresh"\n想自动获取最新的配置则要用到消息总线bus')])])]),e._v(" "),r("h2",{attrs:{id:"消息总线bus-支持rabbit-kafka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息总线bus-支持rabbit-kafka"}},[e._v("#")]),e._v(" 消息总线bus,支持rabbit,kafka")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v(' rabbitmq\n安装erlang\nhttp://erlang.org/download/otp_win64_21.3.exe\n安装好erlang环境后才能使用rabbitmq\n下载rabbitmq\nhttps://www.rabbitmq.com/download.html\ncd sbin\n执行：rabbitmq-plugins enable rabbitmq_management\n输入http://127.0.0.1:15672/\n常用命令\n关闭MQ rabbitmqctl stop\n使用命令添加用户并授权\n添加用户\nrabbitmqctl add_user admin admin\n设置permissions\nrabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"\n设置用户角色\nrabbitmqctl set_user_tags admin administrator\n查看新添加的admin\nrabbitmqctl list_users\n查看用于的权限\nrabbitmqctl list_permissions -p /\n\n\x3c!-- rabbitmq --\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-bus-amqp</artifactId>\n</dependency>\n\n服务端添加配置\nrabbitmq:\n  host: localhost\n  port: 5672\n  username: guest\n  password: guest\n  \n暴露配置bus刷新的端点\nmanagement:\n    endpoints:\n    web:\n        exposure:\n            include: \'bus-refresh\'\n            \n客户端\n\n在controller加@RefreshScope注解\n\nrabbitmq配置\n  rabbitmq:\n    host: localhost\n    port: 5672\n    username: guest\n    password: guest\n    \nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n\n需手动调post去刷新\ncurl -X POST "http://localhost:3344/bus-refresh"\n一次请求全部通知，广播式  \n通知指定一个实例\ncurl -X POST "http://localhost:3344/actuator/bus-refresh/cloud-config-client:3355" \n')])])]),r("h2",{attrs:{id:"消息驱动-stream"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息驱动-stream"}},[e._v("#")]),e._v(" 消息驱动 stream")]),e._v(" "),r("p",[e._v("屏蔽底层消息中间件的差异，降低切换成本，\n统一线下的编程模型")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('依赖\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \x3c!-- 图形化 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n</dependencies>\n\n配置\nspring:\n  application:\n    name: cloud-provider-rabbitmq\n  cloud:\n    stream:\n      binders: #在此绑定rabbitmq的服务信息\n        defaultRabbit: #表示定义的名称，相当于binder整合\n          type: rabbit #消息组件类型\n          environment: #设置rabbitmq的相关的环境配置\n            spring:\n              rabbitmq:\n                host: localhost\n                port: 5672\n                username: guest\n                password: guest\n      bindings: #服务的整合处理\n      # input: #这个名字是一个消费者通道的名称\n        output: #这个名字是一个提供者通道的名称\n          destination: studyExchange #表示要使用的exchange名称定义\n          content-type: application/json #设置信息类型，本次为json,文本则设置“text/plain”\n          binder: defaultRabbit #设置要绑定的信息服务的具体设置\n\t\t  #group: cosum8901\n\t\t  group: cosum8902\n\n\neureka:\n  client:\n    #true表示向注册中心注册自己\n    register-with-eureka: true\n    #是否从服务中心抓取已有的注册信息，默认true，单机无所谓，集群必须为true,才能配合ribbon使用负载均衡\n    fetch-registry: true\n    service-url:\n      #设置eureka server交互的地址服务和注册服务都需要的依赖\n      #单机配置：\n      defaultZone: http://localhost:7001/eureka\n      #集群设置\n      #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka\n  instance:\n    instance-id: send-8801.com\n    prefer-ip-address: true #显示主机IP显示\n    #eureka客户端向服务端发送心跳的时间间隔，单位为妙(默认30s)\n    lease-renewal-interval-in-seconds: 2\n    #eureka服务端在收到最后一次心跳后等待时间上限，单位为妙(默认90s)，超时将剔除服务\n    lease-expiration-duration-in-seconds: 5\n    \n@EnableBinding(Source.class)//定义消息的推送管道\npublic class ProviderMQServiceImpl implements ProviderMQService {\n\n    @Resource\n    private MessageChannel output;//消息发送官大\n\n    /**\n     * 发送信息\n     * @return\n     */\n    @Override\n    public String send() {\n        String value = UUID.randomUUID().toString();\n        output.send(MessageBuilder.withPayload(value).build());\n        return value;\n    }\n}\n调用\n@RestController\npublic class ProviderMQController {\n\n    @Resource\n    private ProviderMQService providerMQService;\n\n    @GetMapping(value = "provider/send")\n    public String send(){\n        return providerMQService.send();\n    }\n}\n消费者\n@Component\n@EnableBinding(Sink.class)//定义消息的消费管道\npublic class ProviderMQController {\n\n    @Value("${server.port}")\n    private String serverport;\n\n    @StreamListener(Sink.INPUT)\n    public void receive(Message<String> message){\n        System.out.println(message.getPayload());\n    }\n}\n\n如何解决重复性消费?\n需要用到group: cosum8902\n')])])]),r("h2",{attrs:{id:"分布式请求链路跟踪-sleuth"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式请求链路跟踪-sleuth"}},[e._v("#")]),e._v(" 分布式请求链路跟踪 sleuth")]),e._v(" "),r("p",[e._v("提供一套服务跟踪的解决方案\nspringcloud从F版起已不需要构建zipkin sever,只需调用jar包即可。\n下载zipkin(2.12.9/zipkin-server-2.12.9-exec.jar)")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载zipkin(2.12.9/zipkin-server-2.12.9-exec.jar)"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("运行：java -jar zipkin-server-2.12.9-exec.jar")]),e._v(" "),r("p",[e._v("访问：localhost:9411/zipkin/")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("依赖\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n\n配置\nspring:\n    zipkin:\n        base-url: http://localhost:9411\n    sleuth:\n      sampler:\n        probability: 1 #采样率值介于0和1，1代表全部采集\n")])])]),r("p",[e._v("“微服务”一词来源于 Martin Fowler 的《Microservices》一文。微服务是一种架构风格，即将单体应用划分为小型的服务单元，微服务之间使用 HTTP 的 API 进行资源访问与操作。")]),e._v(" "),r("p",[e._v("在笔者看来，微服务架构的演变更像是一个公司的发展过程，从最开始的小公司，到后来的大集团。大集团可拆分出多个子公司，每个子公司的都有自己独立的业务、员工，各自发展，互不影响，合起来则是威力无穷。\n臃肿的系统、重复的代码、超长的启动时间带给开发人员的只有无限的埋怨，丝毫没有那种很舒服的、很流畅的写代码的感觉。他们把大部分时间都花在解决问题和项目启动上面了。\n微服务架构的优势\n使用微服务架构能够为我们带来如下好处：")]),e._v(" "),r("p",[e._v("1）服务的独立部署\n每个服务都是一个独立的项目，可以独立部署，不依赖于其他服务，耦合性低。")]),e._v(" "),r("p",[e._v("2）服务的快速启动\n拆分之后服务启动的速度必然要比拆分之前快很多，因为依赖的库少了，代码量也少了。")]),e._v(" "),r("p",[e._v("3）更加适合敏捷开发\n敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行。服务拆分可以快速发布新版本，修改哪个服务只需要发布对应的服务即可，不用整体重新发布。")]),e._v(" "),r("p",[e._v("4）职责专一，由专门的团队负责专门的服务\n业务发展迅速时，研发人员也会越来越多，每个团队可以负责对应的业务线，服务的拆分有利于团队之间的分工。")]),e._v(" "),r("p",[e._v("5）服务可以动态按需扩容\n当某个服务的访问量较大时，我们只需要将这个服务扩容即可。")]),e._v(" "),r("p",[e._v("6）代码的复用\n每个服务都提供 REST API，所有的基础服务都必须抽出来，很多的底层实现都可以以接口方式提供。\n微服务架构的劣势\n微服务其实是一把双刃剑，既然有利必然也会有弊。下面我们来谈谈微服务有哪些弊端，")]),e._v(" "),r("p",[e._v("以及能采取什么办法避免。")]),e._v(" "),r("p",[e._v("1）分布式部署，调用的复杂性高\n单体应用的时候，所有模块之前的调用都是在本地进行的，在微服务中，每个模块都是独立部署的，通过 HTTP 来进行通信，这当中会产生很多问题，比如网络问题、容错问题、调用关系等。")]),e._v(" "),r("p",[e._v("2）独立的数据库，分布式事务的挑战\n每个微服务都有自己的数据库，这就是所谓的去中心化的数据管理。这种模式的优点在于不同的服务，可以选择适合自身业务的数据，比如订单服务可以用 MySQL、评论服务可以用 Mongodb、商品搜索服务可以用 Elasticsearch。")]),e._v(" "),r("p",[e._v("缺点就是事务的问题了，目前最理想的解决方案就是柔性事务中的最终一致性，后面的章节会给大家做具体介绍。")]),e._v(" "),r("p",[e._v("3）测试的难度提升\n服务和服务之间通过接口来交互，当接口有改变的时候，对所有的调用方都是有影响的，这时自动化测试就显得非常重要了，如果要靠人工一个个接口去测试，那工作量就太大了。这里要强调一点，就是 API 文档的管理尤为重要。")]),e._v(" "),r("p",[e._v("4）运维难度的提升\n在采用传统的单体应用时，我们可能只需要关注一个 Tomcat 的集群、一个 MySQL 的集群就可以了，但这在微服务架构下是行不通的。当业务增加时，服务也将越来越多，服务的部署、监控将变得非常复杂，这个时候对于运维的要求就高了。")])])}),[],!1,null,null,null);n.default=a.exports}}]);