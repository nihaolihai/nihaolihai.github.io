(window.webpackJsonp=window.webpackJsonp||[]).push([[417],{905:function(e,n,r){"use strict";r.r(n);var t=r(6),s=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-mvc数据绑定和表单标签的应用-附带实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc数据绑定和表单标签的应用-附带实例"}},[this._v("#")]),this._v(" Spring MVC数据绑定和表单标签的应用（附带实例）")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('为了让读者进一步学习数据绑定和表单标签，本节给出了一个应用范例 springMVCDemo04。该应用中实现了 User 类属性和 JSP 页面中表单参数的绑定，同时在 JSP 页面中分别展示了 input、textarea、checkbox、checkboxs、select 等标签。\n应用的相关配置\n在 springMVCDemo04 应用中需要使用 JSTL，因此不仅需要将 Spring MVC 的相关 JAR 包复制到应用的 WEN-INF/lib 目录下，还需要从 Tomcat 的 webapps\\examples\\WEB-INF\\lib 目录下将 JSTL 的相关 JAR 包复制到应用的 WEN-INF/lib 目录下。\n\nspringMVCDemo04 的 JAR 包如图 1 所示。\nspringMVCDemo04的JAR包\n图 1  springMVCDemo04的JAR包\n\n为了避免出现中文乱码问题，需要在 web.xml 文件中增加编码过滤器，同时将 JSP 页面编码设置为 UTF-8，form 表单的提交方式必须为 post。\n\nweb.xml 的代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n    xmlns="http://java.sun.com/xml/ns/javaee" \n    xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" \n    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">\n    \x3c!--配置DispatcherServlet--\x3e\n    <servlet>\n        <servlet-name>springmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>springmvc</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n    \x3c!--避免中文乱码--\x3e\n    <filter>\n        <filter-name>encodingFilter</filter-name>\n        <filter-class>\n             org.springframework.web.filter.CharacterEncodingFilter\n        </filter-class>\n    <init-param>\n        <param-name>encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n        <param-name>forceEncoding</param-name>\n        <param-value>true</param-value>\n    </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>encodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n配置文件 springmvc-servlet.xml 与教程前面的示例中学习过的配置文件没有区别，这里不再赘述。\n领域模型\n应用中实现了 User 类属性和 JSP 页面中表单参数的绑定，User 类包含了和表单参数名对应的属性，以及属性的 set 和 get 方法。在 springMVCDemo04 应用的 src 目录下创建 pojo 包，并在该包中创建 User 类。\n\nUser 类的代码如下：\npackage pojo;\npublic class User {\n    private String userName;\n    private String[] hobby; // 兴趣爱好\n    private String[] friends; // 朋友\n    private String carrer;\n    private String houseRegister;\n    private String remark;\n    // 省略setter和getter方法\n}\nService 层\n应用中使用了 Service 层，在 Service 层使用静态集合变量 users 模拟数据库存储用户信息，包括添加用户和查询用户两个功能方法。在 springMVCDemo04 应用的 src 目录下创建 service 包，并在该包中创建 UserService 接口和 UserServiceImpl 实现类。\n\nUserService 接口的代码如下：\npackage service;\nimport java.util.ArrayList;\nimport pojo.User;\npublic interface UserService {\n    boolean addUser(User u);\n    ArrayList<User> getUsers();\n}\nUserServiceImpl 实现类的代码如下：\npackage service;\nimport java.util.ArrayList;\nimport pojo.User;\n@Service\npublic class UserServiceImpl implements UserService {\n    // 使用静态集合变量users模拟数据库\n    private static ArrayList<User> users = new ArrayList<User>();\n    @Override\n    public boolean addUser(User u) {\n        if (!"IT民工".equals(u.getCarrer())) { // 不允许添加IT民工\n            users.add(u);\n            return true;\n        }\n        return false;\n    }\n    @Override\n    public ArrayList<User> getUsers() {\n        return users;\n    }\n}\nController 层\n在 Controller 类 UserController 中定义了请求处理方法，包括处理 user/input 请求的 inputUser 方法以及处理 user/save 请求的 addUser 方法，其中在 addUser 方法中用到了重定向。\n\n在 UserController 类中，通过 @Autowired 注解在 UserController 对象中主动注入 UserService 对象，实现对 user 对象的添加和查询等操作。\n\n通过 model 的 addAttribute 方法将 User 类对象、HashMap 类型的 hobbys 对象、String[] 类型的 carrers 对象以及 String[] 类型的 houseRegisters 对象传递给 View（userAdd.jsp）。\n\n在 springMVCDemo04 应用的 src 目录下创建 controller 包，并在该包中创建 UserController 控制器类。\n\nUserController 类的代码如下：\npackage controller;\nimport java.util.HashMap;\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport pojo.User;\nimport service.UserService;\n@Controller\n@RequestMapping("/user")\npublic class UserController {\n    // 得到一个用来记录日志的对象,这样在打印信息的时候能够标记打印的是哪个类的信息\n    private static final Log logger = LogFactory.getLog(UserController.class);\n    @Autowired\n    private UserService userService;\n    @RequestMapping(value = "/input")\n    public String inputuser(Model model) {\n        HashMap<String, String> hobbys = new HashMap<String, String>();\n        hobbys.put("篮球", "篮球");\n        hobbys.put("乒乓球", "乒乓球");\n        hobbys.put("电玩", "电玩");\n        hobbys.put("游泳", "游泳");\n        // 如果model中没有user属性，userAdd.jsp会抛出异常，因为表单标签无法找到\n        // modelAttribute 属性指定的 form backing object\n        model.addAttribute("user", new User());\n        model.addAttribute("hobbys", hobbys);\n        model.addAttribute("carrers", new String[] { "教师", "学生", "coding 搬运工",\n                "IT民工", "其他" });\n        model.addAttribute("houseRegisters", new String[] { "北京", "上海", "广州",\n                "深圳", "其他" });\n        return "userAdd";\n    }\n    @RequestMapping(value = "/save")\n    public String addUser(@ModelAttribute User user, Model model) {\n        if (userService.addUser(user)) {\n            logger.info("成功");\n            return "redirect:/user/list";\n        } else {\n            logger.info("失败");\n            HashMap<String, String> hobbys = new HashMap<String, String>();\n            hobbys.put("篮球", "篮球");\n            hobbys.put("乒乓球", "乒乓球");\n            hobbys.put("电玩", "电玩");\n            hobbys.put("游泳", "游泳");\n            // 这里不需要 model.addAttribute ("user", new User ()),因为 @ModelAttribute\n            // 指定 form backing object\n            model.addAttribute("hobbys", hobbys);\n            model.addAttribute("carrers", new String[] { "教师", "学生",\n                    " coding搬运工", "IT民工", "其他" });\n            model.addAttribute("houseRegisters", new String[] { "北京", "上海",\n                    "广州", "深圳", "其他" });\n            return "userAdd";\n        }\n    }\n    @RequestMapping(value = "/list")\n    public String listUsers(Model model) {\n        List<User> users = userService.getUsers();\n        model.addAttribute("users", users);\n        return "userList";\n    }\n}\nView 层\nView 层包含两个 JSP 页面，一个是信息输入页面 userAdd.jsp，一个是信息显示页面 userList.jsp。在 springMVCDemo04 应用的 WEB-INF/jsp 目录下创建这两个 JSP 页面。\n\n在 userAdd.jsp 页面中将 Map 类型的 hobbys 绑定到 checkboxes 上，将 String[] 类型的 carrers 和 houseRegisters 绑定到 select 上，实现通过 option 标签对 select 添加选项，同时表单的 method 方法需指定为 post 来避免中文乱码问题。\n\n在 userList.jsp 页面中使用 JSTL 标签遍历集合中的用户信息 。\n\nuserAdd.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <form:form modelAttribute="user" method="post" action="${pageContext.request.contextPath }/user/save">\n        <fieldset>\n            <legend> 添加一个用户 </legend>\n            <P>\n                <label>用户名:</label>\n                <form:input path="userName" />\n            </p>\n            <P>\n                <label>爱好:</label>\n                <form:checkboxes items="${hobbys}" path="hobby" />\n            </p>\n            <P>\n                <label>朋友:</label>\n                <form:checkbox path="friends" value="张三" /> 张三\n                <form:checkbox path="friends" value="李四" /> 李四\n                <form:checkbox path="friends" value="王五" /> 王五\n                <form:checkbox path="friends" value="赵六" /> 赵六\n            </p>\n            <P>\n                <label>职业:</label>\n                <form:select path="carrer">\n                    <option />请选择职业\n                    <form:options items="${carrers }" />\n                </form:select>\n            </p>\n            <P>\n                <label>户籍：</label>\n                <form:select path="houseRegister">\n                    <option />请选择户籍\n                    <form:options items="${houseRegisters }" />\n                </form:select>\n            </p>\n            <P>\n                <label>个人描述:</label>\n                <form:textarea path="remark" rows="5" />\n            </p>\n            <p id="buttons">\n                <input id="reset" type="reset">\n                <input id="submit" type="submit" value="添加">\n            </p>\n        </fieldset>\n    </form:form>\n</body>\n</html>\nuserList.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>用户列表</title>\n</head>\n<body>\n    <h1>用户列表</h1>\n    <a href="<c:url value="${pageContext.request.contextPath }/user/input"/>">继续添加</a>\n    <table>\n        <tr>\n            <th>用户名</th>\n            <th>兴趣爱好</th>\n            <th>朋友</th>\n            <th>职业</th>\n            <th>户籍</th>\n            <th>个人描述</th>\n        </tr>\n        <c:forEach items="${users}" var="user">\n            <tr>\n                <td>${user.userName }</td>\n                <td>\n                    <c:forEach items="${user.hobby }" var="hobby">\n                        ${hobby }&nbsp;\n                    </c:forEach>\n                </td>\n                <td>\n                    <c:forEach items="${user.friends}" var="friend">\n                        ${friend }&nbsp;\n                    </c:forEach>\n                </td>\n                <td>${user.carrer }</td>\n                <td>${user.houseRegister }</td>\n                <td>${user.remark }</td>\n            </tr>\n        </c:forEach>\n    </table>\n</body>\n</html>\n测试应用\n通过地址“http://localhost:8080/springMVCDemo04/user/input”测试应用\n\n')])])]),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190716/5-1ZG6095211960.png",alt:"RUNOOB 图标"}})]),this._v(" "),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190716/5-1ZG60954352H.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);n.default=s.exports}}]);