(window.webpackJsonp=window.webpackJsonp||[]).push([[413],{903:function(t,e,n){"use strict";n.r(e);var o=n(6),s=Object(o.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-mvc类型转换的意义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc类型转换的意义"}},[this._v("#")]),this._v(" Spring MVC类型转换的意义")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('本节以一个简单应用（JSP+Servlet）为示例来介绍类型转换的意义。如图 1 所示的添加商品页面用于收集用户输入的商品信息，商品信息包括商品名称（字符串类型 String）、商品价格（双精度浮点类型 double）、商品数量（整数类型 int）。\n\n添加商品信息的收集页面\n图 1  添加商品信息的收集页面\naddGoods.jsp页面的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>添加商品信息</title>\n</head>\n<body>\n    <form action="addGoods" method="post">\n        <table border=1 bgcolor="lightblue" align="center">\n            <tr>\n                <td>商品名称：</td>\n                <td><input class="textSize" type="text" name="goodsname" /></td>\n            </tr>\n            <tr>\n                <td>商品价格：</td>\n                <td><input class="textSize" type="text" name="goodsprice" /></td>\n            </tr>\n            <tr>\n                <td>商品数量：</td>\n                <td><input class="textSize" type="text" name="goodsnumber" /></td>\n            </tr>\n            <tr>\n                <td colspan="2" align="center">\n                    <input type="submit" value="提交" />\n                </td>\n            </tr>\n        </tab1e>\n    </form>\n</body>\n</html>\n希望页面收集到的数据提交到 addGoods 的 Servlet（AddGoodsServlet 类），该 Servlet 将这些请求信息封装成一个 Goods 类的值对象。\n\nGoods 类的代码如下：\npackage pojo;\npublic class Goods {\n    private String goodsname;\n    private double goodsprice;\n    private int goodsnumber;\n    // 无参数的构造方法\n    public Goods() {\n    }\n    // 有参数的构造方法\n    public Goods(String goodsname, double goodsprice, int goodsnumber) {\n        super();\n        this.goodsname = goodsname;\n        this.goodsprice = goodsprice;\n        this.goodsnumber = goodsnumber;\n    }\n    // 此处省略了setter和getter方法\n}\nAddGoodsServlet 类的代码如下：\npackage servlet;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport pojo.Goods;\npublic class AddGoodsServlet extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType("text/html;charset=utf-8");\n        // 设置编码，防止乱码\n        request.setCharacterEncoding("utf-8");\n        // 获取参数值\n        String goodsname = request.getParameter("goodsname");\n        String goodsprice = request.getParameter("goodsprice");\n        String goodsnumber = request.getParameter("goodsnumber");\n        // 下面进行类型转换\n        double newgoodsprice = Double.parseDouble(goodsprice);\n        int newgoodsnumber = Integer.parseInt(goodsnumber);\n        // 将转换后的数据封装成goods值对象\n        Goods goods = new Goods(goodsname, newgoodsprice, newgoodsnumber);\n        // 将goods值对象传递给数据访问层，进行添加操作，代码省略\n        ...\n    }\n}\n对于上面这个应用而言，开发者需要自己在 Servlet 中进行类型转换，并将其封装成值对象。这些类型转换操作全部手工完成，异常烦琐。\n\n对于 Spring MVC 框架而言，它必须将请求参数转换成值对象类中各属性对应的数据类型——这就是类型转换的意义。\n\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);