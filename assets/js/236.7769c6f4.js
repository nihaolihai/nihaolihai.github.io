(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{724:function(s,t,e){"use strict";e.r(t);var a=e(6),i=Object(a.a)({},(function(){var s=this.$createElement,t=this._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"mybatis配置typealiases-别名-详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis配置typealiases-别名-详解"}},[this._v("#")]),this._v(" MyBatis配置typeAliases（别名）详解")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('由于类的全限定名称很长，需要大量使用的时候，总写那么长的名称不方便。在 MyBatis 中允许定义一个简写来代表这个类，这就是别名，别名分为系统定义别名和自定义别名。\n\n在 MyBatis 中别名由类 TypeAliasRegistry（org.apache.ibatis.type.TypeAliasRegistry）去定义。注意，在 MyBatis 中别名不区分大小写。\n系统定义别名\n在 MyBatis 的初始化过程中，系统自动初始化了一些别名，如下表所示。\n\n别名\nJava 类型\t是否支持数组\n_byte\nbyte\t是\n_long\nlong\t是\n_short\nshort\t是\n_int\nint\t是\n_integer\nint\t是\n_double\ndouble\t是\n_float\nfloat\t是\n_boolean\nboolean\t是\nstring\nString\t是\nbyte\nByte\t是\nlong\nLong\t是\nshort\tShort\t是\nint\tInteger\t是\ninteger\tInteger\t是\ndouble\tDouble\t是\nfloat\tFloat\t是\nboolean\tBoolean\t是\ndate\tDate\t是\ndecimal\tBigDecimal\t是\nbigdecimal\tBigDecimal\t是\nobject\tObject\t是\nmap\tMap\t否\nhashmap\tHashMap\t否\nlist\tList\t否\narraylist\tArrayList\t否\ncollection\tCollection\t否\niterator\tIterator\t否\nResultSet\tResultSet\t否如果需要使用对应类型的数组型，要看其是否能支持数据，如果支持只需要使用别名加[]即可，比如 _int 数组的别名就是 _int[]。而类似 list 这样不支持数组的别名，则不能那么写。\n\n有时候要通过代码来实现注册别名，让我们看看 MyBatis 是如何初始化这些别名的，如下所示。\npublic TypeAliasRegistry() {\n    registerAlias("string", String.class);\n    registerAlias("byte", Byte.class);\n    registerAlias("long", Long.class);\n    ......\n    registerAlias("byte[]",Byte[].class); registerAlias("long[]",Long[].class);\n    ......\n    registerAlias("map", Map.class);\n    registerAlias("hashmap", HashMap.class);\n    registerAlias("list", List.class); registerAlias("arraylist", ArrayList.class);\n    registerAlias("collection", Collection.class);\n    registerAlias("iterator", Iterator.class);\n    registerAlias("ResultSet", ResultSet.class);\n}\n所以使用 TypeAliasRegistry 的 registerAlias 方法就可以注册别名了。一般是通过 Configuration 获取 TypeAliasRegistry 类对象，其中有一个 getTypeAliasRegistry 方法可以获得别名，如 configuration.getTypeAliasRegistry()。\n\n然后就可以通过 registerAlias 方法对别名注册了。而事实上 Configuration 对象也对一些常用的配置项配置了别名，如下所示。\n//事务方式别名\ntypeAliasRegistry.registerAlias("JDBC",JdbcTransactionFactory.class);\ntypeAliasRegistry.registerAlias("MANAGED",ManagedTransactionFactory.class);\n//数据源类型别名\ntypeAliasRegistry.registerAlias("JNDI",JndiDataSourceFactory.class);\ntypeAliasRegistry.registerAlias("POOLED",\nPooledDataSourceFactory.class);\ntypeAliasRegistry.registerAlias("UNPOOLED",UnpooledDataSourceFactory.class);\n//缓存策略别名\ntypeAliasRegistry.registerAlias("PERPETUAL",PerpetualCache.class);\ntypeAliasRegistry.registerAlias("FIFO",FifoCache.class);\ntypeAliasRegistry.registerAlias("LRU",LruCache.class); typeAliasRegistry.registerAlias("SOFT", SoftCache.class); typeAliasRegistry.registerAlias("WEAK", WeakCache.class);\n//数据库标识别名\ntypeAliasRegistry.registerAlias("DB_VENDOR",\nVendorDatabaseIdProvider.class);\n//语言驱动类别名\ntypeAliasRegistry.registerAlias("XML",XMLLanguageDriver.class);\ntypeAliasRegistry.registerAlias("RAW",RawLanguageDriver.class);\n//日志类别名\ntypeAliasRegistry.registerAlias("SLF4J", Slf4jImpl.class);\ntypeAliasRegistry.registerAlias("COMMONS_LOGGTNG",JakartmCommonsLogginglmpl.class);\ntypeAliasRegistry.registerAlias("LOG4J", Log4jImpl.class);\ntypeAliasRegistry.registerAlias("LOG4J2", Log4j2Impl.class);\ntypeAliasRegistry.registerAlias("JDK_LOGGING", Jdk14LoggingImpl.class);\ntypeAliasRegistry.registerAlias("STDOUT_LOGGING", StdOutImpl.class);\ntypeAliasRegistry.registerAlias("NO_LOGGING",NoLoggingImpl.class);\n//动态代理别名\ntypeAliasRegistry.registerAlias("CGLIB",CglibProxyFactory.class);\ntypeAliasRegistry.registerAlias("JAVASSIST",JavassistProxyFactory.class);\n这些配置为的是让我们更容易配置 MyBatis 的相关信息。以上就是 MyBatis 系统定义的别名，我们在使用的时候，不要重复命名，导致出现其他问题。\n自定义别名\n由于现实中，特别是大型互联网系统中存在许多对象，比如用户（User）这个对象有时候需要大量重复地使用，因此 MyBatis 也提供了用户自定义别名的规则。我们可以通过 TypeAliasRegistry 类的 registerAlias 方法注册，也可以采用配置文件或者扫描方式来自定义它。\n\n使用配置文件定义很简单：\n<typeAliases>\x3c!--别名--\x3e\n    <typeAlias alias="role" type="com.mybatis.po.Role"/>\n    <typeAlias alias="role" type="com.mybatis.po.User"/>\n</typeAliases>\n\n这样就可以定义一个别名了。如果有很多类需要定义别名，那么用这样的方式进行配置可就不那么轻松了。MyBatis 还支持扫描别名。比如上面的两个类都在包 com.mybatis.po 之下，那么就可以定义为：\n<typeAliases>\x3c!--别名--\x3e\n    <package name="com.mybatis.po"/>\n</typeAliases>\n\n这样 MyBatis 将扫描这个包里面的类，将其第一个字母变为小写作为其别名，比如类 Role 的别名会变为 role，而 User 的别名会变为 user。使用这样的规则，有时候会出现重名。\n\n比如 com.mybatis.po.User 这个类，MyBatis 还增加了对包 com.mybatis.po 的扫描，那么就会出现异常，这个时候可以使用 MyBatis 提供的注解 @Alias（"user3"）进行区分，如下所示。\npackage com.mybatis.po;\n@Alias("user3")\npublic Class User {\n    ......\n}\n这样就能够避免因为别名重名导致的扫描失败的问题。\n\n')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);