(window.webpackJsonp=window.webpackJsonp||[]).push([[434],{926:function(e,n,r){"use strict";r.r(n);var t=r(6),s=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"第一个spring-mvc应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一个spring-mvc应用"}},[this._v("#")]),this._v(" 第一个Spring MVC应用")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('1）创建 Web 应用并引入 JAR 包\n在 MyEclipse 中创建一个名为 springMVCDemo01 的 Web 应用，在 springMVCDemo01 的 lib 目录中添加 Spring MVC 程序所需要的 JAR 包，包括 Spring 的 4 个核心 JAR 包、commons-logging 的 JAR 包以及两个与 Web 相关的 JAR 包（spring-web-3.2.13.RELEASE.jar 和 spring-webmvc-3.2.13. RELEASE.jar）。\n\n另外，在 Spring MVC 应用中使用注解时不要忘记添加 spring-aop-3.2.13.RELEASE.jar 包，添加后的 JAR 包如图 1 所示。\n\n添加后的JAR包\n图 1  添加后的 JAR 包\n2）在 web.xml 文件中部署 DispatcherServlet\n在开发 Spring MVC 应用时需要在 web.xml 中部署 DispatcherServlet，代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"\n    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"\n    version="3.0">\n    <display-name>springMVC</display-name>\n    \x3c!-- 部署 DispatcherServlet --\x3e\n    <servlet>\n        <servlet-name>springmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        \x3c!-- 表示容器再启动时立即加载servlet --\x3e\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>springmvc</servlet-name>\n        \x3c!-- 处理所有URL --\x3e\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n上述 DispatcherServlet 的 servlet 对象 springmvc 初始化时将在应用程序的 WEB-INF 目录下查找一个配置文件，该配置文件的命名规则是“servletName-servlet.xml”，例如 springmvc-servlet.xml。\n\n另外，也可以将 Spring MVC 配置文件存放在应用程序目录中的任何地方，但需要使用 servlet 的 init-param 元素加载配置文件。示例代码如下：\n\x3c!-- 部署 DispatcherServlet --\x3e\n<servlet>\n    <servlet-name>springmvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet\n    </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:springmvc-servlet.xml</param-value>\n    </init-param>\n    \x3c!-- 表示容器再启动时立即加载servlet --\x3e\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springmvc</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n3）创建 Web 应用首页\n在 springMVCDemo01 应用的 WebContent 目录下有个应用首页 index.jsp。index.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    未注册的用户，请<a href="${pageContext.request.contextPath }/register"> 注册</a>！\n    <br/>\n    已注册的用户，去<a href="${pageContext.request.contextPath }/login"> 登录</a>！\n</body>\n</html>\n4）创建 Controller 类\n在 src 目录下创建 controller 包，并在该包中创建 RegisterController 和 LoginController 两个传统风格的控制器类（实现了 Controller 接口），分别处理首页中“注册”和“登录”超链接的请求。\n\nRegisterController 的具体代码如下：\npackage controller;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.Controller;\npublic class LoginController implements Controller {\n    public ModelAndView handleRequest(HttpServletRequest arg0,\n            HttpServletResponse arg1) throws Exception {\n        return new ModelAndView("/WEB-INF/jsp/register.jsp");\n    }\n}\nLoginController 的具体代码如下：\npackage controller;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.Controller;\npublic class RegisterController implements Controller {\n    public ModelAndView handleRequest(HttpServletRequest arg0,\n            HttpServletResponse arg1) throws Exception {\n        return new ModelAndView("/WEB-INF/jsp/login.jsp");\n    }\n}\n5）创建 Spring MVC 配置文件并配置 Controller 映射信息\n传统风格的控制器定义之后，需要在 Spring MVC 配置文件中部署它们（学习基于注解的控制器后不再需要部署控制器）。在 WEB-INF 目录下创建名为 springmvc-servlet.xml 的配置文件，具体代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:p="http://www.springframework.org/schema/p"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n    \x3c!-- LoginController控制器类，映射到"/login" --\x3e   \n    <bean name="/login" class="controller.LoginController"/>   \n    \x3c!-- LoginController控制器类，映射到"/register" --\x3e\n    <bean name="/register" class="controller.RegisterController"/>\n</beans>\n6）应用的其他页面\nRegisterController 控制器处理成功后跳转到 /WEB-INF/jsp 下的 register.jsp 视图，LoginController 控制器处理成功后跳转到 /WEB-INF/jsp 下的 login.jsp 视图，因此在应用的 /WEB-INF/jsp 目录下应有 register.jsp 和 login.jsp 页面，这两个 JSP 页面的代码在此省略。\n7）发布并运行 Spring MVC 应用\n在 MyEclipse 中第一次运行 Spring MVC 应用时需要将应用发布到 Tomcat。例如在运行 springMVCDemo01 应用时可以选中应用名称 springMVCDemo01 并右击，然后选择 Run As→Run on Server 命令，打开如图 2 所示的对话框，在对话框中单击 Finish 按钮完成发布并运行。\n\n在Eclipse中发布并运行Spring MVC应用\n图 1  在 MyEclipse 中发布并运行 Spring MVC 应用\n\n通过地址“http://localhost:8080/springMVCDemo01”首先访问 index.jsp 页面，如图 2 所示。\n\nindex.jsp页面\n图 2  index.jsp 页面\n\n，当用户单击“注册”超链接时，根据 springmvc-servlet.xml 文件中的映射将请求转发给 RegisterController 控制器处理，处理后跳转到 /WEB-INF/jsp 下的 register.jsp 视图。同理，当单击“登录”超链接时，控制器处理后转到 /WEB-INF/jsp下的login.jsp 视图\n\n')])])]),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190712/5-1ZG21102024N.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);n.default=s.exports}}]);