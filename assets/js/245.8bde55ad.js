(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{737:function(n,a,r){"use strict";r.r(a);var e=r(6),s=Object(e.a)({},(function(){var n=this.$createElement,a=this._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[a("h2",{attrs:{id:"mybatis与spring的整合步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis与spring的整合步骤"}},[this._v("#")]),this._v(" MyBatis与Spring的整合步骤")]),this._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[this._v('导入相关JAR包\n实现 MyBatis 与 Spring 的整合需要导入相关 JAR 包，包括 MyBatis、Spring 以及其他 JAR 包。\n1）MyBatis 框架所需的 JAR 包\nMyBatis 框架所需的 JAR 包包括它的核心包和依赖包，包的详情可参考《第一个MyBatis程序》。\n2）Spring 框架所需的 JAR 包\nSpring 框架所需的 JAR 包包括它的核心模块 JAR、AOP 开发使用的 JAR、JDBC 和事务的 JAR 包（其中依赖包不需要再导入，因为 MyBatis 已提供），具体如下：\naopalliance-1.0.jar\naspectjweaver-1.6.9.jar\nspring-aop-3.2.13.RELEASE.jar\nspring-aspects-3.2.13.RELEASE.jar\nspring-beans-3.2.13.RELEASE.jar\nspring-context-3.2.13.RELEASE.jar\nspring-core-3.2.13.RELEASE.jar\nspring-expression-3.2.13.RELEASE.jar\nspring-jdbc-3.2.13.RELEASE.jar\nspring-tx-3.2.13.RELEASE.jar\n3）MyBatis 与 Spring 整合的中间 JAR 包\n该中间 JAR 包的版本为 mybatis-spring-1.3.1.jar，此版本可以从网址“http://mvnrepository.com/artifact/org.mybatis/mybatis-spring/1.3.1”下载。\n4）数据库驱动 JAR 包\n教程所使用的 MySQL 数据库驱动包为 mysql-connector-java-5.1.25-bin.jar。\n5）数据源所需的 JAR 包\n在整合时使用的是 DBCP 数据源，需要准备 DBCP 和连接池的 JAR 包。\n\n本教程所用版本的 DBCP 的 JAR 包为 commons-dbcp2-2.2.0.jar，可以从网址“htttp://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi”下载。\n\n最新版本的连接池的 JAR 包为 commons-pool2-2.5.0.jar，可以从网址“http://commons.apache.org/proper/commons-pool/download_pool.cgi”下载。\n在Spring中配置MyBatis工厂\n通过与 Spring 的整合，MyBatis 的 SessionFactory 交由 Spring 来构建，在构建时需要在 Spring 的配置文件中添加如下代码：\n\x3c!--配置数据源--\x3e\n<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">\n    <property name="driverClassName" value="com.mysql.jdbc.Driver" />\n    <property name="url" value="jdbc:mysql://127.0.0.1:3306/springtest?seUnicode=true&amp;characterEncoding=utf-8" />\n    <property name="username" value="root" />\n    <property name="password" value="1128" />\n    \x3c!-- 最大连接数 --\x3e\n    <property name="maxTotal" value="30"/>\n    \x3c!-- 最大空闲连接数 --\x3e\n    <property name="maxIdle" value="10"/>\n    \x3c!-- 初始化连接数 --\x3e\n    <property name="initialSize" value="5"/>\n</bean>\n\x3c!-- 配置SqlSessionFactoryBean --\x3e\n<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\n    \x3c!-- 引用数据源组件 --\x3e\n    <property name="dataSource" ref="dataSource" />\n    \x3c!-- 引用MyBatis配置文件中的配置 --\x3e\n    <property name="configLocation" value="classpath:mybatis-config.xml" />\n</bean>\n使用 Spring 管理 MyBatis 的数据操作接口\n使用 Spring 管理 MyBatis 数据操作接口的方式有多种，其中最常用、最简洁的一种是基于 MapperScannerConfigurer 的整合。该方式需要在 Spring 的配置文件中加入以下内容：\n纯文本复制\n\x3c!-- Mapper代理开发，使用Spring自动扫描MyBatis的接口并装配 （Sprinh将指定包中的所有被@Mapper注解标注的接口自动装配为MyBatis的映射接口） --\x3e\n<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">\n    \x3c!-- mybatis-spring组件的扫描器，com.dao只需要接口（接口方法与SQL映射文件中的相同） --\x3e\n    <property name="basePackage" value="com.dao" />\n    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />\n</bean>\n\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);