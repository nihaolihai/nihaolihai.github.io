(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{576:function(t,e,v){"use strict";v.r(e);var n=v(6),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"hbase过滤器入门教程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hbase过滤器入门教程"}},[t._v("#")]),t._v(" HBase过滤器入门教程")]),t._v(" "),v("p",[t._v("使用 show_filter 命令可以查看当前 HBase 支持的过滤器类型，如下图所示。")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/191115/6-191115111FT23.gif",alt:"RUNOOB 图标"}})]),t._v(" "),v("p",[t._v("使用上述过滤器时，一般需要配合比较运算符或比较器使用，如下面两个表所示。")]),t._v(" "),v("p",[t._v("比较运算符")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("比较运算符")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("=")]),t._v(" "),v("td",[t._v("等于")])]),t._v(" "),v("tr",[v("td",[t._v(">")]),t._v(" "),v("td",[t._v("大于")])]),t._v(" "),v("tr",[v("td",[t._v(">=")]),t._v(" "),v("td",[t._v("大于等于")])]),t._v(" "),v("tr",[v("td",[t._v("<")]),t._v(" "),v("td",[t._v("小于")])]),t._v(" "),v("tr",[v("td",[t._v("<=")]),t._v(" "),v("td",[t._v("小于等于")])]),t._v(" "),v("tr",[v("td",[t._v("!=")]),t._v(" "),v("td",[t._v("不等于")])])])]),t._v(" "),v("p",[t._v("比较器\n| 比较器  | 描述\n| BinaryComparator  | 匹配完整字节数组  |\n| BinaryPrefixComparator  | 匹配字节数组前缀  |\n| BitComparator  | 匹配比特位  |\n| NullComparator  | 匹配空值  |\n| RegexStringComparator  | 匹配正则表达式  |\n| SubstringComparator  | 匹配子字符串使用过滤器  |\n语法格式如下所示：")]),t._v(" "),v("p",[t._v("scan '表名', { Filter => \"过滤器(比较运算符, '比较器') }")]),t._v(" "),v("p",[t._v("在上述语法中，Filter=> 指明过滤的方法，整体可用大括号引用，也可以不用大括号。过滤的方法用双引号引用，而比较方式用小括号引用。")]),t._v(" "),v("p",[t._v("下面介绍常见的过滤器使用方法。\n行键过滤器\nRowFilter 可以配合比较器和运算符，实现行键字符串的比较和过滤。例如，匹配行键中大于 0001 的数据，可使用 binary 比较器；匹配以 0001 开头的行键，可使用 substring 比较器，注意 substring 不支持大于或小于运算符。")]),t._v(" "),v("p",[t._v("实现上述匹配条件的过滤命令以及显示结果如下图所示。")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/191115/6-1911151142423S.gif",alt:"RUNOOB 图标"}})]),t._v(" "),v("p",[t._v("针对行键进行匹配的过滤器还有 PrefixFilter、KeyOnlyFilter、FirstKeyOnlyFilter 和 InclusiveStopFilter，其具体含义和使用示例如下表所示。")]),t._v(" "),v("p",[t._v("其中，FirstKeyOnlyFilter 过滤器可以用来实现对逻辑行进行计数的功能，并且比其他计数方式效率高。")]),t._v(" "),v("p",[t._v("其他行键过滤器描述\n行键过滤器\t描述\t示例\nPrefixFilter\t行键前缀比较器，比较行键前缀\tscan 'Student', FILTER => \"PrefixFilter('0001')\"\n同\nscan 'Student', FILTER => \"RowFilter(=,'substring:0001')\"\nKeyOnlyFilter\t只对单元格的键进行过滤和显示，不显示值\tscan 'Student', FILTER => \"KeyOnlyFilter()\"\nFirstKeyOnlyFilter\t只扫描显示相同键的第一个单元格，其键值对会显示出来\tscan 'Student', FILTER => \"FirstKeyOnlyFilter()\"\nInclusiveStopFilter\t替代 ENDROW 返回终止条件行\tscan 'Student', { STARTROW => '0001', FIILTER => \"InclusiveStopFilter('binary:0002')\" }\n同\nscan 'Student', { STARTROW => '0001', ENDROW => '0003' }")]),t._v(" "),v("p",[t._v("列族与列过滤器\n针对列族进行过滤的过滤器为 FamilyFilter，其语法结构与 RowFilter 类似，不同之处在于 FamilyFilter 是对列族名称进行过滤的。")]),t._v(" "),v("p",[t._v("例如，以下命令扫描Student表显示列族为 Grades 的行。\nscan 'Student', FILTER=>\" FamilyFilter(= , 'substring:Grades')\"")]),t._v(" "),v("p",[t._v("针对列的过滤器如下表所示，这些过滤器也需要结合比较运算符和比较器进行列族或列的扫描过滤。")]),t._v(" "),v("p",[t._v("列过滤器描述")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("值过滤器")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("示例")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("QualifierFilter")]),t._v(" "),v("td",[t._v("列标识过滤器，只显示对应列名的数据")]),t._v(" "),v("td",[t._v("scan 'Student', FILTER => \"QualifierFilter(=,'substring:Math')\"")])]),t._v(" "),v("tr",[v("td",[t._v("ColumnPrefixFilter")]),t._v(" "),v("td",[t._v("对列名称的前缀进行过滤")]),t._v(" "),v("td",[t._v("scan 'Student', FILTER => \"ColumnPrefixFilter('Ma')\"")])]),t._v(" "),v("tr",[v("td",[t._v("MultipleColumnPrefixFilter")]),t._v(" "),v("td",[t._v("可以指定多个前缀对列名称过滤")]),t._v(" "),v("td",[t._v("scan 'Student', FILTER => \"MultipleColumnPrefixFilter('Ma','Ag')\"")])]),t._v(" "),v("tr",[v("td",[t._v("ColumnRangeFilter")]),t._v(" "),v("td",[t._v("过滤列名称的范围")]),t._v(" "),v("td",[t._v("scan 'Student', FILTER => \"ColumnRangeFilter('Big',true,'Math',false')\"")])])])]),t._v(" "),v("p",[t._v("上表中 QualifierFilter 和 ColumnPrefixFilter 过滤效果类似，只是 ColumnPrefixFilter 无须结合运算符和比较器即可完成字符串前缀的过滤。")]),t._v(" "),v("p",[t._v("MultipleColumnPrefixFilter 过滤器是对 ColumnPrefixFilter 的延伸，可以一次过滤多个列前缀。")]),t._v(" "),v("p",[t._v("ColumnRangeFilter过滤器则可以扫描出符合过滤条件的列范围，起始和终止列名用单引号引用，true 和 false 参数可指明结果中包含的起始或终止列。")]),t._v(" "),v("p",[t._v("值过滤器\n在 HBase 的过滤器中也有针对单元格进行扫描的过滤器，即值过滤器，如下表所示。")]),t._v(" "),v("p",[t._v("值过滤器描述\n值过滤器\t描述\t示例")]),t._v(" "),v("p",[t._v("ValueFilter\t值过滤器，找到符合值条件的键值对\tscan 'Student', FILTER => \"ValueFilter(=,'substring:curry')\"\n同\nget 'Student', '0001', FILTER => \"ValueFilter(=,'substring:curry')\"")]),t._v(" "),v("p",[t._v("SingleColumnValueFilter\t在指定的列族和列中进行比较的值过滤器\tscan 'Student', Filter => \"SingleColumnValueFilter('StuInfo', 'Name', =, 'binary:curry')\"")]),t._v(" "),v("p",[t._v("SingleColumnValueExcludeFilter\t排除匹配成功的值\tscan 'Student', Filter => \"SingleColumnValueExcludeFilter('StuInfo', 'Name', =, 'binary:curry')\"ValueFilter 过滤器可以利用 get 和 scan 方法对单元格进行过滤，但是使用 get 方法时，需要指定行键。")]),t._v(" "),v("p",[t._v("SingleColumnValueFilter 和 SingleColumnValueExcludeFilter 过滤器扫描的结果是相反的， 都需要在过滤条件中指定列族和列的名称。")]),t._v(" "),v("p",[t._v("其他过滤器\n还有一些其他的过滤器，其过滤方式和示例如下表所示。")]),t._v(" "),v("p",[t._v("其他过滤器描述")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("值过滤器")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("示例")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ColumnCountGetFilter")]),t._v(" "),v("td",[t._v("限制每个逻辑行返回键值对的个数，在 get 方法中使用")]),t._v(" "),v("td",[t._v("get 'Student', '0001', FILTER => \"ColumnCountGetFilter(3)\"")])]),t._v(" "),v("tr",[v("td",[t._v("TimestampsFilter")]),t._v(" "),v("td",[t._v("时间戳过滤，支持等值，可以设置多个时间戳")]),t._v(" "),v("td",[t._v("scan 'Student', Filter => \"TimestampsFilter(1,4)\"")])]),t._v(" "),v("tr",[v("td",[t._v("InclusiveStopFilter")]),t._v(" "),v("td",[t._v("设置停止行")]),t._v(" "),v("td",[t._v("scan 'Student', { STARTROW => '0001', ENDROW => '0005', FILTER => \"InclusiveStopFilter('0003')\" }")])]),t._v(" "),v("tr",[v("td",[t._v("PageFilter")]),t._v(" "),v("td",[t._v("对显示结果按行进行分页显示")]),t._v(" "),v("td",[t._v("scan 'Student', { STARTROW => '0001', ENDROW => '0005', FILTER => \"PageFilter(3)\" }")])]),t._v(" "),v("tr",[v("td",[t._v("ColumnPaginationFilter")]),t._v(" "),v("td",[t._v("对一行的所有列分页，只返回 [offset,offset+limit] 范围内的列")]),t._v(" "),v("td",[t._v("scan 'Student', { STARTROW => '0001', ENDROW=>'0005'FILTER => \"ColumnPaginationFilter(2,1)\" }")])])])]),t._v(" "),v("p",[t._v("ColumnCountGetFilter  | 过滤器限制每个逻辑行返回多少列，一般不用在 scan 方法中，Timestamps Filter 匹配相同时间戳的数据。")]),t._v(" "),v("p",[t._v("InclusiveStopFilter过滤器设置停止行，且包含停止的行，上表中示例最终展示数据为行键 0001〜0003 范围内的数据。PageFilter 设置每页最多显示多少逻辑行, 示例中显示三个逻辑行。")]),t._v(" "),v("p",[t._v("ColumnPaginationFilter过滤器对一个逻辑行的所有列进行分页显示。")])])}),[],!1,null,null,null);e.default=r.exports}}]);