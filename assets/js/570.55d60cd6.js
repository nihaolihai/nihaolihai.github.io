(window.webpackJsonp=window.webpackJsonp||[]).push([[570],{1058:function(e,t,n){"use strict";n.r(t);var r=n(6),a=Object(r.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"servlet-实现全站统一编码-解决中文乱码问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet-实现全站统一编码-解决中文乱码问题"}},[this._v("#")]),this._v(" servlet 实现全站统一编码，解决中文乱码问题")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('在开发 Web 项目时，解决中文乱码问题是不可避免的。在前面所学的知识中，解决乱码的通常做法是在 Servlet 程序中设置编码方式，但是，当多个 Servlet 程序都需要设置编码方式时，就会书写大量重复的代码。\n\n为了解决这一问题，我们可以在 Filter 中对获取到的请求和响应消息进行编码处理，这样就可以实现全站编码方式的统一。本节将分步骤演示如何使用 Filter 实现全站编码的统一。\n1）编写 form.jsp 页面\n在 filterDemo01 项目的 WebContent 目录中编写一个 form.jsp 页面，该页面用于提交用户登录的表单信息，如下所示。\n<%@ page language="java" contentType="text/html; charset=utf-8"\n    pageEncoding="utf-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n                            "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n<title>用户登录</title>\n</head>\n<center>\n    <h3>用户登录</h3>\n</center>\n<body style="text-align:center;">\n    <a href="<%=request.getContextPath()%>/CharacterServlet?name=张三&password=1234">\n        单击超链接登录\n    </a>\n    <form action="<%=request.getContextPath()%>/CharacterServlet" method="post">\n        <table border="1" width="600px" cellpadding="0" cellspacing="0" align="center">\n            <tr>\n                <td height="30" align="center">用户名：</td>\n                <td>&nbsp;<input type="text" name="name" /></td>\n            </tr>\n            <tr>\n                <td height="30" align="center">密&nbsp;码</td>\n                <td>&nbsp;<input type="password" name="password" /></td>\n            </tr>\n            <tr>\n                <td height="30" colspan="2" align="center">\n                    <input type="submit" value="登录"/>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    <input type="reset" value="重置" />\n                </td>\n            </tr>\n        </table>\n    </form>\n</body>\n</html>\n在 form.jsp 中，第 14～16 行代码是一个请求方式为 GET 的超链接；第 17～35 行代码是一个 POST 提交方式 form 表单。\n2）创建 Servlet\n在 filterDemo01 项目的 com.mengma.filter 包中创建一个名称为 CharacterServlet 的 Servlet 类，该类用于获取用户输入的请求参数，并将参数输出到控制台，其代码如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class CharacterServlet extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        System.out.println(request.getParameter("name"));\n        System.out.println(request.getParameter("password"));\n    }\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doGet(request, response);\n    }\n}\n3）创建过滤器\n在 filterDemo01 项目的 com.mengma.filter 包中创建一个名称为 CharacterFilter 的 Filter 类，该类用于拦截用户的请求访问，并实现全站编码的统一，其具体实现代码如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\npublic class CharacterFilter implements Filter {\n    public void init(FilterConfig fConfig) throws ServletException {\n    }\n    public void doFilter(ServletRequest req, ServletResponse res,\n            FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n        // 拦截所有的请求，解决全站中文乱码，指定request和response的编码\n        request.setCharacterEncoding("utf-8"); // 只对消息体有效\n        response.setContentType("text/html;charset=utf-8");\n        // 对 request 进行包装\n        CharacterRequest characterRequest = new CharacterRequest(request);\n        chain.doFilter(characterRequest,response);\n    }\n    public void destroy() {\n    }\n}\n// 继承默认包装类 HttpServletRequestWrapper\nclass CharacterRequest extends HttpServletRequestWrapper {\n    private HttpServletRequest request;\n    public CharacterRequest(HttpServletRequest request) {\n        super(request);\n        this.request = request;\n    }\n    // 子类继承父类一定会覆写一些方法，此处用于重写getParameter()方法\n    public String getParameter(String name) {\n        // 调用被包装对象getParameter()方法，获得请求参数\n        String value = super.getParameter(name);\n        if (value == null) {\n            return null;\n        }\n        String method = super.getMethod(); // 判断请求方式\n        if ("get".equalsIgnoreCase(method)) {\n            try {\n                value = new String(value.getBytes("iso-8859-1"), "utf-8");\n            } catch (UnsupportedEncodingException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return value; // 解决乱码后返回结果\n    }\n}\n在 CharacterFilter 中，针对请求的方式不同，采用了不同的乱码解决方式。其中，由于 POST 方式的请求参数存放在消息体中，所以通过 setCharacterEncoding() 方法进行设置，而 GET 方式的请求参数存放在消息头中，通过 HttpServletRequestWrapper 类对 HttpServletRequest 类进行包装，并通过重写 getParameter() 的方式设置 GET 方式提交参数的编码。\n\n需要注意的是，由于要拦截用户访问资源的所有请求，因此需要将 CharacterFilter 映射信息中 <filter-mapping> 元素拦截的路径设置为“/*”，如下所示：\n<filter>\n    <filter-name>CharacterFilter</filter-name>\n    <filter-class>com.mengma.filter.CharacterFilter</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>CharacterFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n4）运行项目并查看结果\n启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/filterDemo01/form.jsp\n\n')])])]),t("p",[t("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190613/5-1Z613110950618.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);t.default=a.exports}}]);