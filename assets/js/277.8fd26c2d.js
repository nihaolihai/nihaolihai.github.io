(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{769:function(t,n,e){"use strict";e.r(n);var a=e(6),r=Object(a.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"day11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day11"}},[this._v("#")]),this._v(" day11")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('Java高级应用\n            1.集合框架\n            2.枚举\n            3.IO流\n            4.反射技术\n            5.注解\n            6.UML\n集合框架(Java Collection Frame)\n它是由SUM公司提供的一组操作数据的API\n它是作为"容器"对象存在,可以看做是数组的拓展,\n它里面有大量的接口和类\nJCF结构:\n注意点:1.List的特点是有序,可重复\n           2.Set的特点是无序,不可重复\n           3.SortedSet是Set的一个分支,可排序,但是不可重复\n          Map[I]\n          4.Map特点:是以KEY-VALUE的方式存在的,也就是说它只对\n                           KEY实现无序不可重复,但是VALUE是可以重复的\n注意点:Collection中存放的是值,而MAP中存放的是键值对(KEY-VALUE)\nCollection中的公共方法:\n          1.add(Object obj);//向集合中添加一个元素\n          2.remove(Object obj);//移除一个元素\n          3.clear();//清空集合\n          4.isEmpty();//判断集合是否为空\n          5.size();//获取集合容器中的元素的个数\n          6.iterator();//返回集合的迭代器\n          7.toArray();//转换成数组\nList[I]:有序,可重复\n实现类:\n          1.ArrayList\n             底层是动态数组,因此它的查询效率特别高,因为数组是可以通过下标来\n             查询的,但是它的增删改效率特别低,因为涉及到数组元素的移动.\n          \n          2.LinkedList\n            底层是双向链表,它的增删改效率极高,因为只要改变相邻的节点\n            但是查询效率低,因为每次都是从根节点依次往下遍历\n          \n          注意:根据LinkedList的特点,它适合用来做堆栈和队列的数据结构的题目\n                  堆栈:先进后出\n                  队列:先进先出\n\n          3.Vector\n            同ArrayList,但是Vector中的方法大都是线程安全的,也称它是多线程安全的容器\n            重量级的容器\nSet[I]:无序不可重复\n         实现类:\n              HashSet[C]:\n              底层是采用的散列表算法\n                    它是与HashMap一样的,本质就是组合了HashMap的键,而Value为null\nHashSet的如何实现无序不可重复的原理:\n               1.当我们将一个元素添加到Set容器当中的时候,会调用该对象的\n                 hashCode()方法得到一个散列码,根据散列码决定将该元素放在\n                 哪个位置上!\n                 当我们将第二个元素添加到Set容器当中的时候,同样也会去调用\n                 该对象的hashCode()方法,同样也会得到一个散列码,如果这个散列码\n                 跟容器中对象的散列码相同的话,说明这个位置被占用了,但是此时还不能\n                 够确定是同一个对象,然后会去调用equals方法,如果返回true,说明是\n                 同一个对象,就不会再向容器中添加,如果返回false,则会根据它自己的算法\n                 分配到指定的地方!\nSorted\n            有序但是不可重复  \n            底层采用的是平衡数(二叉树)算法\n\n            它的构造方法中可以传入一个比较器来作为参数来实现有序不可重复\n\n            方式一:java.lang.Comparable\n            方式二:java.util.Comparator\n\n            TreeSet方式二原理:\n                  就是添加第二个元素的时候,每次递归调用compare()方法,来比较两个对象\nMap[I]\n           特点:它是以键值对(KEY->VALUE)的形式存储数据的,底层也是散列表算法\n                   并且它是对KEY实现无序不可重复,VALUE是可以重复的\n           通常情况下:KEY一般是String和包装类型\n                             VALUE一般是对象类型\n\n           put(KEY,VALUE);// 将指定的值与此映射中的指定键关联（可选操作）。\n           get(Object key);//通过键来获取值\n           containsKey();//是否包括键\n           constainsValue();//是否包括值\n\n           注意:如果KEY相等,我们就可以把它看成是同一个对象\n//迭代方法有两种\n\t\t//第一种:将Map的键存放Set集合当中,然后迭代这个Set集合来到键跟值\n\t\tSet<Integer> set = map.keySet();\n\t\t//构建集合迭代器\n\t\tIterator<Integer> iter = set.iterator();\n\t\twhile(iter.hasNext()){\n\t\t\tInteger key = iter.next();\n\t\t\tString value = map.get(key);//通过键获取值\n\t\t\tSystem.out.println(key+"----\x3e"+value);\n\t\t}\n\t\t//迭代方法二:将Entry<Key,Value>键值对封装到Set集合当中\n\t\t         //然后迭代Set集合可以获取到每个Entry<Key,Value>\n\t\t         //再调用getKey()和getValue()\n\t    Set<Entry<Integer,String>> set2 = map.entrySet();\n\t    Iterator<Entry<Integer,String>> iter2 = set2.iterator();\n\t    while(iter2.hasNext()){\n\t    \tEntry<Integer,String> entry = iter2.next();\n\t    \tInteger key = entry.getKey();\n\t    \tString value = entry.getValue();\n\t    \tSystem.out.println(key+"-----\x3e"+value);\n\t    }\n\nCollections:集合的工具类\n                  // 反转指定列表中元素的顺序\n                  reverse()\n\n                  //随机打乱\n                  shuffle()\n\n                  //排序\n                  Collections.sort(list,比较器) \n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);