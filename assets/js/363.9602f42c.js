(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{850:function(n,t,e){"use strict";e.r(t);var i=e(6),r=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"apollo高可用设计分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apollo高可用设计分析"}},[this._v("#")]),this._v(" Apollo高可用设计分析")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Apollo 在高可用设计上下了很大的功夫，下面我们来简单的分析下：\n1）某台Config Service 下线\n无影响，Config Service 可用部署多个节点。\n2）所有 Config Service 下线\n所有 Config Service 下线会影响客户端的使用，无法读取最新的配置。可采用读取本地缓存的配置文件来过渡。\n3）某台 Admin Service 下线\n无影响，Admin Service 可用部署多个节点。\n4）所有 Admin Service 下线\nAdmin Service 是服务于 Portal，所有 Admin Service 下线之后只会影响 Portal 的操作，不会影响客户端，客户端是依赖 Config Service。\n5）某台 Portal 下线\nPortal 可用部署多台，通过 Nginx 做负载，某台下线之后不影响使用。\n6）全部 Portal 下线\n对客户端读取配置是没有影响的，只是不能通过 Portal 去查看，修改配置。\n7）数据库宕机\n当配置的数据库宕机之后，对客户端是没有影响的，但是会导致 Portal 中无法更新配置。当客户端重启，这个时候如果需要重新拉取配置，就会有影响，可采取开启配置缓存的选项来避免数据库宕机带来的影响。\n\n通过上面的分析，我们可以看出 Apollo 在可用性这块做得确实不错，各种场景会发生的问题都有备用方案，基本上不会有太大问题，大家放心大胆地使用吧。\n\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);