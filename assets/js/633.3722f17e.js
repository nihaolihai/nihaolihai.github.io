(window.webpackJsonp=window.webpackJsonp||[]).push([[633],{1130:function(n,t,r){"use strict";r.r(t);var a=r(6),i=Object(a.a)({},(function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"springaop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springaop"}},[n._v("#")]),n._v(" springaop")]),n._v(" "),r("h3",{attrs:{id:"示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),r("p",[n._v("1、AOP面向方面编程基于IoC，是对OOP的有益补充；\n2、 AOP利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了 多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的 逻辑或责任封装起来，比如日志记录，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。\n3、 AOP代表的是一个横向的关 系，将“对象”比作一个空心的圆柱体，其中封装的是对象的属性和行为；则面向方面编程的方法，就是将这个圆柱体以切面形式剖开，选择性的提供业务逻辑。而 剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹，但完成了效果。\n4、 实现AOP的技术，主要分为两大类：\n一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；\n二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。\n5、 Spring实现AOP：JDK动态代理和CGLIB代理\n6. AOP使用场景：\nAuthentication 权限检查\nCaching 缓存\nContext passing 内容传递\nError handling 错误处理\nLazy loading　延迟加载\nDebugging　　调试\nlogging, tracing, profiling and monitoring　日志记录，跟踪，优化，校准\nPerformance optimization　性能优化，效率检查\nPersistence　　持久化\nResource pooling　资源池\nSynchronization　同步\nTransactions 事务管理\n另外Filter的实现和struts2的拦截器的实现都是AOP思想的体现。")])])}),[],!1,null,null,null);t.default=i.exports}}]);