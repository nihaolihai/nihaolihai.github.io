(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{655:function(n,e,p){"use strict";p.r(e);var a=p(6),v=Object(a.a)({},(function(){var n=this,e=n.$createElement,p=n._self._c||e;return p("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[p("h2",{attrs:{id:"java-对象和类"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#java-对象和类"}},[n._v("#")]),n._v(" Java 对象和类")]),n._v(" "),p("p",[n._v("Java作为一种面向对象语言。支持以下基本概念：")]),n._v(" "),p("ul",[p("li",[n._v("多态")]),n._v(" "),p("li",[n._v("继承")]),n._v(" "),p("li",[n._v("封装")]),n._v(" "),p("li",[n._v("抽象")]),n._v(" "),p("li",[n._v("类")]),n._v(" "),p("li",[n._v("对象")]),n._v(" "),p("li",[n._v("实例")]),n._v(" "),p("li",[n._v("方法")]),n._v(" "),p("li",[n._v("重载")])]),n._v(" "),p("p",[n._v("本节我们重点研究对象和类的概念。")]),n._v(" "),p("p",[n._v("对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\n类：类是一个模板，它描述一类对象的行为和状态。\n下图中男孩（boy）、女孩（girl）为类（class），而具体的每个人为该类的对象（object）：")]),n._v(" "),p("p",[p("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/object-class.jpg",alt:"RUNOOB 图标"}})]),n._v(" "),p("p",[p("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/object-class.jpg",alt:"RUNOOB 图标"}})]),n._v(" "),p("p",[n._v("下图中汽车为类（class），而具体的每个人车该类的对象（object），对象包含含来汽车的颜色、品牌、名称等：")]),n._v(" "),p("p",[p("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/class-object2020-10-27.png",alt:"RUNOOB 图标"}})]),n._v(" "),p("p",[n._v("Java中的对象\n现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。")]),n._v(" "),p("p",[n._v("拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。")]),n._v(" "),p("p",[n._v("对比现实对象和软件对象，它们之间十分相似。")]),n._v(" "),p("p",[n._v("软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。")]),n._v(" "),p("p",[n._v("在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。")]),n._v(" "),p("p",[n._v("Java 中的类\n类可以看成是创建 Java 对象的模板。")]),n._v(" "),p("p",[p("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/20210105-java-object-1.png",alt:"RUNOOB 图标"}})]),n._v(" "),p("p",[n._v("通过上图创建一个简单的类来理解下 Java 中类的定义：")]),n._v(" "),p("p",[n._v("public class Dog {\nString breed;\nint size;\nString colour;\nint age;")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("void eat() {\n}\n\nvoid run() {\n}\n\nvoid sleep(){\n}\n\nvoid name(){\n}\n")])])]),p("p",[n._v("}\n一个类可以包含以下类型变量：")]),n._v(" "),p("p",[n._v("局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。\n成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。\n类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型。\n一个类可以拥有多个方法，在上面的例子中：eat()、run()、sleep() 和 name() 都是 Dog 类的方法。")]),n._v(" "),p("p",[n._v("构造方法\n每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。")]),n._v(" "),p("p",[n._v("在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。")]),n._v(" "),p("p",[n._v("下面是一个构造方法示例：")]),n._v(" "),p("p",[n._v("public class Puppy{\npublic Puppy(){\n}")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("public Puppy(String name){\n    // 这个构造器仅有一个参数：name\n}\n")])])]),p("p",[n._v("}\n创建对象\n对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：")]),n._v(" "),p("p",[n._v("声明：声明一个对象，包括对象名称和对象类型。\n实例化：使用关键字 new 来创建一个对象。\n初始化：使用 new 创建对象时，会调用构造方法初始化对象。\n下面是一个创建对象的例子：")]),n._v(" "),p("p",[n._v('public class Puppy{\npublic Puppy(String name){\n//这个构造器仅有一个参数：name\nSystem.out.println("小狗的名字是 : " + name );\n}\npublic static void main(String[] args){\n// 下面的语句将创建一个Puppy对象\nPuppy myPuppy = new Puppy( "tommy" );\n}\n}\n编译并运行上面的程序，会打印出下面的结果：')]),n._v(" "),p("p",[n._v("小狗的名字是 : tommy\n访问实例变量和方法\n通过已创建的对象来访问成员变量和成员方法，如下所示：")]),n._v(" "),p("p",[n._v("/* 实例化对象 "),p("em",[n._v("/\nObject referenceVariable = new Constructor();\n/")]),n._v(" 访问类中的变量 "),p("em",[n._v("/\nreferenceVariable.variableName;\n/")]),n._v(" 访问类中的方法 */\nreferenceVariable.methodName();\n实例\n下面的例子展示如何访问实例变量和调用成员方法：")]),n._v(" "),p("p",[n._v('public class Puppy{\nint puppyAge;\npublic Puppy(String name){\n// 这个构造器仅有一个参数：name\nSystem.out.println("小狗的名字是 : " + name );\n}')]),n._v(" "),p("p",[n._v("public void setAge( int age ){\npuppyAge = age;\n}")]),n._v(" "),p("p",[n._v('public int getAge( ){\nSystem.out.println("小狗的年龄为 : " + puppyAge );\nreturn puppyAge;\n}')]),n._v(" "),p("p",[n._v("public static void main(String[] args){\n/* 创建对象 "),p("em",[n._v('/\nPuppy myPuppy = new Puppy( "tommy" );\n/')]),n._v(" 通过方法来设定age "),p("em",[n._v("/\nmyPuppy.setAge( 2 );\n/")]),n._v(' 调用另一个方法获取age */\nmyPuppy.getAge( );\n/*你也可以像下面这样访问成员变量 */\nSystem.out.println("变量值 : " + myPuppy.puppyAge );\n}\n}\n编译并运行上面的程序，产生如下结果：')]),n._v(" "),p("p",[n._v("小狗的名字是 : tommy\n小狗的年龄为 : 2\n变量值 : 2\n源文件声明规则\n在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。")]),n._v(" "),p("p",[n._v("一个源文件中只能有一个 public 类\n一个源文件可以有多个非 public 类\n源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。\n如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。\n如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。\nimport 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。\n类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。这些将在访问控制章节介绍。")]),n._v(" "),p("p",[n._v("除了上面提到的几种类型，Java 还有一些特殊的类，如：内部类、匿名类。")]),n._v(" "),p("p",[n._v("Java 包\n包主要用来对类和接口进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。")]),n._v(" "),p("p",[n._v("import 语句\n在 Java 中，如果给出一个完整的限定名，包括包名、类名，那么 Java 编译器就可以很容易地定位到源代码或者类。import 语句就是用来提供一个合理的路径，使得编译器可以找到某个类。")]),n._v(" "),p("p",[n._v("例如，下面的命令行将会命令编译器载入 java_installation/java/io 路径下的所有类")]),n._v(" "),p("p",[n._v("import java.io.*;\n一个简单的例子\n在该例子中，我们创建两个类：Employee 和 EmployeeTest。")]),n._v(" "),p("p",[n._v("首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。")]),n._v(" "),p("p",[n._v("Employee 类有四个成员变量：name、age、designation 和 salary。该类显式声明了一个构造方法，该方法只有一个参数。")]),n._v(" "),p("p",[n._v("Employee.java 文件代码：\nimport java.io.*;")]),n._v(" "),p("p",[n._v('public class Employee{\nString name;\nint age;\nString designation;\ndouble salary;\n// Employee 类的构造器\npublic Employee(String name){\nthis.name = name;\n}\n// 设置age的值\npublic void empAge(int empAge){\nage =  empAge;\n}\n/* 设置designation的值*/\npublic void empDesignation(String empDesig){\ndesignation = empDesig;\n}\n/* 设置salary的值*/\npublic void empSalary(double empSalary){\nsalary = empSalary;\n}\n/* 打印信息 */\npublic void printEmployee(){\nSystem.out.println("名字:"+ name );\nSystem.out.println("年龄:" + age );\nSystem.out.println("职位:" + designation );\nSystem.out.println("薪水:" + salary);\n}\n}\n程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。')]),n._v(" "),p("p",[n._v("下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。")]),n._v(" "),p("p",[n._v("将下面的代码保存在 EmployeeTest.java文件中。")]),n._v(" "),p("p",[n._v("EmployeeTest.java 文件代码：\nimport java.io.*;\npublic class EmployeeTest{")]),n._v(" "),p("p",[n._v('public static void main(String[] args){\n/* 使用构造器创建两个对象 */\nEmployee empOne = new Employee("RUNOOB1");\nEmployee empTwo = new Employee("RUNOOB2");')]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v('  // 调用这两个对象的成员方法\n  empOne.empAge(26);\n  empOne.empDesignation("高级程序员");\n  empOne.empSalary(1000);\n  empOne.printEmployee();\n\n  empTwo.empAge(21);\n  empTwo.empDesignation("菜鸟程序员");\n  empTwo.empSalary(500);\n  empTwo.printEmployee();\n')])])]),p("p",[n._v("}\n}\n编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：")]),n._v(" "),p("p",[n._v("$ javac EmployeeTest.java\n$ java EmployeeTest\n名字:RUNOOB1\n年龄:26\n职位:高级程序员\n薪水:1000.0\n名字:RUNOOB2\n年龄:21\n职位:菜鸟程序员\n薪水:500.0")])])}),[],!1,null,null,null);e.default=v.exports}}]);