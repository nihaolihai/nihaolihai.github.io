(window.webpackJsonp=window.webpackJsonp||[]).push([[409],{897:function(n,s,e){"use strict";e.r(s);var t=e(6),o=Object(t.a)({},(function(){var n=this.$createElement,s=this._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h2",{attrs:{id:"windows下的socket演示程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows下的socket演示程序"}},[this._v("#")]),this._v(" Windows下的socket演示程序")]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('服务器端代码 server.cpp：\n#include <stdio.h>\n#include <winsock2.h>\n#pragma comment (lib, "ws2_32.lib")  //加载 ws2_32.dll\nint main(){\n    //初始化 DLL\n    WSADATA wsaData;\n    WSAStartup( MAKEWORD(2, 2), &wsaData);\n    //创建套接字\n    SOCKET servSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n    //绑定套接字\n    sockaddr_in sockAddr;\n    memset(&sockAddr, 0, sizeof(sockAddr));  //每个字节都用0填充\n    sockAddr.sin_family = PF_INET;  //使用IPv4地址\n    sockAddr.sin_addr.s_addr = inet_addr("127.0.0.1");  //具体的IP地址\n    sockAddr.sin_port = htons(1234);  //端口\n    bind(servSock, (SOCKADDR*)&sockAddr, sizeof(SOCKADDR));\n    //进入监听状态\n    listen(servSock, 20);\n    //接收客户端请求\n    SOCKADDR clntAddr;\n    int nSize = sizeof(SOCKADDR);\n    SOCKET clntSock = accept(servSock, (SOCKADDR*)&clntAddr, &nSize);\n    //向客户端发送数据\n    char *str = "Hello World!";\n    send(clntSock, str, strlen(str)+sizeof(char), NULL);\n    //关闭套接字\n    closesocket(clntSock);\n    closesocket(servSock);\n    //终止 DLL 的使用\n    WSACleanup();\n    return 0;\n}\n\n客户端代码 client.cpp：\n#include <stdio.h>\n#include <stdlib.h>\n#include <WinSock2.h>\n#pragma comment(lib, "ws2_32.lib")  //加载 ws2_32.dll\nint main(){\n    //初始化DLL\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2, 2), &wsaData);\n    //创建套接字\n    SOCKET sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n    //向服务器发起请求\n    sockaddr_in sockAddr;\n    memset(&sockAddr, 0, sizeof(sockAddr));  //每个字节都用0填充\n    sockAddr.sin_family = PF_INET;\n    sockAddr.sin_addr.s_addr = inet_addr("127.0.0.1");\n    sockAddr.sin_port = htons(1234);\n    connect(sock, (SOCKADDR*)&sockAddr, sizeof(SOCKADDR));\n    //接收服务器传回的数据\n    char szBuffer[MAXBYTE] = {0};\n    recv(sock, szBuffer, MAXBYTE, NULL);\n    //输出接收到的数据\n    printf("Message form server: %s\\n", szBuffer);\n    //关闭套接字\n    closesocket(sock);\n    //终止使用 DLL\n    WSACleanup();\n    system("pause");\n    return 0;\n}\n\n将 server.cpp 和 client.cpp 分别编译为 server.exe 和 client.exe，先运行 server.exe，再运行 client.exe，输出结果为：\nMessage form server: Hello World!\n\nWindows 下的 socket 程序和 Linux 思路相同，但细节有所差别：\n1) Windows 下的 socket 程序依赖 Winsock.dll 或 ws2_32.dll，必须提前加载。DLL 有两种加载方式，请查看：动态链接库DLL的加载\n\n2) Linux 使用“文件描述符”的概念，而 Windows 使用“文件句柄”的概念；Linux 不区分 socket 文件和普通文件，而 Windows 区分；Linux 下 socket() 函数的返回值为 int 类型，而 Windows 下为 SOCKET 类型，也就是句柄。\n\n3) Linux 下使用 read() / write() 函数读写，而 Windows 下使用 recv() / send() 函数发送和接收。\n\n4) 关闭 socket 时，Linux 使用 close() 函数，而 Windows 使用 closesocket() 函数。\n\n')])])])])}),[],!1,null,null,null);s.default=o.exports}}]);