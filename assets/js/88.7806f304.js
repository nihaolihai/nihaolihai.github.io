(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{581:function(t,e,s){"use strict";s.r(e);var a=s(6),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"hbase查询全表数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hbase查询全表数据"}},[t._v("#")]),t._v(" HBase查询全表数据")]),t._v(" "),s("p",[t._v("例如对于上面的 Student 表，使用下面的写法即可查询数据：\nscan 'Student'")]),t._v(" "),s("p",[t._v("同样地，还可以指定列族和列的名称，或指定输出行数，甚至指定输出行键范围，如下图所示。")]),t._v(" "),s("p",[t._v("scan 指定条件输出时，需要使用大括号将参数包含起来。")]),t._v(" "),s("p",[t._v("注意指定列族和列名称使用 COLUMN 限定符；指定输出行键范围使用 STARTROW 和 ENDROW 限定符，此时输出行不包括 ENDROW 行。例如，上图中 ENDROW=>0003，只会输出行键为 0002 的记录，不会输出 0003 记录。")]),t._v(" "),s("p",[t._v("上述限定条件也可以联合使用，中间用逗号隔开即可。")]),t._v(" "),s("p",[t._v("在 HBase 中，具有相同行键的单元格，无论其属于哪个列族，都可以将整体看作一个逻辑行， 使用 count 命令可以计算表的逻辑行数。")]),t._v(" "),s("p",[t._v("在关系型数据库中，有多少条记录就有多少行，表中的行数很容易统计。而在 HBase 里，计算逻辑行需要扫描全表的内容，重复的行键是不纳入计数的，且标记为 tombstone 的删除数据也不纳入计数。")]),t._v(" "),s("p",[t._v("执行 count 命令其实是一个开销较大的进程，特别是应用在大数据场景时，可能需要持续很长时间，因此，用户一般会结合 Hadoop 的 MapReduce 架构来进行分布式的扫描计数。")])])}),[],!1,null,null,null);e.default=n.exports}}]);