(window.webpackJsonp=window.webpackJsonp||[]).push([[446],{939:function(e,n,t){"use strict";t.r(n);var r=t(6),s=Object(r.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-mvc获取参数的几种常见方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc获取参数的几种常见方式"}},[this._v("#")]),this._v(" Spring MVC获取参数的几种常见方式")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('通过实体 Bean 接收请求参数\n通过一个实体 Bean 来接收请求参数，适用于 get 和 post 提交请求方式。需要注意的是，Bean 的属性名称必须与请求参数名称相同。下面通过具体应用 springMVCDemo02 讲解“通过实体 Bean 接收请求参数”。\n1）创建首页面\n在 springMVCDemo02 应用的 WebContent 目录下修改 index.jsp 页面，代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    没注册的用户，请<a href="${pageContext.request.contextPath }/index/register"> 注册</a>！\n  <br/>\n    已注册的用户，去<a href="${pageContext.request.contextPath }/index/login"> 登录</a>！\n</body>\n</html>\n2）完善配置文件\n完善配置文件 springmvc-servlet.xml，代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n    \x3c!-- 使用扫描机制扫描控制器类，控制器类都在controller包及其子包下 --\x3e\n    <context:component-scan base-package="controller" />\n    <mvc:annotation-driven />\n    \x3c!-- annotation-driven用于简化开发的配置，注解DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter --\x3e\n    \x3c!-- 使用resources过滤掉不需要dispatcherservlet的资源（即静态资源，例如css、js、html、images）。\n        在使用resources时必须使用annotation-driven，否则resources元素会阻止任意控制器被调用 --\x3e\n    \x3c!-- 允许css目录下的所有文件可见 --\x3e\n    <mvc:resources location="/css/" mapping="/css/**" />\n    \x3c!-- 允许html目录下的所有文件可见 --\x3e\n    <mvc:resources location="/html/" mapping="/html/**" />\n    \x3c!-- 允许css目录下的所有文件可见 --\x3e\n    <mvc:resources location="/images/" mapping="/images/**" />\n    \x3c!-- 完成视图的对应 --\x3e\n    \x3c!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --\x3e\n    <bean\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n        <property name="prefix" value="/WEB-INF/jsp/" />\n        <property name="suffix" value=".jsp" />\n    </bean>\n</beans>\n3）创建 POJO 实体类\n在 springMVCDemo02 应用的 src 目录下创建 pojo 包，并在该包中创建实体类 UserForm，代码如下：\npackage pojo;\npublic class UserForm {\n    private String uname; // 与请求参数名称相同\n    private String upass;\n    private String reupass;\n    // 省略getter和setter方法\n}\n4）创建控制器类\n在 springMVCDemo02 应用的 controller 包中创建控制器类 IndexController 和 UserController。\n\nIndexController 的代码如下：\npackage controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n@Controller\n@RequestMapping("/index")\npublic class IndexController {\n    @RequestMapping("/login")\n    public String login() {\n        return "login"; // 跳转到/WEB-INF/jsp下的login.jsp\n    }\n    @RequestMapping("/register")\n    public String register() {\n        return "register";\n    }\n}\nUserController 的代码如下：\npackage controller;\nimport javax.servlet.http.HttpSession;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport pojo.UserForm;\nimport com.sun.org.apache.commons.logging.Log;\nimport com.sun.org.apache.commons.logging.LogFactory;\n@Controller\n@RequestMapping("/user")\npublic class UserController {\n    // 得到一个用来记录日志的对象，这样在打印信息的时候能够标记打印的是哪个类的信息\n    private static final Log logger = LogFactory.getLog(UserController.class);\n    /**\n     * 处理登录 使用UserForm对象(实体Bean) user接收注册页面提交的请求参数\n     */\n    @RequestMapping("/login")\n    public String login(UserForm user, HttpSession session, Model model) {\n        if ("zhangsan".equals(user.getUname())\n                && "123456".equals(user.getUpass())) {\n            session.setAttribute("u", user);\n            logger.info("成功");\n            return "main"; // 登录成功，跳转到 main.jsp\n        } else {\n            logger.info("失败");\n            model.addAttribute("messageError", "用户名或密码错误");\n            return "login";\n        }\n    }\n    /**\n     * 处理注册 使用UserForm对象(实体Bean) user接收注册页面提交的请求参数\n     */\n    @RequestMapping("/register")\n    public String register(UserForm user, Model model) {\n        if ("zhangsan".equals(user.getUname())\n                && "123456".equals(user.getUpass())) {\n            logger.info("成功");\n            return "login"; // 注册成功，跳转到 login.jsp\n        } else {\n            logger.info("失败");\n            // 在register.jsp页面上可以使用EL表达式取出model的uname值\n            model.addAttribute("uname", user.getUname());\n            return "register"; // 返回 register.jsp\n        }\n    }\n}\n5）创建页面视图\n在 springMVCDemo02 应用的 /WEB-INF/jsp 目录下创建 register.jsp 和 login.jsp。\n\nregister.jsp 的核心代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <form action="${pageContext.request.contextPath }/user/register" method="post" name="registForm">\n        <table border=1 bgcolor="lightblue" align="center">\n            <tr>\n                <td>姓名：</td>\n                <td>\n                    <input class="textSize" type="text" name="uname" value="${uname }" />\n                </td>\n            </tr>\n            <tr>\n                <td>密码：</td>\n                <td>\n                    <input class="textSize" type="password" maxlength="20" name="upass" />\n                </td>\n            </tr>\n            <tr>\n                <td>确认密码：</td>\n                <td>\n                    <input class="textSize" type="password" maxlength="20" name="reupass" />\n                </td>\n            </tr>\n            <tr>\n                <td colspan="2" align="center">\n                    <input type="button" value="注册" onclick="allIsNull() " />\n                </td>\n            </tr>\n        </tab1e>\n    </form>\n</body>\n</html>\n在 register.jsp 的代码中使用了 EL 语句“$1{uname}”取出“model.addAttribute("uname"，user.getUname())”中的值。对于 EL 和 JSTL 的相关知识，读者可参考《JSP教程》。\n\nlogin.jsp 的核心代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <form action="${pageContext.request.contextPath }/user/login" method="post">\n        <table>\n            <tr>\n                <td colspan="2">\n                    <img src="${pageContext.request.contextPath }/images/login.gif">\n                </td>\n            </tr>\n            <tr>\n                <td>姓名：</td>\n                <td>\n                    <input type="text" name="uname" class="textSize">\n                </td>\n            </tr>\n            <tr>\n                <td>密码：</td>\n                <td>\n                    <input type="password" name="upass" class="textsize">\n                </td>\n            </tr>\n            <tr>\n                <td colspan="2">\n                    <input type="image" src="${pageContext.request.contextPath }/images/ok.gif" onclick="gogo()">\n                    <input type="image" src="${pageContext.request.contextPath }/images/cancel.gif" onclick="cancel()">\n                </td>\n            </tr>\n        </table>\n        ${messageError }\n    </form>\n</body>\n</html>\n6）测试应用\n运行 springMVCDemo02 应用的首页面，进行程序测试。\n通过处理方法的形参接收请求参数\n通过处理方法的形参接收请求参数也就是直接把表单参数写在控制器类相应方法的形参中，即形参名称与请求参数名称完全相同。该接收参数方式适用于 get 和 post 提交请求方式。用户可以将“通过实体 Bean 接收请求参数”部分中控制器类 UserController 中 register 方法的代码修改如下：\n@RequestMapping("/register")\n/**\n* 通过形参接收请求参数，形参名称与请求参数名称完全相同\n*/\npublic String register(String uname,String upass,Model model) {\n    if ("zhangsan".equals(uname)\n            && "123456".equals(upass)) {\n        logger.info("成功");\n        return "login"; // 注册成功，跳转到 login.jsp\n    } else {\n        logger.info("失败");\n        // 在register.jsp页面上可以使用EL表达式取出model的uname值\n        model.addAttribute("uname", uname);\n        return "register"; // 返回 register.jsp\n    }\n}\n通过 HttpServletRequest 接收请求参数\n通过 HttpServletRequest 接收请求参数适用于 get 和 post 提交请求方式，可以将“通过实体 Bean 接收请求参数”部分中控制器类 UserController 中 register 方法的代码修改如下：\n@RequestMapping("/register")\n/**\n* 通过HttpServletRequest接收请求参数\n*/\npublic String register(HttpServletRequest request,Model model) {\n    String uname = request.getParameter("uname");\n    String upass = request.getParameter("upass");\n    if ("zhangsan".equals(uname)\n            && "123456".equals(upass)) {\n        logger.info("成功");\n        return "login"; // 注册成功，跳转到 login.jsp\n    } else {\n        logger.info("失败");\n        // 在register.jsp页面上可以使用EL表达式取出model的uname值\n        model.addAttribute("uname", uname);\n        return "register"; // 返回 register.jsp\n    }\n}\n通过 @PathVariable 接收 URL 中的请求参数\n通过 @PathVariable 获取 URL 中的参数，控制器类示例代码如下：\n@Controller\n@RequestMapping("/user")\npublic class UserController {\n    @RequestMapping("/user")\n    // 必须节method属性\n    /**\n     * 通过@PathVariable获取URL的参数\n     */\n    public String register(@PathVariable String uname,@PathVariable String upass,Model model) {\n        if ("zhangsan".equals(uname)\n                && "123456".equals(upass)) {\n            logger.info("成功");\n            return "login"; // 注册成功，跳转到 login.jsp\n        } else {\n            // 在register.jsp页面上可以使用EL表达式取出model的uname值\n            model.addAttribute("uname", uname);\n            return "register"; // 返回 register.jsp\n        }\n    }\n}\n在访问“http://localhost：8080/springMVCDemo02/user/register/zhangsan/123456”路径时，上述代码自动将 URL 中的模板变量 {uname} 和 {upass} 绑定到通过 @PathVariable 注解的同名参数上，即 uname=zhangsan、upass=123456。\n通过 @RequestParam 接收请求参数\n通过 @RequestParam 接收请求参数适用于 get 和 post 提交请求方式，可以将“通过实体 Bean 接收请求参数”部分控制器类 UserController 中 register 方法的代码修改如下：\n@RequestMapping("/register")\n/**\n* 通过@RequestParam接收请求参数\n*/\npublic String register(@RequestParam String uname,\n    @RequestParam String upass, Model model) {\n    if ("zhangsan".equals(uname) && "123456".equals(upass)) {\n        logger.info("成功");\n        return "login"; // 注册成功，跳转到 login.jsp\n    } else {\n        // 在register.jsp页面上可以使用EL表达式取出model的uname值\n        model.addAttribute("uname", uname);\n        return "register"; // 返回 register.jsp\n    }\n}\n通过 @RequestParam 接收请求参数与“通过处理方法的形参接收请求参数”部分的区别如下：当请求参数与接收参数名不一致时，“通过处理方法的形参接收请求参数”不会报 404 错误，而“通过 @RequestParam 接收请求参数”会报 404 错误。\n通过 @ModelAttribute 接收请求参数\n当 @ModelAttribute 注解放在处理方法的形参上时，用于将多个请求参数封装到一个实体对象，从而简化数据绑定流程，而且自动暴露为模型数据，在视图页面展示时使用。\n\n而“通过实体 Bean 接收请求参数”中只是将多个请求参数封装到一个实体对象，并不能暴露为模型数据（需要使用 model.addAttribute 语句才能暴露为模型数据，数据绑定与模型数据展示后面教程中会讲解）。\n\n通过 @ModelAttribute 注解接收请求参数适用于 get 和 post 提交请求方式，可以将“通过实体 Bean 接收请求参数”中控制器类 UserController 中 register 方法的代码修改如下：\n纯文本复制\n@RequestMapping("/register")\npublic String register(@ModelAttribute("user") UserForm user) {\n    if ("zhangsan".equals(uname) && "123456".equals(upass)) {\n        logger.info("成功");\n        return "login"; // 注册成功，跳转到 login.jsp\n    } else {\n        logger.info("失败");\n        // 使用@ModelAttribute("user")与model.addAttribute("user",user)的功能相同\n        //register.jsp页面上可以使用EL表达式${user.uname}取出ModelAttribute的uname值\n        return "register"; // 返回 register.jsp\n    }\n}\n\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);