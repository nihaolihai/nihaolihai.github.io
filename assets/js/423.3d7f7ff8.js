(window.webpackJsonp=window.webpackJsonp||[]).push([[423],{911:function(e,n,r){"use strict";r.r(n);var t=r(6),l=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-mvc处理用户请求的完整流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc处理用户请求的完整流程"}},[this._v("#")]),this._v(" Spring MVC处理用户请求的完整流程")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("Spring MVC 框架是高度可配置的，包含多种视图技术，例如 JSP 技术、Velocity、Tiles、iText 和 POI。\n\nSpring MVC 框架并不关心使用的视图技术，也不会强迫开发者只使用 JSP 技术，但教程中使用的视图是 JSP，本节主要介绍 Spring MVC 框架处理用户请求的完整流程和处理中包含的 4 个接口。\nSpring MVC 工作流程\nSpring MVC 框架主要由 DispatcherServlet、处理器映射、控制器、视图解析器、视图组成，其工作原理如图 1 所示。\n\nSpring MVC工作原理图\n图 1  Spring MVC 工作原理图\n\n从图 1 可总结出 Spring MVC 的工作流程如下：\n客户端请求提交到 DispatcherServlet。\n由 DispatcherServlet 控制器寻找一个或多个 HandlerMapping，找到处理请求的 Controller。\nDispatcherServlet 将请求提交到 Controller。\nController 调用业务逻辑处理后返回 ModelAndView。\nDispatcherServlet 寻找一个或多个 ViewResolver 视图解析器，找到 ModelAndView 指定的视图。\n视图负责将结果显示到客户端。\nSpring MVC接口\n在图 1 中包含 4 个 Spring MVC 接口，即 DispatcherServlet、HandlerMapping、Controller 和 ViewResolver。\n\nSpring MVC 所有的请求都经过 DispatcherServlet 来统一分发，在 DispatcherServlet 将请求分发给 Controller 之前需要借助 Spring MVC 提供的 HandlerMapping 定位到具体的 Controller。\n\nHandlerMapping 接口负责完成客户请求到 Controller 映射。\n\nController 接口将处理用户请求，这和 Java Servlet 扮演的角色是一致的。一旦 Controller 处理完用户请求，将返回 ModelAndView 对象给 DispatcherServlet 前端控制器，ModelAndView 中包含了模型（Model）和视图（View）。\n\n从宏观角度考虑，DispatcherServlet 是整个 Web 应用的控制器；从微观考虑，Controller 是单个 Http 请求处理过程中的控制器，而 ModelAndView 是 Http 请求过程中返回的模型（Model）和视图（View）。\n\nViewResolver 接口（视图解析器）在 Web 应用中负责查找 View 对象，从而将相应结果渲染给客户。\n\n")])])]),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190712/5-1ZG2095404c8.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);n.default=l.exports}}]);