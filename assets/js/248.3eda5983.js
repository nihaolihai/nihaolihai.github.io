(window.webpackJsonp=window.webpackJsonp||[]).push([[248],{739:function(e,s,t){"use strict";t.r(s);var n=t(6),r=Object(n.a)({},(function(){var e=this.$createElement,s=this._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h2",{attrs:{id:"mybatis中的insert、update、delete和sql标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis中的insert、update、delete和sql标签"}},[this._v("#")]),this._v(" MyBatis中的insert、update、delete和sql标签")]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('<insert>元素\n<insert> 元素用于映射插入语句，MyBatis 执行完一条插入语句后将返回一个整数表示其影响的行数。它的属性与 <select> 元素的属性大部分相同，在本节讲解它的几个特有属性。\nkeyProperty：该属性的作用是将插入或更新操作时的返回值赋给 PO 类的某个属性，通常会设置为主键对应的属性。如果是联合主键，可以将多个值用逗号隔开。\nkeyColumn：该属性用于设置第几列是主键，当主键列不是表中的第 1 列时需要设置。如果是联合主键，可以将多个值用逗号隔开。\nuseGeneratedKeys：该属性将使 MyBatis 使用 JDBC 的 getGeneratedKeys（）方法获取由数据库内部产生的主键，例如 MySQL、SQL Server 等自动递增的字段，其默认值为 false。\n1）主键（自动递增）回填\nMySQL、SQL Server 等数据库的表格可以采用自动递增的字段作为主键，有时可能需要使用这个刚刚产生的主键，用于关联其他业务。\n\n首先为 com.mybatis 包中的 SQL 映射文件 UserMapper.xml 中 id 为 addUser 的 <insert> 元素添加 keyProperty 和 useGeneratedKeys 属性，具体代码如下：\n\x3c!--添加一个用户，成功后将主键值返回填给uid(po的属性)--\x3e\n<insert id="addUser" parameterType="com.po.MyUser" keyProperty="uid" useGeneratedKeys="true">\n    insert into user (uname,usex) values(#{uname},#{usex})\n</insert>\n\n然后在 com.controller 包的 UserController 类中进行调用，具体代码如下：\n// 添加一个用户\nMyUser addmu = new MyUser();\naddmu.setUname("陈恒");\naddmu.setUsex("男");\nint add = userDao.addUser(addmu);\nSystem.out.println("添加了" + add + "条记录");\nSystem.out.println("添加记录的主键是" + addmu.getUid());\n2）自定义主键\n如果在实际工程中使用的数据库不支持主键自动递增（例如 Oracle），或者取消了主键自动递增的规则，可以使用 MyBatis 的 <selectKey> 元素来自定义生成主键。具体配置示例代码如下：\n\x3c!-- 添加一个用户，#{uname}为 com.mybatis.po.MyUser 的属性值 --\x3e\n<insert id="insertUser" parameterType="com.po.MyUser">\n    \x3c!-- 先使用selectKey元素定义主键，然后再定义SQL语句 --\x3e\n    <selectKey keyProperty="uid" resultType="Integer" order="BEFORE">\n    select if(max(uid) is null,1,max(uid)+1) as newUid from user)\n    </selectKey>\n    insert into user (uid,uname,usex) values(#{uid},#{uname},#{usex})\n</insert>\n在执行上述示例代码时，<selectKey> 元素首先被执行，该元素通过自定义的语句设置数据表的主键，然后执行插入语句。\n\n<selectKey> 元素的 keyProperty 属性指定了新生主键值返回给 PO 类（com.po.MyUser）的哪个属性。\norder 属性可以设置为 BEFORE 或 AFTER。\nBEFORE 表示先执行 <selectKey> 元素然后执行插入语句。\nAFTER 表示先执行插入语句再执行 <selectKey> 元素。\n<update>与<delete>元素\n<update> 和 <delete> 元素比较简单，它们的属性和 <insert> 元素、<select> 元素的属性差不多，执行后也返回一个整数，表示影响了数据库的记录行数。配置示例代码如下：\n\x3c!-- 修改一个用户 --\x3e\n<update id="updateUser" parameterType="com.po.MyUser">\n    update user set uname = #{uname},usex = #{usex} where uid = #{uid}\n</update>\n\x3c!-- 删除一个用户 --\x3e\n<delete id="deleteUser" parameterType="Integer">\n    delete from user where uid = #{uid}\n</delete>\n<sql> 元素\n<sql> 元素的作用在于可以定义 SQL 语句的一部分（代码片段），以方便后面的 SQL 语句引用它，例如反复使用的列名。\n\n在 MyBatis 中只需使用 <sql> 元素编写一次便能在其他元素中引用它。配置示例代码如下：\n<sql id="comColumns">id,uname,usex</sql>\n<select id="selectUser" resultType="com.po.MyUser">\n    select <include refid="comColumns"> from user\n</select>\n在上述代码中使用 <include> 元素的 refid 属性引用了自定义的代码片段。\n\n')])])])])}),[],!1,null,null,null);s.default=r.exports}}]);