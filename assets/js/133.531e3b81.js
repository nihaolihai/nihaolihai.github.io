(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{622:function(n,t,e){"use strict";e.r(t);var a=e(6),i=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"java-异常处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-异常处理"}},[n._v("#")]),n._v(" Java 异常处理")]),n._v(" "),e("p",[n._v("异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。")]),n._v(" "),e("p",[n._v("比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。")]),n._v(" "),e("p",[n._v("异常发生的原因有很多，通常包含以下几大类：")]),n._v(" "),e("p",[n._v("用户输入了非法数据。\n要打开的文件不存在。\n网络通信时连接中断，或者JVM内存溢出。\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：")]),n._v(" "),e("p",[n._v("检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。\nException 类的层次\n所有的异常类是从 java.lang.Exception 类继承的子类。")]),n._v(" "),e("p",[n._v("Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。")]),n._v(" "),e("p",[n._v("Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。")]),n._v(" "),e("p",[n._v("Error 用来指示运行时环境发生的错误。")]),n._v(" "),e("p",[n._v("例如，JVM 内存溢出。一般地，程序不会从错误中恢复。")]),n._v(" "),e("p",[n._v("异常类有两个主要的子类：IOException 类和 RuntimeException 类。")]),n._v(" "),e("p",[n._v("在 Java 内置类中(接下来会说明)，有大部分常用检查性和非检查性异常。")]),n._v(" "),e("p",[n._v("Java 内置异常类\nJava 语言定义了一些异常类在 java.lang 标准包中。")]),n._v(" "),e("p",[n._v("标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。")]),n._v(" "),e("p",[n._v("Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 Java 的非检查性异常。")]),n._v(" "),e("p",[n._v('异常\t描述\nArithmeticException\t当出现异常的运算条件时，抛出此异常。例如，一个整数"除以零"时，抛出此类的一个实例。\nArrayIndexOutOfBoundsException\t用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。\nArrayStoreException\t试图将错误类型的对象存储到一个对象数组时抛出的异常。\nClassCastException\t当试图将对象强制转换为不是实例的子类时，抛出该异常。\nIllegalArgumentException\t抛出的异常表明向方法传递了一个不合法或不正确的参数。\nIllegalMonitorStateException\t抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。\nIllegalStateException\t在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。\nIllegalThreadStateException\t线程没有处于请求操作所要求的适当状态时抛出的异常。\nIndexOutOfBoundsException\t指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。\nNegativeArraySizeException\t如果应用程序试图创建大小为负的数组，则抛出该异常。\nNullPointerException\t当应用程序试图在需要对象的地方使用 null 时，抛出该异常\nNumberFormatException\t当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。\nSecurityException\t由安全管理器抛出的异常，指示存在安全侵犯。\nStringIndexOutOfBoundsException\t此异常由 String 方法抛出，指示索引或者为负，或者超出字符串的大小。\nUnsupportedOperationException\t当不支持请求的操作时，抛出该异常。\n下面的表中列出了 Java 定义在 java.lang 包中的检查性异常类。')]),n._v(" "),e("p",[n._v("异常\t描述\nClassNotFoundException\t应用程序试图加载类时，找不到相应的类，抛出该异常。\nCloneNotSupportedException\t当调用 Object 类中的 clone 方法克隆对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常。\nIllegalAccessException\t拒绝访问一个类的时候，抛出该异常。\nInstantiationException\t当试图使用 Class 类中的 newInstance 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。\nInterruptedException\t一个线程被另一个线程中断，抛出该异常。\nNoSuchFieldException\t请求的变量不存在\nNoSuchMethodException\t请求的方法不存在\n异常方法\n下面的列表是 Throwable 类的主要方法:")]),n._v(" "),e("p",[n._v("序号\t方法及说明\n1\tpublic String getMessage()\n返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。\n2\tpublic Throwable getCause()\n返回一个Throwable 对象代表异常原因。\n3\tpublic String toString()\n使用getMessage()的结果返回类的串级名字。\n4\tpublic void printStackTrace()\n打印toString()结果和栈层次到System.err，即错误输出流。\n5\tpublic StackTraceElement [] getStackTrace()\n返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。\n6\tpublic Throwable fillInStackTrace()\n用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。\n捕获异常\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。")]),n._v(" "),e("p",[n._v("try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：")]),n._v(" "),e("p",[n._v("try\n{\n// 程序代码\n}catch(ExceptionName e1)\n{\n//Catch 块\n}\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。")]),n._v(" "),e("p",[n._v("如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。")]),n._v(" "),e("p",[n._v("实例\n下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。")]),n._v(" "),e("p",[n._v("ExcepTest.java 文件代码：\n// 文件名 : ExcepTest.java\nimport java.io.*;\npublic class ExcepTest{")]),n._v(" "),e("p",[n._v('public static void main(String args[]){\ntry{\nint a[] = new int[2];\nSystem.out.println("Access element three :" + a[3]);\n}catch(ArrayIndexOutOfBoundsException e){\nSystem.out.println("Exception thrown  :" + e);\n}\nSystem.out.println("Out of the block");\n}\n}\n以上代码编译运行输出结果如下：')]),n._v(" "),e("p",[n._v("Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n多重捕获块\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。")]),n._v(" "),e("p",[n._v("多重捕获块的语法如下所示：")]),n._v(" "),e("p",[n._v("try{\n// 程序代码\n}catch(异常类型1 异常的变量名1){\n// 程序代码\n}catch(异常类型2 异常的变量名2){\n// 程序代码\n}catch(异常类型3 异常的变量名3){\n// 程序代码\n}\n上面的代码段包含了 3 个 catch块。")]),n._v(" "),e("p",[n._v("可以在 try 语句后面添加任意数量的 catch 块。")]),n._v(" "),e("p",[n._v("如果保护代码中发生异常，异常被抛给第一个 catch 块。")]),n._v(" "),e("p",[n._v("如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。")]),n._v(" "),e("p",[n._v("如果不匹配，它会被传递给第二个 catch 块。")]),n._v(" "),e("p",[n._v("如此，直到异常被捕获或者通过所有的 catch 块。")]),n._v(" "),e("p",[n._v("实例\n该实例展示了怎么使用多重 try/catch。")]),n._v(" "),e("p",[n._v("try {\nfile = new FileInputStream(fileName);\nx = (byte) file.read();\n} catch(FileNotFoundException f) { // Not valid!\nf.printStackTrace();\nreturn -1;\n} catch(IOException i) {\ni.printStackTrace();\nreturn -1;\n}\nthrows/throw 关键字：\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。")]),n._v(" "),e("p",[n._v("也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。")]),n._v(" "),e("p",[n._v("下面方法的声明抛出一个 RemoteException 异常：")]),n._v(" "),e("p",[n._v("import java.io.*;\npublic class className\n{\npublic void deposit(double amount) throws RemoteException\n{\n// Method implementation\nthrow new RemoteException();\n}\n//Remainder of class definition\n}\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。")]),n._v(" "),e("p",[n._v("例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：")]),n._v(" "),e("p",[n._v("import java.io.*;\npublic class className\n{\npublic void withdraw(double amount) throws RemoteException,\nInsufficientFundsException\n{\n// Method implementation\n}\n//Remainder of class definition\n}\nfinally关键字\nfinally 关键字用来创建在 try 代码块后面执行的代码块。")]),n._v(" "),e("p",[n._v("无论是否发生异常，finally 代码块中的代码总会被执行。")]),n._v(" "),e("p",[n._v("在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。")]),n._v(" "),e("p",[n._v("finally 代码块出现在 catch 代码块最后，语法如下：")]),n._v(" "),e("p",[n._v('try{\n// 程序代码\n}catch(异常类型1 异常的变量名1){\n// 程序代码\n}catch(异常类型2 异常的变量名2){\n// 程序代码\n}finally{\n// 程序代码\n}\n实例\nExcepTest.java 文件代码：\npublic class ExcepTest{\npublic static void main(String args[]){\nint a[] = new int[2];\ntry{\nSystem.out.println("Access element three :" + a[3]);\n}catch(ArrayIndexOutOfBoundsException e){\nSystem.out.println("Exception thrown  :" + e);\n}\nfinally{\na[0] = 6;\nSystem.out.println("First element value: " +a[0]);\nSystem.out.println("The finally statement is executed");\n}\n}\n}\n以上实例编译运行结果如下：')]),n._v(" "),e("p",[n._v("Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n注意下面事项：")]),n._v(" "),e("p",[n._v("catch 不能独立于 try 存在。\n在 try/catch 后面添加 finally 块并非强制性要求的。\ntry 代码后不能既没 catch 块也没 finally 块。\ntry, catch, finally 块之间不能添加任何代码。\n声明自定义异常\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。\n所有异常都必须是 Throwable 的子类。\n如果希望写一个检查性异常类，则需要继承 Exception 类。\n如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。\n可以像下面这样定义自己的异常类：")]),n._v(" "),e("p",[n._v("class MyException extends Exception{\n}\n只继承Exception 类来创建的异常类是检查性异常类。")]),n._v(" "),e("p",[n._v("下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。")]),n._v(" "),e("p",[n._v("一个异常类和其它任何类一样，包含有变量和方法。")]),n._v(" "),e("p",[n._v("实例\n以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。")]),n._v(" "),e("p",[n._v("InsufficientFundsException.java 文件代码：\n// 文件名InsufficientFundsException.java\nimport java.io.*;")]),n._v(" "),e("p",[n._v("//自定义异常类，继承Exception类\npublic class InsufficientFundsException extends Exception\n{\n//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱\nprivate double amount;\npublic InsufficientFundsException(double amount)\n{\nthis.amount = amount;\n}\npublic double getAmount()\n{\nreturn amount;\n}\n}\n为了展示如何使用我们自定义的异常类，")]),n._v(" "),e("p",[n._v("在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。")]),n._v(" "),e("p",[n._v("CheckingAccount.java 文件代码：\n// 文件名称 CheckingAccount.java\nimport java.io.*;")]),n._v(" "),e("p",[n._v("//此类模拟银行账户\npublic class CheckingAccount\n{\n//balance为余额，number为卡号\nprivate double balance;\nprivate int number;\npublic CheckingAccount(int number)\n{\nthis.number = number;\n}\n//方法：存钱\npublic void deposit(double amount)\n{\nbalance += amount;\n}\n//方法：取钱\npublic void withdraw(double amount) throws\nInsufficientFundsException\n{\nif(amount <= balance)\n{\nbalance -= amount;\n}\nelse\n{\ndouble needs = amount - balance;\nthrow new InsufficientFundsException(needs);\n}\n}\n//方法：返回余额\npublic double getBalance()\n{\nreturn balance;\n}\n//方法：返回卡号\npublic int getNumber()\n{\nreturn number;\n}\n}\n下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。")]),n._v(" "),e("p",[n._v('BankDemo.java 文件代码：\n//文件名称 BankDemo.java\npublic class BankDemo\n{\npublic static void main(String [] args)\n{\nCheckingAccount c = new CheckingAccount(101);\nSystem.out.println("Depositing $500...");\nc.deposit(500.00);\ntry\n{\nSystem.out.println("\\nWithdrawing $100...");\nc.withdraw(100.00);\nSystem.out.println("\\nWithdrawing $600...");\nc.withdraw(600.00);\n}catch(InsufficientFundsException e)\n{\nSystem.out.println("Sorry, but you are short $"\n+ e.getAmount());\ne.printStackTrace();\n}\n}\n}\n编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：')]),n._v(" "),e("p",[n._v("Depositing $500...")]),n._v(" "),e("p",[n._v("Withdrawing $100...")]),n._v(" "),e("p",[n._v("Withdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\nat CheckingAccount.withdraw(CheckingAccount.java:25)\nat BankDemo.main(BankDemo.java:13)\n通用异常\n在Java中定义了两种类型的异常和错误。")]),n._v(" "),e("p",[n._v("JVM(Java虚拟机) 异常：由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。\n程序级异常：由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。")])])}),[],!1,null,null,null);t.default=i.exports}}]);