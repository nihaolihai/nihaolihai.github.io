(window.webpackJsonp=window.webpackJsonp||[]).push([[627],{1115:function(n,a,e){"use strict";e.r(a);var o=e(6),s=Object(o.a)({},(function(){var n=this.$createElement,a=this._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[a("h2",{attrs:{id:"第一个spring程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一个spring程序"}},[this._v("#")]),this._v(" 第一个Spring程序")]),this._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[this._v('1. 创建项目\n在 MyEclipse 中创建 Web 项目 springDemo01，将 Spring 框架所需的 JAR 包复制到项目的 lib 目录中，\n\n2. 创建 PersonDao 接口\n在项目的 src 目录下创建一个名为 com.mengma.ioc 的包，然后在该包中创建一个名为 PersonDao 的接口，并在接口中添加一个 add() 方法，如下所示。\npackage com.mengma.ioc;\npublic interface PersonDao {\n    public void add();\n}\n3. 创建接口实现类 PersonDaoImpl\n在 com.mengma.ioc 包下创建 PersonDao 的实现类 PersonDaoImpl，编辑后如下所示。\npackage com.mengma.ioc;\npublic class PersonDaoImpl implements PersonDao {\n    @Override\n    public void add() {\n        System.out.println("save()执行了...");\n    }\n}\n上述代码中，PersonDaoImpl 类实现了 PersonDao 接口中的 add() 方法，并且在方法调用时会执行输出语句。\n4. 创建 Spring 配置文件\n在 src 目录下创建 Spring 的核心配置文件 applicationContext.xml，编辑后如下所示。\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">\n    \x3c!-- 由 Spring容器创建该类的实例对象 --\x3e\n    <bean id="personDao" class="com.mengma.ioc.PersonDaoImpl" />\n</beans>\n上述代码中，第 2～5 行代码是 Spring 的约束配置，第 7 行代码表示在 Spring 容器中创建一个 id 为 personDao 的 bean 实例，其中 id 表示文件中的唯一标识符，class 属性表示指定需要实例化 Bean 的实全限定类名（包名+类名）。\n\n需要注意的是，Spring 的配置文件名称是可以自定义的，通常情况下，都会将配置文件命名为 applicationContext.xml（或 bean.xml）。\n5. 编写测试类\n在 com.mengma.ioc 包下创建测试类 FirstTest，并在该类中添加一个名为 test1() 的方法，编辑后如下所示。\npackage com.mengma.ioc;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class FirstTest {\n    @Test\n    public void testl() {\n        // 定义Spring配置文件的路径\n        String xmlPath = "applicationContext.xml";\n        // 初始化Spring容器，加载配置文件\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n                xmlPath);\n        // 通过容器获取personDao实例\n        PersonDao personDao = (PersonDao) applicationContext\n                .getBean("personDao");\n        // 调用 personDao 的 add ()方法\n        personDao.add();\n    }\n}\n上述代码中，首先定义了 Spring 配置文件的路径，然后创建 Spring 容器，接下来通过 Spring 容器获取了 personDao 实例，最后调用实例的 save() 方法。\n6. 运行项目并查看结果\n使用 JUnit 测试运行 test1() 方法，运行成功后，控制台的输出结果如图 2 所示。\n\n从图 2 的输出结果中可以看出，程序已经成功输出了“save()执行了...”语句。在程序执行时，对象的创建并不是通过 new 一个类完成的，而是由 Spring 容器管理实现的。这就是 Spring IoC 容器思想的工作机制。\n\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);