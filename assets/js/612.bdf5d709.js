(window.webpackJsonp=window.webpackJsonp||[]).push([[612],{1101:function(t,n,i){"use strict";i.r(n);var e=i(6),s=Object(e.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-aop-面向切面编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-面向切面编程"}},[this._v("#")]),this._v(" Spring AOP（面向切面编程）")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("面向切面编程（AOP）和面向对象编程（OOP）类似，也是一种编程模式。Spring AOP 是基于 AOP 编程模式的一个框架，它的使用有效减少了系统间的重复代码，达到了模块间的松耦合目的。\n\nAOP 的全称是“Aspect Oriented Programming”，即面向切面编程，它将业务逻辑的各个部分进行隔离，使开发人员在编写业务逻辑时可以专心于核心业务，从而提高了开发效率。\n\nAOP 采取横向抽取机制，取代了传统纵向继承体系的重复性代码，其应用主要体现在事务处理、日志管理、权限控制、异常处理等方面。\n\n目前最流行的 AOP 框架有两个，分别为 Spring AOP 和 AspectJ。\n\nSpring AOP 使用纯 Java 实现，不需要专门的编译过程和类加载器，在运行期间通过代理方式向目标类植入增强的代码。\n\nAspectJ 是一个基于 Java 语言的 AOP 框架，从 Spring 2.0 开始，Spring AOP 引入了对 AspectJ 的支持。AspectJ 扩展了 Java 语言，提供了一个专门的编译器，在编译时提供横向代码的植入。\n\n为了更好地理解 AOP，就需要对 AOP 的相关术语有一些了解，这些专业术语主要包含 Joinpoint、Pointcut、Advice、Target、Weaving、Proxy 和 Aspect，它们的含义如下表所示。\n\n名称\t说明\nJoinpoint（连接点）\t指那些被拦截到的点，在 Spring 中，可以被动态代理拦截目标类的方法。\nPointcut（切入点）\t指要对哪些 Joinpoint 进行拦截，即被拦截的连接点。\nAdvice（通知）\t指拦截到 Joinpoint 之后要做的事情，即对切入点增强的内容。\nTarget（目标）\t指代理的目标对象。\nWeaving（植入）\t指把增强代码应用到目标上，生成代理对象的过程。\nProxy（代理）\t指生成的代理对象。\nAspect（切面）\t切入点和通知的结合。\n\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);