(window.webpackJsonp=window.webpackJsonp||[]).push([[377],{880:function(n,e,r){"use strict";r.r(e);var t=r(6),i=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-boot-admin集成eureka项目搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-admin集成eureka项目搭建"}},[this._v("#")]),this._v(" Spring Boot Admin集成Eureka项目搭建")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("通过《Spring Boot Admin的介绍及使用》教程的学习，已经可以在 Spring Boot Admin 中查看应用中 Actuator 的监控信息了，但是这种方式有一点不好的地方，就是每个被监控的服务都必须配置 Spring Boot Admin 的地址，还得引入依赖。\n\n本节我们将 Spring Boot Admin 也注册到 Eureka 中，然后自动获取 Eureka 中注册的服务信息来统一查看。\n\n将之前 spring-boot-admin 项目复制一份，重命名为 spring-boot-admin-eureka，增加 Eureka 的依赖，代码如下所示。\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n在启动类上增加 @EnableDiscoveryClient 注解开启注册功能，代码如下所示。\n@EnableDiscoveryClient\n@EnableAdminServer\n@SpringBootApplication\npublic class App {\n    public static void main(String[] args) {\n        SpringApplication.run(App.class, args);\n    }\n}\n配置 Eureka 注册信息：\neureka.client.serviceUrl.defaultZone=http://zhangsan:123456@localhost:8761/eureka/\neureka.instance.preferIpAddress=true\neureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ipAddress}:${server.port}\neureka.instance.status-page-url=http://${spring.cloud.client.ipAddress}:${server.port}\n\n重启服务即可，Spring Boot Admin 会监控 Eureka 中的所有服务。之前在监控服务中配置的 admin 的 url 和 client 包的依赖都可以去掉了，这种方式整合 Eureka 的方式更简单、方便。\n\nSpring Boot Admin 本身也会注册到 Eureka，在监控列表中当然也包括对自身监控，可以暴露所有端点信息，不然在页面中无法查看监控数据：\nmanagement.endpoints.web.exposure.include=*\n\n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);