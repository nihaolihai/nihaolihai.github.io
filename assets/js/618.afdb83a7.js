(window.webpackJsonp=window.webpackJsonp||[]).push([[618],{1107:function(t,n,e){"use strict";e.r(n);var s=e(6),r=Object(s.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring体系结构详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring体系结构详解"}},[this._v("#")]),this._v(" Spring体系结构详解")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("1. Data Access/Integration（数据访问／集成）\n数据访问/集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下。\nJDBC 模块：提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。\nORM 模块：对流行的对象关系映射 API，包括 JPA、JDO、Hibernate 和 iBatis 提供了的集成层。\nOXM 模块：提供了一个支持对象/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。\nJMS 模块：指 Java 消息服务，包含的功能为生产和消费的信息。\nTransactions 事务模块：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。\n2. Web 模块\nSpring 的 Web 层包括 Web、Servlet、Struts 和 Portlet 组件，具体介绍如下。\nWeb 模块：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web 应用上下文。\nServlet模块：包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序。\nStruts 模块：包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层。\nPortlet 模块：提供了在 Portlet 环境中使用 MV C实现，类似 Web-Servlet 模块的功能。\n3. Core Container（核心容器）\nSpring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下。\nBeans 模块：提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。\nCore 核心模块：提供了 Spring 框架的基本组成部分，包括 IoC 和 DI 功能。\nContext 上下文模块：建立在核心和 Beans 模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点。\nExpression Language 模块：是运行时查询和操作对象图的强大的表达式语言。\n4. 其他模块\nSpring的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下。\nAOP 模块：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。\nAspects 模块：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。\nInstrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。\nTest 模块：支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试。\n\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);