(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{548:function(e,n,r){"use strict";r.r(n);var t=r(6),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"dubboandspringcloud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dubboandspringcloud"}},[e._v("#")]),e._v(" dubboandspringcloud")]),e._v(" "),r("p",[e._v("dubbo的工作原理")]),e._v(" "),r("p",[e._v("第一层：service层，接口层，给服务提供者和消费者来实现的")]),e._v(" "),r("p",[e._v("第二层：config层，配置层，主要是对dubbo进行各种配置的")]),e._v(" "),r("p",[e._v("第三层：proxy层，服务代理层，透明生成客户端的stub和服务单的skeleton")]),e._v(" "),r("p",[e._v("第四层：registry层，服务注册层，负责服务的注册与发现")]),e._v(" "),r("p",[e._v("第五层：cluster层，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务")]),e._v(" "),r("p",[e._v("第六层：monitor层，监控层，对rpc接口的调用次数和调用时间进行监控")]),e._v(" "),r("p",[e._v("第七层：protocol层，远程调用层，封装rpc调用")]),e._v(" "),r("p",[e._v("第八层：exchange层，信息交换层，封装请求响应模式，同步转异步")]),e._v(" "),r("p",[e._v("第九层：transport层，网络传输层，抽象mina和netty为统一接口")]),e._v(" "),r("p",[e._v("第十层：serialize层，数据序列化层")]),e._v(" "),r("p",[e._v("工作流程：")]),e._v(" "),r("p",[e._v("1）第一步，provider向注册中心去注册\n2）第二步，consumer从注册中心订阅服务，注册中心会通知consumer注册好的服务\n3）第三步，consumer调用provider\n4）第四步，consumer和provider都异步的通知监控中心")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200609083652569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),r("p",[e._v("dubbo的工作原理.png")]),e._v(" "),r("p",[e._v("（2）注册中心挂了可以继续通信吗？")]),e._v(" "),r("p",[e._v("可以，因为刚开始初始化的时候，消费者会将提供者的地址等信息拉取到本地缓存，所以注册中心挂了可以继续通信。")]),e._v(" "),r("p",[e._v("（3）Dubbo的执行流程：")]),e._v(" "),r("p",[e._v("项目一启动，加载配置文件的时候，就会初始化，服务的提供方ServiceProvider就会向注册中心注册自己提供的服务，当消费者在启动时，就会向注册中心订阅自己所需要的服务，如果服务提供方有数据变更等，注册中心将基于长连接的形式推送变更数据给消费者。\n默认使用Dubbo协议：\n连接个数：单连接\n连接方式：长连接\n传输协议：TCP\n传输方式：NIO异步传输\n序列化：Hessian二进制序列化\n适用范围：传入传出参数数据包较小（建议小于100K），消费者比提供者个数多，单一消费者无法压满提供者，尽量不要使用dubbo协议传输大文件或超大字符串\n使用场景：常规远程服务方法调用\n从上面的适用范围总结，dubbo适合小数据量大并发的服务调用，以及消费者机器远大于生产者机器数的情况，不适合传输大数据量的服务比如文件、视频等，除非请求量很低。")]),e._v(" "),r("p",[e._v("（4）Dubbo的安全性如何得到保障：\na.在有注册中心的情况下,可以通过dubbbo admin中的路由规则，来指定固定ip的消费方来访问\nb.在直连的情况下，通过在服务的提供方中设置密码(令牌)token，消费方需要在消费时也输入这 个密码，才能够正确使用。\nDubbo添加服务ip白名单，防止不法调用")]),e._v(" "),r("p",[e._v("（5）Duubo中如何保证分布式事务？\n一般情况下，我们尽量将需要事务的方法放在一个service中，从而避开分步式事务。\nDubbo底层是基于socket： Socket通信是一个全双工的方式，如果有多个线程同时进行远程方法调用，这时建立在client server之间的socket连接上会有很多双方发送的消息传递，前后顺序也可能是乱七八糟的，server处理完结果后，将结果消息发送给client，client收到很多消息，怎么知道哪个消息结果是原先哪个线程调用的？\n答：使用一个ID，让其唯一，然后传递给服务端，再服务端又回传回来，这样就知道结果是原先哪个线程的了。")]),e._v(" "),r("p",[e._v("（6）Dubbo的心跳机制：\n目的：\n维持provider和consumer之间的长连接\n实现：\ndubbo心跳时间heartbeat默认是1s，超过heartbeat时间没有收到消息，就发送心跳消 息(provider，consumer一样),如果连着3次(heartbeatTimeout为heartbeat*3)没有收到心跳响应，provider会关闭channel，而consumer会进行重连;不论是provider还是consumer的心跳检测都是通过启动定时任务的方式实现；")]),e._v(" "),r("p",[e._v("Dubbo的zookeeper做注册中心，如果注册中心全部挂掉，发布者和订阅者还能通信吗？\n可以通信的，启动dubbo时，消费者会从zk拉取注册的生产者的地址接口等数据，缓存在本地。每次调用时，按照本地存储的地址进行调用；\n注册中心对等集群，任意一台宕机后，将会切换到另一台；注册中心全部宕机后，服务的提供者和消费者仍能通过本地缓存通讯。服务提供者无状态，任一台 宕机后，不影响使用；服务提供者全部宕机，服务消费者会无法使用，并无限次重连等待服务者恢复；\n挂掉是不要紧的，但前提是你没有增加新的服务，如果你要调用新的服务，则是不能办到的。")]),e._v(" "),r("p",[e._v("dubbo由于是二进制的传输，占用带宽会更少")]),e._v(" "),r("p",[e._v("springCloud是http协议传输，带宽会比较多，同时使用http协议一般会使用JSON报文，消耗会更大")]),e._v(" "),r("p",[e._v("dubbo的开发难度较大，原因是dubbo的jar包依赖问题很多大型工程无法解决")]),e._v(" "),r("p",[e._v("springcloud的接口协议约定比较自由且松散，需要有强有力的行政措施来限制接口无序升级")]),e._v(" "),r("p",[e._v("dubbo的注册中心可以选择zk,redis等多种，springcloud的注册中心只能用eureka或者自研\n————————————————\nDubbo                    SpringCloud\n服务注册中心    Zookeeper    Eureka\n服务调用方式    RPC        REST API\n服务监控        Dubbo-monitor    Spring BootAdmin\n断路器        不完善    Spring Cloud Netflix Hystrix\n服务网关        无    Spring Cloud Netflix Zuul\n分布式配置    无    Spring Cloud Config\n服务跟踪        无    Spring Cloud Sleuth\n消息总线        无    Spring Cloud Bus\n数据流        无    Spring Cloud Stream\n批量任务        无        Spring Cloud Task")]),e._v(" "),r("p",[e._v("dubbo 是二进制传输，占用带宽会少一点。SpringCloud是http 传输，带宽会多一点，同时使用http协议一般会使用JSON报文，消耗会更大。\ndubbo 开发难度较大，所依赖的 jar 包有很多问题大型工程无法解决。SpringCloud 对第三方的继承可以一键式生成，天然集成。\nSpringCloud 接口协议约定比较松散，需要强有力的行政措施来限制接口无序升级。\n最大的区别:\nSpring Cloud抛弃了Dubbo 的RPC通信，采用的是基于HTTP的REST方式。\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200609084046695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),r("p",[e._v("Spring Cloud Eureka 是Spring对Netflix公司的Eureka的二次封装的产品，它实现了服务治理的功能，Spring Cloud Eureka提供了服务端与客户端，服务端即是Eureka服务注册中心，客户端完成微服务向Eureka服务的注册与发现。")]),e._v(" "),r("p",[e._v("微服务\n在说微服务之前，先讲讲项目的功能拆分问题。\n功能拆分对我们来说并不陌生，曾记否刚入坑编程时的那段光辉岁月？你小心翼翼地将一大坨代码按功能切分成几小坨，封装在不同的函数库里调用。那时是不是感觉自己离大神只有一步之遥？\n后来，接触到代理设计模式，发现将功能切分成小模块，并不能很好解决功能代码与业务处理之间的耦合问题。于是代理设计模式和面向切面编程来到你面前，尝试几番发现这玩意用的还挺爽，瞬间那种发自骨髓的自豪感和成就感再一次让你感觉离大神真的更近了一步！\n再后来，发现如果项目变的特别庞大，单体项目问题成为你的眼中钉肉中刺，然后你就想是不是可以把整个项目纵向拆分成若干模块，每个模块该分层分层，该IOC就IOC，该AOP就AOP，还可以在一个或不同的服务器独立运行，然后模块之前通过接口进行通信让整个系统在逻辑上构成一个整体，这样无论是负载均衡还是解决功能强耦合问题都是一个不错的选择。这样的思路就是微服务。")]),e._v(" "),r("p",[e._v("Eureka服务注册中心搭建\n第一步 创建骨架\n创建Maven项目，添加相关依赖：")]),e._v(" "),r("p",[e._v("Spring 和 Eurekea是对好 “基友”，所以导入SpingBoot是一个基本前提：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("\x3c!--SpringBoot父依赖--\x3e\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n    </parent>\n")])])]),r("p",[e._v("而Eurekea是Spring Cloud微服务框架的一个组件，所以我们还需要导入SpringCloud Edgware.RELEASE版本相关依赖，可以理解为Edgware.RELEASE版本中包含了众多Eureka相关的依赖：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("\x3c!--SpringCloud Edgware.RELEASE版本相关依赖--\x3e\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>Edgware.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n")])])]),r("p",[e._v("最后，你要开发服务端还是客户端，人家也不知道，所以没有包含在Edgware.RELEASE中，所以需要最终导入一个服务端依赖，当然如果开发客户端，这里就是客户端依赖：")]),e._v(" "),r("p",[e._v("最终的POM配置，大概就是这样的：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526085721291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n第二步 创建核心配置文件\n在resources目录，创建application.properties文件，配置如下内容：\n#端口配置\nserver.port=8761")]),e._v(" "),r("p",[e._v("#服务名称\nspring.application.name=euraka-server\n#开启IP优先\neureka.instance.prefer-ip-address=true\n#关闭注册\neureka.client.register-with-eureka=false\n#关闭抓取\neureka.client.fetch-registry=false\n#注册地址\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\n如图：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526085807563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n这里面每一项都有注释，这不展开细讲了。")]),e._v(" "),r("p",[e._v("第三步 创建启动类\n在启动类上，首先配置SpringBoot注解（@SpringBootApplication）和开启Eurekea服务端注解（开启Eurekea服务端）")]),e._v(" "),r("p",[e._v("如图：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526085831555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n加入启动代码：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526085854737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),r("p",[e._v("看到这个输出，代表启动成功：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526085913897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n访问：http://localhost:8761/，成功！\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526085954985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n之后，这里将会先生注册的微服务客户端，目前还没有：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526090044536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\nEureka客户端微服务注册与发现\n配置客户端，和服务端大体一致，唯一不一样的地方有以下几点：")]),e._v(" "),r("p",[e._v("最终依赖的不同，服务端是server，客户端是client，注意**spring-cloud-starter-netflix-eureka-**结尾部分：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526090110611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependencies>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n</dependencies>\n")])])]),r("p",[e._v("配置文件的几处不同\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526090155623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n#端口配置\nserver.port=6661")]),e._v(" "),r("p",[e._v("#客户端名称\nspring.application.name=euraka-client1\n#开启IP优先\neureka.instance.prefer-ip-address=true\n#开启注册\neureka.client.register-with-eureka=true\n#开启抓取\neureka.client.fetch-registry=true\n#注册地址\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/")]),e._v(" "),r("p",[e._v("大概看一眼就明白，不过多解释。")]),e._v(" "),r("p",[e._v("启动类将启动服务器的注解改成启用客户端：@EnableEurekaClient")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526090239986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n启动之后，刷新注册中心：\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200526090306538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n这样就实现了微服务客户端的注册与发现。\n到此，Eureka的基本使用就介绍完毕了，由于时间关系，有些内容没有展开细讲，欢迎大家留言")]),e._v(" "),r("p",[e._v("1.dubbo-admin 2.5.8的安装")]),e._v(" "),r("p",[e._v("http://dubbo.apache.org/en-us/index.html")]),e._v(" "),r("p",[e._v("点击GITHUB 跳转到github下载dubbo源码\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020030916111566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n点击Branch切换到Tags，找到对应的2.5.8版本，下载该版本，下载解压完以后，使用cmd命令进入dubbo-admin目录，使用maven打成war包")]),e._v(" "),r("p",[e._v("然后将war包放入tomcat的webapp目录下运行，dubbo 默认的端口是8686")]),e._v(" "),r("p",[e._v("浏览器输入 http://127.0.0.1:8686/dubbo-admin-2.5.8")]),e._v(" "),r("p",[e._v("即可看到dubbo管控台界面\n————————————————\n"),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200309161145823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTExMTE4,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);n.default=a.exports}}]);