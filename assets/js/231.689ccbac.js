(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{720:function(n,e,t){"use strict";t.r(e);var r=t(6),s=Object(r.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"使用maven开发用户模块的crud-增删改查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用maven开发用户模块的crud-增删改查"}},[this._v("#")]),this._v(" 使用Maven开发用户模块的CRUD（增删改查）")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('创建 Web 工程和初始化数据库\n首先，按照教程前面的指导创建一个 Web 工程，创建好工程后，下一步就是初始化数据库了。\n\n这里用的是 MySQL 数据库。建议先安装好数据库，然后创建一个数据库，用如下脚本初始化表。\nCREATE TABLE mvn_user(\n    ur_id int(11) NOT NULL AUTO_INCREMENT,\n    ur_user_name varchar(255) DEFAULT NULL,\n    ur_password varchar(255) DEFAULT NULL,\n    ur_age int(11) DEFAULT NULL,\n    ur_status varchar(255) DEFAULT NULL,\n    PRIMARY KEY (ur_id)\n) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;\nINSERT INTO mvn_user(ur_user_name,ur_password,ur_age,ur_status) VALUES (\'zhangsan\', \'123\', 11, \'Active\');\nINSERT INTO mvn_user(ur_user_name,ur_password,ur_age,ur_status) VALUES (\'lisi\', \'123\', 13, \'Inactive\');\nINSERT INTO mvn_user(ur_user_name,ur_password,ur_age,ur_status) VALUES (\'wangwu\', \'123\', 13, \'Active\');\n添加相关依赖\n在整个 Demo 应用中，需要在创建 Web 工程后，额外添加 4 个依赖，分别是 jstl 依赖、MySQL 数据库驱动依赖、JUnit 4.7 依赖和 json-lib 依赖。它们的依赖配置文件如下：\n<dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>jstl</artifactId>\n    <version>1.2</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.34</version>\n</dependency>\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.7</version>\n    <scope>test</scope>\n</dependency>\n\x3c!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib --\x3e\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.4</version>\n    <classifier>jdk15</classifier>\n</dependency>\n添加注册代码\nMvnUser.java（用户实体类）代码如下所示：\npublic class MvnUser {\n    private int urId;\n    private String urUserName;\n    private String urPassword;\n    private int urAge;\n    private String urStatus;\n    public int getUrId() {\n        return urId;\n    }\n    public void setUrId(int urId) {\n        this.urId = urId;\n    }\n    public String getUrUserName() {\n        return urUserName;\n    }\n    public void setUrUserName(String urUserName) {\n        this.urUserName = urUserName;\n    }\n    public String getUrPassword() {\n        return urPassword;\n    }\n    public void setUrPassword(String urPassword) {\n        this.urPassword = urPassword;\n    }\n    public int getUrAge() {\n        return urAge;\n    }\n    public void setUrAge(int urAge) {\n        this.urAge = urAge;\n    }\n    public String getUrStatus() {\n        return urStatus;\n    }\n    public void setUrStatus(String urStatus) {\n        this.urStatus = urStatus;\n    }\n}\nDBConnection.java（连接数据库的公共类）代码如下所示：\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.Properties;\n/**\n* 获取连接的一个工具类，继承Properties，实现如下封装：\n* 1 读取db.properties文件\n* 2 获取Connection连接的方法\n* 3 关闭资源的方法\n*\n* @author Noble\n* @version 1.0\n*/\npublic class DBConnection extends Properties {\n    private static DBConnection DB_CONN = null;\n    /**\n     * 构造器方法，被私有化，封装读取db.properties逻辑\n     *\n     */\n    private DBConnection() throws Exception {\n        InputStream in = DBConnection.class.getClassLoader().getResourceAsStream("db.properties");\n        this.load(in);\n        // 加载驱动类\n        Class.forName(this.getProperty("driverName"));\n    }\n    /**\n     * 单例模式实现，获取DBConnection实例的静态方法\n     *\n     * @return DBConnection DBConnection实例\n     * @throws Exception 初始化db.properties出现问题时，会抛异常\n     */\n    public static DBConnection getInstance() throws Exception {\n        if (DB_CONN == null) {\n            DB_CONN = new DBConnection();\n        }\n        return DB_CONN;\n    }\n    /**\n     * 基于驱动和db.properties中配置的连接数据库的信息，创建一个新连接返回\n     *\n     * @return Connection 创建的新连接对象\n     *\n     */\n    public Connection getConnection() {\n        Connection conn = null;\n        String url = this.getProperty("url");\n        String userName = this.getProperty("userName");\n        String password = this.getProperty("password");\n        //\n        try {\n            conn = DriverManager.getConnection(url, userName, password);\n        } catch (Exception e) {\n            throw new RuntimeException("数据库连接错误，请与管理员联系");\n        }\n        return conn;\n    }\n    /**\n     * 关闭操作数据库后的资源\n     *\n     * @param conn Connection对象\n     * @param stmt Statement或Statement的子类对象\n     * @param rs   ResultSet对象\n     */\n    public void close(Connection conn, Statement stmt, ResultSet rs) {\n        try {\n            if (rs != null)\n                rs.close();\n            if (stmt != null)\n                stmt.close();\n            if (conn != null)\n                conn.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\nMvnUserDAO.java（用户的 DAO 持久层类）代码如下所示：\n/**import**/\n/**\n* MvnUser实体对象的持久层代码，封装了对MvnUser实体对象的CRUD方法\n*\n* @author Noble\n* @version 1.0\n*/\npublic class MvnUserDAO {\n    /**\n     * 在数据库中，添加一个新的MvnUser对象\n     *\n     * @param user 需要添加的用户实体对象，该对象需要有用户名、密码、年龄和状态属性\n     *\n     * @return void\n     * @throws RuntimeException 添加失败或出现其它意外\n     */\n    public void addUser(MvnUser user) {\n        DBConnection dbConn = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        try {\n            // 获取DBConnection实例\n            dbConn = DBConnection.getInstance();\n            String sql = "insert into mvn_user (ur_user_name,ur_password,ur_age,ur_status) values(?,?,?,?)";\n            // 获取连接对象\n            conn = dbConn.getConnection();\n            // 基于连接和sql，获取一个预处理Statement对象\n            pstmt = conn.prepareStatement(sql);\n            // 设置sql中占位符的值\n            pstmt.setString(1, user.getUrUserName());\n            pstmt.setString(2, user.getUrPassword());\n            pstmt.setInt(3, user.getUrAge());\n            pstmt.setString(4, user.getUrStatus());\n            // 执行预处理\n            pstmt.executeUpdate();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            // 关闭资源\n            if (dbConn != null)\n                dbConn.close(conn, pstmt, null);\n        }\n    }\n    /**\n     * 更新MvnUser对象。该对象中需要设置年龄、状态和id属性，属性和状态是要更新的新值，id为条件\n     *\n     * @param user 需要更新的MvnUser对象\n     *\n     * @return void\n     * @throws RuntimeException 更新失败或出现其它意外\n     */\n    public void update(MvnUser user) {\n        DBConnection dbConn = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        try {\n            dbConn = DBConnection.getInstance();\n            String sql = "update mvn_user set ur_age=?,ur_status=? where ur_id=?";\n            conn = dbConn.getConnection();\n            pstmt = conn.prepareStatement(sql);\n            pstmt.setInt(1, user.getUrAge());\n            pstmt.setString(2, user.getUrStatus());\n            pstmt.setInt(3, user.getUrId());\n            pstmt.executeUpdate();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dbConn != null)\n                dbConn.close(conn, pstmt, null);\n        }\n    }\n    /**\n     * 删除MvnUser对象，该对象中需要有要删除对象的id属性，id属性为删除条件\n     *\n     * @param user 要删除的MvnUser对象\n     *\n     * @return void\n     * @throws RuntimeException 删除失败或出现其它意外\n     */\n    public void deleteUser(MvnUser user) {\n        DBConnection dbConn = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        try {\n            dbConn = DBConnection.getInstance();\n            String sql = "delete from mvn_user where ur_id=?";\n            conn = dbConn.getConnection();\n            pstmt = conn.prepareStatement(sql);\n            pstmt.setInt(1, user.getUrId());\n            pstmt.executeUpdate();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dbConn != null)\n                dbConn.close(conn, pstmt, null);\n        }\n    }\n    /**\n     * 根据id查询对应的MvnUser对象\n     *\n     * @param id 要查询的MvnUser对象的id\n     * @return MvnUser id对应的MvnUser对象，如果没有对象，返回null\n     * @throws RuntimeException 出现意外情况\n     */\n    public MvnUser findUserById(int id) {\n        MvnUser user = null;\n        DBConnection dbConn = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            dbConn = DBConnection.getInstance();\n            String sql = "select * from mvn_user where ur_id=?";\n            conn = dbConn.getConnection();\n            pstmt = conn.prepareStatement(sql);\n            pstmt.setInt(1, id);\n            rs = pstmt.executeQuery();\n            if (rs.next()) {\n                user = new MvnUser();\n                user.setUrAge(rs.getInt("ur_age"));\n                user.setUrId(rs.getInt("ur_id"));\n                user.setUrPassword(rs.getString("ur_password"));\n                user.setUrStatus(rs.getString("ur_status"));\n                user.setUrUserName(rs.getString("ur_user_name"));\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dbConn != null)\n                dbConn.close(conn, pstmt, rs);\n        }\n        return user;\n    }\n    /**\n     * 根据用户名查询对应的MvnUser对象\n     *\n     * @param userName 要查询的MvnUser对象的用户名\n     * @return MvnUser 用户对应的MvnUser对象，如果没有对象，返回null\n     * @throws RuntimeException 出现意外情况\n     */\n    public MvnUser findUserByUserName(String userName) {\n        MvnUser user = null;\n        DBConnection dbConn = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            dbConn = DBConnection.getInstance();\n            String sql = "select * from mvn_user where ur_user_name=?";\n            conn = dbConn.getConnection();\n            pstmt = conn.prepareStatement(sql);\n            pstmt.setString(1, userName);\n            rs = pstmt.executeQuery();\n            if (rs.next()) {\n                user = new MvnUser();\n                user.setUrAge(rs.getInt("ur_age"));\n                user.setUrId(rs.getInt("ur_id"));\n                user.setUrPassword(rs.getString("ur_password"));\n                user.setUrStatus(rs.getString("ur_status"));\n                user.setUrUserName(rs.getString("ur_user_name"));\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dbConn != null)\n                dbConn.close(conn, pstmt, rs);\n        }\n        return user;\n    }\n    /**\n     * 查找数据库中所有的用户对象，以List集合的形式返回\n     *\n     * @return List<MvnUser> 所有用户对象的集合\n     * @throws RuntimeException 出现意外情况\n     */\n    public List<MvnUser> findUsers() {\n        List<MvnUser> userList = null;\n        DBConnection dbConn = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            dbConn = DBConnection.getInstance();\n            String sql = "select * from mvn_user order by ur_id";\n            conn = dbConn.getConnection();\n            pstmt = conn.prepareStatement(sql);\n            rs = pstmt.executeQuery();\n            if (rs != null) {\n                userList = new ArrayList<MvnUser>();\n                MvnUser user = null;\n                while (rs.next()) {\n                    user = new MvnUser();\n                    user.setUrAge(rs.getInt("ur_age"));\n                    user.setUrId(rs.getInt("ur_id"));\n                    user.setUrPassword(rs.getString("ur_password"));\n                    user.setUrStatus(rs.getString("ur_status"));\n                    user.setUrUserName(rs.getString("ur_user_name"));\n                    userList.add(user);\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dbConn != null)\n                dbConn.close(conn, pstmt, rs);\n        }\n        return userList;\n    }\n}\n\nUserService.java（用户服务类）代码如下所示：\n/**\n* 对用CRUD操作的服务层，封装了CRUD在持久化前的必要业务逻辑\n*\n* @author Noble\n* @version 1.0\n*/\npublic class UserService {\n    private MvnUserDAO userDAO = new MvnUserDAO();\n    /**\n     * 创建新的用户\n     *\n     * @param user 要创建的用户对象\n     * @return void\n     * @throws RuntimeException 当用户信息不全或用户名已经存在的时候，都会抛出异常\n     */\n    public void createUser(MvnUser user) {\n        // 验证基本的用户信息\n        if (user == null || user.getUrUserName() == null || user.getUrPassword() == null) {\n            throw new RuntimeException("用户信息不合法");\n        }\n        // 根据用户名查询用户对象\n        MvnUser u = userDAO.findUserByUserName(user.getUrUserName());\n        // 如果能查询到用户对象，说明用户已经存在，抛异常\n        if (u != null) {\n            throw new RuntimeException(user.getUrUserName() + " 用户已存在");\n        }\n        // 调用dao代码，添加一个新用户\n        userDAO.addUser(user);\n    }\n    /**\n     * 更新id对应用户的年龄和状态信息\n     *\n     * @param age    要更新用户的新年龄\n     * @param status 要更新用户的新状态\n     * @param id     要更新用户的id，这是更新的条件\n     *\n     * @return void\n     */\n    public void editUser(int age, String status, int id) {\n        MvnUser user = this.userDAO.findUserById(id);\n        user.setUrAge(age);\n        user.setUrStatus(status);\n        this.userDAO.update(user);\n    }\n    public void deleteUser(int id) {\n        MvnUser user = this.userDAO.findUserById(id);\n        this.userDAO.deleteUser(user);\n    }\n    public MvnUser searchUser(int id) {\n        MvnUser user = this.userDAO.findUserById(id);\n        return user;\n    }\n    public MvnUser searchUser(String userName) {\n        MvnUser user = this.userDAO.findUserByUserName(userName);\n        return user;\n    }\n    public List<MvnUser> searchUsers() {\n        List<MvnUser> userList = this.userDAO.findUsers();\n        return userList;\n    }\n}\n\nAddUserServlet.java（添加用户Servlet）代码如下所示：\n/** import **/\n/**\n* Servlet implementation class AddUserServlet\n*/\npublic class AddUserServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n    /**\n     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse\n     *      response)\n     */\n    protected void service(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        // 获取要添加用户的信息\n        String userName = request.getParameter("userName");\n        String password = request.getParameter("password");\n        String ageStr = request.getParameter("age");\n        String status = request.getParameter("status");\n        int age = 0;\n        try {\n            // 将年龄字符串，转变成数字（数据库中需要数字类型）\n            age = Integer.parseInt(ageStr);\n        } catch (Exception e) {\n        }\n        // 封装成MvnUser对象\n        MvnUser user = new MvnUser();\n        user.setUrAge(age);\n        user.setUrPassword(password);\n        user.setUrStatus(status);\n        user.setUrUserName(userName);\n        UserService userService = new UserService();\n        String msg = "添加成功";\n        try {\n            // 调用service，创建用户\n            userService.createUser(user);\n        } catch (Exception e) {\n            e.printStackTrace();\n            msg = "添加失败：" + e.getMessage();\n        }\n        // 返回添加后的结果提示信息\n        response.setContentType("text/html;charset=UTF-8");\n        PrintWriter out = response.getWriter();\n        out.print(msg);\n    }\n}\n\nDeleteUserServlet.java（删除用户Servlet）代码如下所示：\n/**import**/\n/**\n* Servlet implementation class DeleteUserServlet\n*/\npublic class DeleteUserServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n    /**\n     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse\n     *      response)\n     */\n    protected void service(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String idStr = request.getParameter("id");\n        int id = 0;\n        try {\n            id = Integer.parseInt(idStr);\n        } catch (Exception e) {\n        }\n        UserService userService = new UserService();\n        String msg = "删除成功";\n        try {\n            userService.deleteUser(id);\n        } catch (Exception e) {\n            e.printStackTrace();\n            msg = "删除失败:" + e.getMessage();\n        }\n        response.setContentType("text/html;charset=UTF-8");\n        PrintWriter out = response.getWriter();\n        out.print(msg);\n        out.flush();\n        out.close();\n    }\n}\nEditUserServlet.java（修改用户Servlet）代码如下所示：\n/** import **/\n/**\n* Servlet implementation class EditUserServlet\n*/\npublic class EditUserServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n    protected void service(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String idStr = request.getParameter("id");\n        String status = request.getParameter("status");\n        String ageStr = request.getParameter("age");\n        int id = 0, age = 0;\n        try {\n            id = Integer.parseInt(idStr);\n        } catch (Exception e) {\n        }\n        try {\n            age = Integer.parseInt(ageStr);\n        } catch (Exception e) {\n        }\n        UserService userService = new UserService();\n        String msg = "修改成功";\n        try {\n            userService.editUser(age, status, id);\n        } catch (Exception e) {\n            e.printStackTrace();\n            msg = "修改失败:" + e.getMessage();\n        }\n        response.setContentType("text/html;charset=UTF-8");\n        PrintWriter out = response.getWriter();\n        out.print(msg);\n        out.flush();\n        out.close();\n    }\n}\nSearchUserServlet.java（根据用户 Id 或用户名查找用户 Servlet）代码如下所示：\n/** import **/\n/**\n* Servlet implementation class SearchUserServlet\n*/\npublic class SearchUserServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n    protected void service(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        // 获取查询的方式（根据id查询还是根据用户名查询）\n        String type = request.getParameter("type");\n        UserService userService = new UserService();\n        MvnUser user = null;\n        // 根据id查询\n        if ("byId".equals(type)) {\n            // 获取id\n            String idStr = request.getParameter("id");\n            int id = 0;\n            try {\n                id = Integer.parseInt(idStr);\n            } catch (Exception e) {\n            }\n            user = userService.searchUser(id);\n        } else {\n            // 根据用户名查询\n            String userName = request.getParameter("userName");\n            user = userService.searchUser(userName);\n        }\n        // 设置返回的响应为json响应\n        response.setContentType("text/json;charset=UTF-8");\n        PrintWriter out = response.getWriter();\n        // 将查询的用户对象，转变成json格式的字符串，写入响应返回\n        out.print(JSONObject.fromObject(user));\n        out.flush();\n        out.close();\n    }\n}\nSearchUsersServlet.java（查询所有用户Servlet）代码如下所示：\n/** import **/\n/**\n* Servlet implementation class SearchUsersServlet\n*/\npublic class SearchUsersServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n    /**\n     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse\n     *      response)\n     */\n    protected void service(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        UserService userService = new UserService();\n        List<MvnUser> userList = userService.searchUsers();\n        // 将查询出的用户集合，写于request属性中\n        request.setAttribute("userList", userList);\n        // 转向 userList.jsp页面\n        request.getRequestDispatcher("/userList.jsp").forward(request, response);\n    }\n}\nuserList.jsp（显示用户列表 jsp）代码如下所示：\n<%@page contentType="text/html" pageEncoding="UTF-8"%>\n<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n<table width="100%" border="1">\n    <tr>\n        <td width="51" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong><span class="STYLE2">选择</span></strong>\n            </div>\n        </td>\n        <td width="111" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>序号</strong>\n            </div>\n        </td>\n        <td width="137" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>用户名</strong>\n            </div>\n        </td>\n        <td width="105" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>年龄</strong>\n            </div>\n        </td>\n        <td width="101" bgcolor="#CCCCCC">\n            <div align="center">\n                <strong>状态</strong>\n            </div>\n        </td>\n    </tr>\n    <c:forEach items="${userList }" var="_user" varStatus="status">\n        <tr>\n            <c:choose>\n                <c:when test="${status.index%2==0 }">\n                    <tr bgcolor="#FFFFFF">\n                </c:when>\n                <c:otherwise>\n                    <tr bgcolor="#99FFFF">\n                </c:otherwise>\n            </c:choose>\n            <td><input type="checkbox" name="checkbox" value="${_user.urId }"></td>\n            <td>${status.index+1 }</td>\n            <td>${_user.urUserName }</td>\n            <td>${_user.urAge }</td>\n            <td>${_user.urStatus }</td>\n        </tr>\n    </c:forEach>\n</table>\nindex.jsp，进入首页（框架 jsp），代码如下所示：\n<%@page contentType="text/html" pageEncoding="UTF-8"%>\n<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n<title>测试用户CRUD操作</title>\n<script type="text/javascript" src="js/jquery-1.8.2.min.js"><\/script>\n<script type="text/javascript">\n    $(document).ready(function() {\n        // 页面加载完后，自动发searchUsersServlet请求，加载到userListDiv中显示\n        $("#userListDiv").load("searchUsersServlet");\n    });\n    // 新增 按钮事件触发函数\n    function toAdd() {\n        // 获取addForm中的请求信息\n        var _data = $("#addForm").serialize();\n        //alert(_data);\n        // 发添加新用户的Ajax请求\n        $.ajax({\n            type : \'post\',\n            url : \'addUserServlet\',\n            data : _data,\n            success : function(msg) {\n                alert(msg);\n                // 更新最新的用户列表信息\n                $("#userListDiv").load("searchUsersServlet");\n            }\n        });\n    }\n    function toEdit() {\n        var _data = $("#editForm").serialize();\n        alert(_data);\n        $.ajax({\n            type : \'post\',\n            url : \'editUserServlet\',\n            data : _data,\n            success : function(msg) {\n                alert(msg);\n                $("#userListDiv").load("searchUsersServlet");\n            }\n        });\n    }\n    function toDelete() {\n        var chks = $("input[name=\'checkbox\']:checked");\n        if (chks.length == 0) {\n            alert("请选择要删除的用户");\n        } else if (chks.length > 1) {\n            alert("一次只能删除一个用户");\n        } else {\n            var to = confirm("您确定要删除选中的用户?");\n            if (to) {\n                var _data = "id=" + chks.val();\n                $.ajax({\n                    type : \'post\',\n                    data : _data,\n                    url : \'deleteUserServlet\',\n                    success : function(msg) {\n                        alert(msg);\n                        $("#userListDiv").load("searchUsersServlet");\n                    }\n                });\n            }\n        }\n    }\n    function toShowAdd() {\n        $("#LayerAdd").show(1000);\n    }\n    function toShowEdit() {\n        //alert($("input[name=\'checkbox\']:checked").length);\n        var chks = $("input[name=\'checkbox\']:checked");\n        if (chks.length == 0) {\n            alert("请选择要编辑的用户");\n        } else if (chks.length > 1) {\n            alert("一次只能修改一个用户");\n        } else {\n            var _data = "id=" + chks.val();\n            $.ajax({\n                type : \'post\',\n                data : _data,\n                url : \'searchUserServlet?type=byId\',\n                dataType : \'json\',\n                success : function(msg) {\n                    $("#editForm #id").val(msg.urId);\n                    $("#editForm #userName").val(msg.urUserName);\n                    $("#editForm #age").val(msg.urAge);\n                    $("#editForm #status").val(msg.urStatus);\n                    //alert($("#editForm #age").val());\n                    $("#LayerEdit").show(1000);\n                }\n            });\n        }\n    }\n    function toCloseAdd() {\n        $("#LayerAdd").hide(1000);\n    }\n    function toCloseEdit() {\n        $("#LayerEdit").hide(1000);\n    }\n<\/script>\n<style type="text/css">\n\x3c!--\n.STYLE2 {\n    color: #000000\n}\n#LayerAdd {\n    position: absolute;\n    left: 113px;\n    top: 183px;\n    width: 434px;\n    height: 193px;\n    z-index: 1;\n    background-color: #99FFFF;\n    display: none;\n}\n#LayerEdit {\n    position: absolute;\n    left: 113px;\n    top: 183px;\n    width: 434px;\n    height: 193px;\n    z-index: 1;\n    background-color: #99FFFF;\n    display: none;\n}\n--\x3e\n</style>\n</head>\n<body>\n    <div id="LayerAdd">\n        <form name="addForm" name="addForm" id="addForm" method="post"\n            action="">\n            <table width="98%" border="0" align="center" cellpadding="0"\n                cellspacing="0">\n                <tr>\n                    <td colspan="2" align="center"><strong><BR>添加新用户<br></strong></td>\n                </tr>\n                <tr>\n                    <td width="47%" align="right">用户名：</td>\n                    <td width="53%"><input name="userName" type="text"\n                        id="userName"></td>\n                </tr>\n                <tr>\n                    <td align="right">密码：</td>\n                    <td><input name="password" type="password" id="password"></td>\n                </tr>\n                <tr>\n                    <td align="right">年龄：</td>\n                    <td><input name="age" type="text" id="age"></td>\n                </tr>\n                <tr>\n                    <td colspan="2">&nbsp;</td>\n                </tr>\n                <tr>\n                    <td colspan="2" align="center">\n                     <input type="button" name="Submit4" value="添加" onclick="toAdd()">\n                     <input type="button" name="Submit5" value="关闭" onclick="toCloseAdd()">\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div id="LayerEdit">\n        <form name="editForm" id="editForm" method="post" action="">\n            <input type="hidden" name="id" id="id" />\n            <table width="98%" border="0" align="center" cellpadding="0"\n                cellspacing="0">\n                <tr>\n                    <td colspan="2" align="center">\n                     <strong><br>修改用户信息<br> </strong>\n                    </td>\n                </tr>\n                <tr>\n                    <td width="47%" align="right">用户名：</td>\n                    <td width="53%">\n                     <input name="userName" type="text" id="userName" readonly="readonly">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">年龄：</td>\n                    <td><input name="age" type="text" id="age"></td>\n                </tr>\n                <tr>\n                    <td align="right">状态：</td>\n                    <td>\n                     <select name="status" id="status">\n                            <option value="Active">Active</option>\n                            <option value="Inactive">Inactive</option>\n                            <option value="Locked">Locked</option>\n                            <option value="Deleted">Deleted</option>\n                     </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan="2">&nbsp;</td>\n                </tr>\n                <tr>\n                    <td colspan="2" align="center">\n                     <input type="button" name="Submit4" value="修改" onclick="toEdit()">\n                     <input type="button" name="Submit5" value="关闭" onclick="toCloseEdit()">\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <p>&nbsp;</p>\n    <p>测试用户CRUD页面</p>\n    <table width="539" border="1">\n        <tr>\n            <td colspan="5" align="right">\n             <input type="button" name="Submit" value="新增" onclick="toShowAdd()">\n             <input type="submit" name="Submit2" value="修改" onclick="toShowEdit()">\n             <input type="button" name="Submit3" value="删除" onclick="toDelete()">\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div id="userListDiv"></div>\n            </td>\n        </tr>\n    </table>\n    <p>&nbsp;</p>\n</body>\n</html>\ndb.properties，数据库信息配置文件，代码如下所示：\nuserName=root\npassword=root\nurl=jdbc:mysql://localhost:3306/mvn_db\ndriverName=com.mysql.jdbc.Driver\n\n构建项目\n代码写好了，接下来是在 pom.xml 中添加发布 Web 应用和同 Web 服务器相关的插件，这些在前面的简易 Web 案例中已提到，这里就直接贴出当前 Web 应用到的插件配置，代码如下：\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.mortbay.jetty</groupId>\n            <artifactId>maven-jetty-plugin</artifactId>\n            <version>6.1.26</version>\n            <configuration>\n                <webAppSourceDirectory>${basedir}/src/main/webapp</webAppSourceDirectory>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>2.0.2</version>\n            <configuration>\n                <source>1.5</source>\n                <target>1.5</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n测试\n右击“工程”，选择 Run As→Maven build… 命令，在 Goals 后面输入“jetty:run”目标，运行 jetty 服务器。在浏览器中输入“http://localhost:8080/MvnDemo03/index.jsp”进行运行测试。\n\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);