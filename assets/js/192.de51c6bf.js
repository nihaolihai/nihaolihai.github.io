(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{681:function(n,e,t){"use strict";t.r(e);var s=t(6),a=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"maven搭建ssh-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven搭建ssh-2"}},[this._v("#")]),this._v(" Maven搭建SSH（2)")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('实现Struts2 Web模块\n根据前面的 Jsp/Servlet 实现，对需求的理解和 Struts2 开发的相关组件的了解（Struts2 需要单独参考其他资料），Struts2 Web 层的代码需要做以下工作。\n1）实现视图层代码（jsp）\n视图层代码同以前用 Jsp/Servlet 开发的内容一样，有两个 jsp。\nIndex.jsp，首页框架 jsp。\nuserList.jsp，显示用户列表的 jsp。\n2）编写 Action 代码\nUserAction.java，实现用户 CRUD 的所有控制逻辑代码。\n3）Spring 容器的配置文件\napplicationContext.xml，配置 Spring 容器的初始化组件。\n4）编写 struts.xml 配置文件\n完成 Struts 常量的配置和 Action 的配置。\n5）配置 web.xml\n配置 Struts 的入口过滤器和 Spring 的初始化 Listener。\n1. 创建 Web 工程\n基于 webapp 的 Archetypes 创建 Web 工程，这里用的是 webapp-javaee6，如图 1 所示。\n\n选择 webapp-j2ee6 创建 Web 应用\n图 1  选择 webapp-javaee6 创建 Web 应用\n\n单击 Next 按钮，在输入框中输入对应信息，单击 Finish 按钮，创建一个 Maven 的 Web 工程，仓库目录结构如图 2 所示。\n\nStruts Web工程结构\n图 2  Struts Web工程结构\n\n2. 配置依赖和插件\npom.xml 内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>cn.com.mvn.pom</groupId>\n        <artifactId>StrutsPOM</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>cn.com.mvn.ssh.demo</groupId>\n    <artifactId>MvnSSHDemo.Struts</artifactId>\n    <packaging>war</packaging>\n    <name>MvnSSHDemo.Struts</name>\n    <url>http://maven.apache.org</url>\n    <dependencies>\n        \x3c!-- struts json插件 --\x3e\n        \x3c!-- https://mvnrepository.com/artifact/org.apache.struts/struts2-json-plugin --\x3e\n        <dependency>\n            <groupId>org.apache.struts</groupId>\n            <artifactId>struts2-json-plugin</artifactId>\n            <version>2.3.28</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo.dao.hibernate</groupId>\n            <artifactId>MvnSSHDemo.DAO.Hibernate</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.Service</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.Service.impl</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            \x3c!-- <plugin> <groupId>org.mortbay.jetty</groupId> <artifactId>maven-jetty-plugin</artifactId>\n                <version>6.1.26</version> <configuration> <webAppSourceDirectory>${basedir}/src/main/webapp</webAppSourceDirectory>\n                </configuration> </plugin> --\x3e\n            <plugin>\n                \x3c!-- 指定插件名称及版本号 --\x3e\n                <groupId>org.codehaus.cargo</groupId>\n                <artifactId>cargo-maven2-plugin</artifactId>\n                <version>1.4.8</version>\n                <configuration>\n                    <wait>true</wait>       \x3c!--是否说明，操作start、stop等后续操作必须等前面操作完成才能继续 --\x3e\n                    <container>               \x3c!-- 容器的配置 --\x3e\n                        <containerId>tomcat7x</containerId>                     \x3c!-- 指定tomcat版本 --\x3e\n                        <type>installed</type>                                  \x3c!-- 指定类型：standalone, installed等 --\x3e\n                        <home>C:\\java\\servers\\apache-tomcat-7.0.69_64</home>    \x3c!-- 指定Tomcat的位置，即catalina.home --\x3e\n                    </container>\n                    <configuration>           \x3c!-- 具体的配置 --\x3e\n                        <type>existing</type>                                   \x3c!-- 类型，existing:存在 --\x3e\n                        <home>C:\\java\\servers\\apache-tomcat-7.0.69_64</home>    \x3c!-- Tomcat的位置，即catalina.home --\x3e\n                    </configuration>\n                    <deployables>     \x3c!-- 部署设置 --\x3e\n                        <deployable>            \x3c!-- 部署的War包名等 --\x3e\n                            <groupId>cn.com.mvn.ssh.demo</groupId>\n                            <artifactId>MvnSSHDemo.Struts</artifactId>\n                            <type>war</type>\n                            <properties>\x3c!-- 部署路径 --\x3e\n                                <context>MvnSSHDemo</context>\n                            </properties>\n                        </deployable>\n                    </deployables>\n                    <deployer>        \x3c!-- 部署配置 --\x3e\n                        <type>installed</type>                          \x3c!-- 类型 --\x3e\n                    </deployer>\n                </configuration>\n                <executions>\n                    \x3c!-- 执行的动作 --\x3e\n                    <execution>\n                        <id>verify-deployer</id>\n                        <phase>install</phase>      \x3c!-- 解析install --\x3e\n                        <goals>\n                            <goal>deployer-deploy</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>clean-deployer</id>\n                        <phase>clean</phase>\n                        <goals>\n                            <goal>deployer-undeploy</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>2.0.2</version>\n                <configuration>\n                    <source>1.5</source>\n                    <target>1.5</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n相对以前的工程，这里有如下几点不同。\n当前是 webapp 工程，packaging 要设置成 war。\n在操作过程中，添加、修改、删除的返回要用 JSON，所以这里需要集成 struts-json 依赖。\n本工程用的不是 jetty 插件发布 Web 应用，用的是 cargo-maven2-plugin 插件，直接发布到指定 Tomcat 的 webapps 目录下。\ncargo-maven2-plugin 插件的配置在文档中有对应的注释。这里强调要注意的地方是粗体显示部分。groupId 和 artifactId 是当前工程的对应值，context 是发布到 Web 服务器中的上下文路径名称。\n3. 添加实现代码\n1）视图层代码文件内容如下。\n<%@page contentType="text/html" pageEncoding="UTF-8"%>\n<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n<title>测试用户CRUD操作</title>\n<script type="text/javascript" src="js/jquery-3.2.1.min.js"><\/script>\n<script type="text/javascript">\n    $(document).ready(function() {\n        // 页面加载完后，自动发searchUsersServlet请求，加载到userListDiv中显示\n        $("#userListDiv").load("userAction!searchUsers.action");\n    });\n    // 新增 按钮事件触发函数\n    function toAdd() {\n        // 获取addForm中的请求信息\n        var _data = $("#addForm").serialize();\n        //alert(_data);\n        // 发添加新用户的Ajax请求\n        $.ajax({\n            type : \'post\',\n            url : \'userAction!addUser.action\',\n            data : _data,\n            success : function(msg) {\n                alert(msg.message);\n                // 更新最新的用户列表信息\n                $("#userListDiv").load("userAction!searchUsers.action");\n            }\n        });\n    }\n    function toEdit() {\n        var _data = $("#editForm").serialize();\n        alert(_data);\n        $.ajax({\n            type : \'post\',\n            url : \'userAction!editUser.action\',\n            data : _data,\n            success : function(msg) {\n                alert(msg.message);\n                $("#userListDiv").load("userAction!searchUsers.action");\n            }\n        });\n    }\n    function toDelete() {\n        var chks = $("input[name=\'checkbox\']:checked");\n        if (chks.length == 0) {\n            alert("请选择要删除的用户");\n        } else if (chks.length > 1) {\n            alert("一次只能删除一个用户");\n        } else {\n            var to = confirm("您确定要删除选中的用户?");\n            if (to) {\n                var _data = "id=" + chks.val();\n                $.ajax({\n                    type : \'post\',\n                    data : _data,\n                    url : \'userAction!deleteUser.action\',\n                    success : function(msg) {\n                        alert(msg);\n                        $("#userListDiv").load("userAction!searchUsers.action");\n                    }\n                });\n            }\n        }\n    }\n    function toShowAdd() {\n        $("#LayerAdd").show(1000);\n    }\n    function toShowEdit() {\n        //alert($("input[name=\'checkbox\']:checked").length);\n        var chks = $("input[name=\'checkbox\']:checked");\n        if (chks.length == 0) {\n            alert("请选择要编辑的用户");\n        } else if (chks.length > 1) {\n            alert("一次只能修改一个用户");\n        } else {\n            var _data = "id=" + chks.val();\n            $.ajax({\n                type : \'post\',\n                data : _data,\n                url : \'userAction!searchUser.action?type=byId\',\n                dataType : \'json\',\n                success : function(msg) {\n                    $("#editForm #id").val(msg.urId);\n                    $("#editForm #userName").val(msg.urUserName);\n                    $("#editForm #age").val(msg.urAge);\n                    $("#editForm #status").val(msg.urStatus);\n                    //alert($("#editForm #age").val());\n                    $("#LayerEdit").show(1000);\n                }\n            });\n        }\n    }\n    function toCloseAdd() {\n        $("#LayerAdd").hide(1000);\n    }\n    function toCloseEdit() {\n        $("#LayerEdit").hide(1000);\n    }\n<\/script>\n<style type="text/css">\n\x3c!--\n.STYLE2 {\n    color: #000000\n}\n#LayerAdd {\n    position: absolute;\n    left: 113px;\n    top: 183px;\n    width: 434px;\n    height: 193px;\n    z-index: 1;\n    background-color: #99FFFF;\n    display: none;\n}\n#LayerEdit {\n    position: absolute;\n    left: 113px;\n    top: 183px;\n    width: 434px;\n    height: 193px;\n    z-index: 1;\n    background-color: #99FFFF;\n    display: none;\n}\n--\x3e\n</style>\n</head>\n<body>\n    <div id="LayerAdd">\n        <form name="addForm" name="addForm" id="addForm" method="post" action="">\n            <table width="98%" border="0" align="center" cellpadding="0" cellspacing="0">\n                <tr>\n                    <td colspan="2" align="center">\n                        <strong><BR>添加新用户<br></strong>\n                    </td>\n                </tr>\n                <tr>\n                    <td width="47%" align="right">用户名：</td>\n                    <td width="53%">\n                        <input name="user.urUserName" type="text" id="userName">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">密码：</td>\n                    <td>\n                        <input name="user.urPassword" type="password" id="password">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">年龄：</td>\n                    <td>\n                        <input name="user.urAge" type="text" id="age">\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan="2">&nbsp;</td>\n                </tr>\n                <tr>\n                    <td colspan="2" align="center">\n                        <input type="button" name="Submit4" value="添加" onclick="toAdd()">\n                        <input type="button" name="Submit5" value="关闭" onclick="toCloseAdd()">\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div id="LayerEdit">\n        <form name="editForm" id="editForm" method="post" action="">\n            <input type="hidden" name="id" id="id" />\n            <table width="98%" border="0" align="center" cellpadding="0" cellspacing="0">\n                <tr>\n                    <td colspan="2" align="center">\n                        <strong><br>修改用户信息<br></strong>\n                    </td>\n                </tr>\n                <tr>\n                    <td width="47%" align="right">用户名：</td>\n                    <td width="53%">\n                        <input name="userName" type="text" id="userName" readonly="readonly">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">年龄：</td>\n                    <td>\n                        <input name="age" type="text" id="age">\n                    </td>\n                </tr>\n                <tr>\n                    <td align="right">状态：</td>\n                    <td>\n                        <select name="status" id="status">\n                            <option value="Active">Active</option>\n                            <option value="Inactive">Inactive</option>\n                            <option value="Locked">Locked</option>\n                            <option value="Deleted">Deleted</option>\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan="2">&nbsp;</td>\n                </tr>\n                <tr>\n                    <td colspan="2" align="center">\n                        <input type="button" name="Submit4" value="修改" onclick="toEdit()">\n                        <input type="button" name="Submit5" value="关闭" onclick="toCloseEdit()">\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <p>&nbsp;</p>\n    <p>测试用户CRUD页面</p>\n    <table width="539" border="1">\n        <tr>\n            <td colspan="5" align="right">\n                <input type="button" name="Submit" value="新增" onclick="toShowAdd()">\n                <input type="submit" name="Submit2" value="修改" onclick="toShowEdit()">\n                <input type="button" name="Submit3" value="删除" onclick="toDelete()">\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div id="userListDiv"></div>\n            </td>\n        </tr>\n    </table>\n    <p>&nbsp;</p>\n</body>\n</html>\n注：index.jsp 中的 JS 用到了 jQuery，要注意将 jQuery 的 JS 代码添加到应用中，并且用 script 应用到页面。index.jsp 中的添加函数、修改函数和删除函数从后台返回的是用 JSON 封装的提示信息。\n2）Action \n① Message.java 代码如下所示：\npackage cn.com.mvn.ssh.demo.web.vo;\npublic class Message {\n    private String code;\n    private String message;\n    public Message(String message) {\n        super();\n        this.message = message;\n    }\n    public String getCode() {\n        return code;\n    }\n    public void setCode(String code) {\n        this.code = code;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public void setMessage(String message) {\n        this.message = message;\n    }\n}\nUserAction.java\npackage cn.com.mvn.ssh.demo.web.action;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Controller;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.service.IUserService;\nimport cn.com.mvn.ssh.demo.web.vo.Message;\n@Controller("userAction")\npublic class UserAction {\n    @Autowired\n    @Qualifier("userService")\n    private IUserService userService;\n    private MvnUser user;\n    private int id;\n    private String userName;\n    private String type;\n    private String status;\n    private int age;\n    private Message message;\n    // 新增用户的执行方法\n    public String addUser() {\n        String result = "addSuccess";\n        message = new Message("添加成功");\n        try {\n            // 调用service，创建用户\n            userService.createUser(user);\n        } catch (Exception e) {\n            e.printStackTrace();\n            message.setMessage("添加失败：" + e.getMessage());\n        }\n        return result;\n    }\n    // 删除用户的执行方法\n    public String deleteUser() {\n        String result = "deleteSuccess";\n        message = new Message("删除成功");\n        try {\n            userService.deleteUser(id);\n        } catch (Exception e) {\n            e.printStackTrace();\n            message.setMessage("删除失败:" + e.getMessage());\n        }\n        return result;\n    }\n    // 修改用户的执行方法\n    public String editUser() {\n        String result = "editSuccess";\n        this.message = new Message("修改成功!");\n        try {\n            userService.editUser(age, status, id);\n        } catch (Exception e) {\n            e.printStackTrace();\n            message.setMessage("修改失败:" + e.getMessage());\n        }\n        return result;\n    }\n    // 根据id或用户名查找单个用户的执行方法\n    public String searchUser() {\n        String result = "searchUserSeuccess";\n        if ("byId".equals(type)) {\n            user = this.userService.searchUser(id);\n        } else {\n            user = this.userService.searchUser(userName);\n        }\n        return result;\n    }\n    private List<MvnUser> userList;\n    // 查询所有用户列表的执行方法\n    public String searchUsers() {\n        String result = "searchUsersSuccess";\n        this.userList = this.userService.searchUsers();\n        return result;\n    }\n    public List<MvnUser> getUserList() {\n        return userList;\n    }\n    public void setUserList(List<MvnUser> userList) {\n        this.userList = userList;\n    }\n    public MvnUser getUser() {\n        return user;\n    }\n    public void setUser(MvnUser user) {\n        this.user = user;\n    }\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getUserName() {\n        return userName;\n    }\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n    public String getType() {\n        return type;\n    }\n    public void setType(String type) {\n        this.type = type;\n    }\n    public String getStatus() {\n        return status;\n    }\n    public void setStatus(String status) {\n        this.status = status;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public Message getMessage() {\n        return message;\n    }\n    public void setMessage(Message message) {\n        this.message = message;\n    }\n}\n3）applicationContext.xml。\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-4.0.xsd">\n    <context:component-scan\n        base-package="cn.com.mvn.ssh.demo" />\n</beans>\n4）struts.xml。\n<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.1//EN" "http://struts.apache.org/dtds/struts-2.1.dtd">\n<struts>\n    <include file="struts-default.xml"></include>\n    <include file="struts-plugin.xml"></include>\n    \x3c!-- 从Spring容器中获取Action对象 --\x3e\n    <constant name="struts.objectFactory" value="spring"></constant>\n    \x3c!-- 请求和Action方法的动态对应 --\x3e\n    <constant name="struts.enable.DynamicMethodInvocation"\n        value="true" />\n    <package name="t" namespace="/" extends="json-default">\n        <action name="userAction" class="userAction">\n            <result name="searchUsersSuccess">/userList.jsp</result>\n            <result name="searchUserSeuccess" type="json">\n                <param name="root">user</param>\n            </result>\n            <result name="editSuccess" type="json">\n                <param name="root">message</param>\n            </result>\n            <result name="deleteSuccess" type="json">\n                <param name="root">message</param>\n            </result>\n            <result name="addSuccess" type="json">\n                <param name="root">message</param>\n            </result>\n        </action>\n    </package>\n</struts>\n5）web.xml。\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">\n    <display-name>MvnSSHDemo.Struts</display-name>\n    \x3c!-- 启动Spring 容器 --\x3e\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/applicationContext.xml</param-value>\n    </context-param>\n    \x3c!-- struts2的总入口过滤器 --\x3e\n    <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>\n            org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n        </filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <session-config>\n        <session-timeout>\n            30\n        </session-timeout>\n    </session-config>\n    <welcome-file-list>\n        <welcome-file>index.jsp</welcome-file>\n    </welcome-file-list>\n</web-app>\n4. 安装发布测试\n右击“工程”，选择 Run As→Maven install 命令。\n\nMaven 会自动编译、测试代码，并且打成 war 包，将 war 包发布到指定的 Web 服务器的发布目录。接着就可以启动 Tomcat 服务器用浏览器进行测试了。浏览器操作过程同前面基于 Jsp/Servlet 开发的 Demo 一样。\n整合成 SSH\n按前面的操作，用户已经独立地实现了各自模块的功能，并且能将各自的功能封装成构件安装到本地仓库、发布到公司搭建的私服上面，供需要的地方当依赖构件使用。\n\n这体现了模块化的思想，同时考虑到框架的依赖配置的共性，用户可以独立创建工程（POM），将每个独立框架的依赖配置都在公共 POM 工程中设置好。\n\n其他要使用的工程只需继承它们就行了，不需要重复配置。比如，MvnSSHDemo.Struts 就是继承自 StrutsPOM。这体现了 Maven 开发过程中的继承运用思想。\n\n但是，当测试 MvnSSHDemo.Struts 模块功能的时候，发现前面的依赖模块的实现需要修改，这时候就要对修改的模块工程进行独立的编译、测试、打包、安装和发布，然后再测试 MvnSSHDemo.Struts。\n\n如果依赖的第三方模块很多，这样每次改动都需要对每个模块进行重复操作，很麻烦。\n\n为了解决这个问题，Maven 里面有个“聚合”的概念。它能将一个个依赖的模块聚合成一个大项目（工程）。\n\n下面创建一个项目，将 MvnSSHDemo 的相关模块都聚合到一起，同时操作，具体步骤如下。\n1. 创建一个普通工程\n聚合工程结构如图 3 所示。\n聚合工程结构\n图 3  聚合工程结构\n\n2. 在 pom.xml 中配置每个模块\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.ssh.demo</groupId>\n    <artifactId>MvnSSHDemo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>MvnSSHDemo</name>\n    <url>http://maven.apache.org</url>\n    <modules>\n        <module>../MvnSSHDemo.DAO</module>\n        <module>../MvnSSHDemo.DAO.Hibernate</module>\n        <module>../MvnSSHDemo.Service</module>\n        <module>../MvnSSHDemo.Service.impl</module>\n        <module>../MvnSSHDemo.Struts</module>\n    </modules>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n    </dependencies>\n    <build>\n        <plugins>\n        </plugins>\n    </build>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n注：这个 pom.xml 中没有太多信息，注意第 13、15、17 和 19 行的配置，就是将相关的依赖工程以模块的形式聚合进来。\n\n这些工程都需要在同一个工作空间下，才能用“../”类似的相对路径进行定位应用。\n3. 构建\n要对所有模块进行编译、测试、安装、发布的话，都可以直接右击 MvnSSHDemo 工程，选择 Run As→Maven clean→test→install→build.→build 等命令。\n\n当选择 Maven install 命令后，Maven 会自动把整个工程打成 MvnSSHDemo.war 包，发布到 Tomcat 的 webapps 目录中。\n\n同样，如果选择 Maven build… 命令，输入 deploy，单击 Run 按钮，在安装的 Archiva 私服上就可以浏览到所有的构件。\n4．测试\n启动 Tomcat，就可以开始测试操作了，只是请注意：前面有搭建 Archiva 私服的，如果这个私服在开发的时候启动着，并且私服就搭建在自己的计算机上，请将它关闭后再启动测试应用的 Tomcat，或者修改测试应用 Tomcat 的端口，否则会出现端口冲突异常。因为 Archiva 也用 Tomcat 服务器，默认端口就是 8080 系列的。\n\n至此，我们在 Maven 上面基于 SSH 完成了一个用户的 CRUD 功能，中间还体现了项目的模块思想、面向接口编程思想和 Maven 的继承、聚合思想。\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);