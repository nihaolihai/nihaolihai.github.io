(window.webpackJsonp=window.webpackJsonp||[]).push([[507],{1036:function(n,e,t){"use strict";t.r(e);var _=t(6),a=Object(_.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"pgsql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pgsql"}},[this._v("#")]),this._v(" pgsql")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("复制表结构\n\ncreate table his_process_data_201405 as\n( select * from aaa limit 0);\n\n将stp的source_server的数据转化为数组，再以逗号分隔拼接起来转成字符串\n\narray_to_string( ARRAY_AGG ( stp.source_server ), ',' )\n\n将stp的target_server的数据转化为数组，再将数组转换为字符串，用“，”分隔。（有点类似于Mysql的group_concat()函数）\n\narray_to_string( ARRAY_AGG ( stp.target_server ), ',' )\n\n将ab以逗号连接。在下面的案例中：concat_ws ( ',', array_to_string( ARRAY_AGG ( stp.source_server ), ',' ), \n\nconcat_ws ( ',', 'a', 'b' ):\n\narray_to_string( ARRAY_AGG ( stp.target_server ), ',' ) )是将第一步的两个结果，合并成一个字符串\n\nregexp_split_to_table((a,b),',' ):将a,b以逗号分隔开并将a、b分别作为表查询的结果。在下面的案例中，regexp_split_to_table( ( concat_ws ( ',', array_to_string( ARRAY_AGG ( stp.source_server ), ',' ), array_to_string( ARRAY_AGG ( stp.target_server ), ',' ) ) ), ',' )将第二步的结果，以逗号“,”分隔,并把每一项作为结果\n\nDISTINCT将第三步的结果去重\n\nCOUNT ( * )统计第四步去重后的数量\n\nCOUNT (1)统计第四步去重后的数量\n\n类型转换\n\nto_char(insert_time,'yyyymmddd') \n\ncast(11 as INTEGER)\n\n数值格式化0.22可以运行，'0.22'不可以运行\n\nselect rtrim(rtrim(to_char(0.22, 'fm99999999999990.9000000000000'),'0'),'.');\n\n整数型\n\nselect rtrim(rtrim(to_char(0.22::numeric, 'fm99999999999990.9000000000000'),'0'),'.');\n\nNULL::timestamp as time\n\nNULL::character varying as valeu\n\n嵌套更新\n\nupdate t_hx_stk_img as t set g_no = e.g_no\nfrom dc_ems.t_ems_cus_img_cur e\nwhere t.trade_code = e.trade_code \nand t.ems_no = e.ems_no \nand t.cop_g_no = e.cop_g_no\nand coalesce(t.g_no::text,'')='';\n\n嵌套sql\n\nselect t1.*,t2.password as uname from user t1\nleft join(\nselect * from test where password ='66' order by id desc\n) t2 on t1.temp=t2.id\n\n不区分类型\n\n0.22::text\n\n删除约束\n\nALTER TABLE table_name DROP CONSTRAINT some_name;\n\nINNER 关键字是可选的。\n\nSELECT EMP_ID, NAME, DEPT FROM COMPANY INNER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID;\n\n使用is null 或is not null 进行比较\n\nSELECT ID, NAME, AGE, ADDRESS, SALARY FROM COMPANY WHERE SALARY IS NOT NULL;\n\nSELECT ID, NAME, AGE, ADDRESS, SALARY FROM COMPANY WHERE SALARY IS NULL;\n\n单列索引是一个只基于表的一个列上创建的索引，基本语法如下：\n\nCREATE INDEX index_name\n\nON table_name (column_name);\n\n组合索引\n\n组合索引是基于表的多列上创建的索引，基本语法如下：\n\nCREATE INDEX index_name\n\nON table_name (column1_name, column2_name);\n\n唯一索引\n\n使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。基本语法如下：\n\nCREATE UNIQUE INDEX index_name\n\non table_name (column_name);\n\n局部索引\n\n局部索引 是在表的子集上构建的索引；子集由一个条件表达式上定义。索引只包含满足条件的行。基础语法如下：\n\nCREATE INDEX index_name\n\non table_name (conditional_expression);\n\n语法\n用 ALTER TABLE 在一张已存在的表上添加列的语法如下：\n\nALTER TABLE table_name ADD column_name datatype;\n\n在一张已存在的表上 DROP COLUMN（删除列），语法如下：\n\nALTER TABLE table_name DROP COLUMN column_name;\n\n修改表中某列的 DATA TYPE（数据类型），语法如下：\n\nALTER TABLE table_name ALTER COLUMN column_name TYPE datatype;\n\n给表中某列添加 NOT NULL 约束，语法如下：\n\nALTER TABLE table_name MODIFY column_name datatype NOT NULL;\n\n给表中某列 ADD UNIQUE CONSTRAINT（ 添加 UNIQUE 约束），语法如下：\n\nALTER TABLE table_name\n\nADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2…);\n\n给表中 ADD CHECK CONSTRAINT（添加 CHECK 约束），语法如下：\n\nALTER TABLE table_name\n\nADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);\n\n给表 ADD PRIMARY KEY（添加主键），语法如下：\n\nALTER TABLE table_name\n\nADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2…);\n\nDROP CONSTRAINT （删除约束），语法如下：\n\nALTER TABLE table_name\n\nDROP CONSTRAINT MyUniqueConstraint;\n\n创建表\n\nCREATE TABLE weather (\n    city            varchar(80),\n    temp_lo         int,           -- low temperature\n    temp_hi         int,           -- high temperature\n    prcp            real,          -- precipitation\n    date            date\n);\n\n模糊查询\n\n    <if test=\"emsListNo != null and emsListNo != ''\">\n            and b.EMS_LIST_NO like '%'|| #{emsListNo} || '%'\n    </if>\n\n非空判断\n\n    <if test=\"flag != null and flag != '' and flag != '-1' and _databaseId == 'oracle'\">\n            and coalesce(c.FLAG, '0') = #{flag}\n    </if>\n\n    (note is null or note ='')\n\n    now()\n\n日期查询范围\n\n    <choose>\n        <when test=\"_databaseId == 'postgresql'\">\n            <if test=\"declareDateFrom != null and declareDateFrom != ''\">\n                <![CDATA[ and b.DECLARE_DATE >= to_date(#{declareDateFrom}, 'yyyy-MM-dd')]]>\n            </if>\n            <if test=\"declareDateTo != null and declareDateTo != ''\">\n                <![CDATA[ and b.DECLARE_DATE < (to_date(#{declareDateTo}, 'yyyy-MM-dd') + interval '1 day')]]>\n            </if>\n        </when>\n        <otherwise>\n            <if test=\"declareDateFrom != null and declareDateFrom != ''\">\n                <![CDATA[ and b.DECLARE_DATE >= to_date(#{declareDateFrom}, 'yyyy-MM-dd')]]>\n            </if>\n            <if test=\"declareDateTo != null and declareDateTo != ''\">\n                <![CDATA[ and b.DECLARE_DATE < to_date(#{declareDateTo}, 'yyyy-MM-dd') + 1]]>\n            </if>\n        </otherwise>\n    </choose>\n\n判断视图是否存在\n\nselect * from pg_views where schemaname= 'dc_stk';\n\n1、查询锁死表的pid\n\nselect pid from pg_locks where relation in (select oid from pg_class where relname=‘表名’);\n\n2、解锁数据表\n\nselect pg_terminate_backend(‘上一步查询到的pid’);\n\n 创建视图\n\nCREATE VIEW myview AS\n    SELECT city, temp_lo, temp_hi, prcp, date, location\n        FROM weather, cities\n        WHERE city = name;\n\ncreate view v_test as select version()； \n \nselect * from pg_views where schemaname = 'public' and viewname = 'v_test';\n\nSELECT 1 AS column1， 'one' AS column2\nUNION ALL\nSELECT 2， 'two'\nUNION ALL\nSELECT 3， 'three';\n\n复制表结构数据\n\n目标表不存在：create table pl_cover_point_copy_2020_12_09 as select * from pl_cover_point;\n\n目标表存在：select * into pl_cover_point_copy_2020_11_11 from pl_cover_point;\n\n//分析表\n\nanalyze test\n\n--删除索引\n\ndo\n$$\n    declare\n        HEAD_PART_LIST CURSOR FOR\n            select indexname,tablename\n            from pg_indexes where tablename = 't_dc_bill_head' and schemaname ='dc_bill';\n        HEAD_ROW  record;\n        MAIN_PART INTEGER;\n    begin\n        for HEAD_ROW IN HEAD_PART_LIST\n            LOOP\n                MAIN_PART := 0;\n                SELECT COUNT(1)\n                INTO MAIN_PART\n                from pg_indexes\n                where tablename = HEAD_ROW.tablename\n                and indexname = HEAD_ROW.indexname\n                and schemaname ='dc_bill';\n                if MAIN_PART > 0 then\n                    EXECUTE(concat('drop index ', HEAD_ROW.indexname));\n                end if;\n            end loop;\n    end\n$$;\n\n重命名表\n\ndo\n$$\n    declare\n        num INTEGER;\n        old INTEGER;\n    begin\n        select count(1) into old from information_schema.tables where table_name='t_dc_bill_list_part';\n        if old = 0 then\n            select count(1) into num from information_schema.tables where table_name = 't_dc_bill_list';\n            if num = 1 then\n                alter table t_dc_bill_list rename to t_dc_bill_list_part;\n            end if;\n        end if;\n    end\n$$;\n\n\n--建表语句\n\ndrop table if exists erect;\n\ncreate table erect\n(\n    sid                           VARCHAR(40) default sys_guid() not null,\n    trade_code                    VARCHAR(10)                    not null,\n    trade_name                    VARCHAR(50)                    not null,\n    ems_no                        VARCHAR(12)                    not null,\n    ems_list_no                   VARCHAR(64)                    not null,\n    bill_list_no                  VARCHAR(18)                    not null,\n    list_no                       VARCHAR(18),\n    agent_code                    VARCHAR(10),\n    agent_code_ciq                VARCHAR(10),\n    agent_credit_code             VARCHAR(18),\n    agent_name                    VARCHAR(256),\n    bill_no                       VARCHAR(32),\n    business_type                 VARCHAR(10),\n    change_times                  numeric(9)    default 0,\n    classify_reason               VARCHAR(256),\n    classify_time                 timestamp,\n    classify_type                 VARCHAR(10),\n    confirm_price                 VARCHAR(1),\n    confirm_royalties             VARCHAR(1),\n    confirm_special               VARCHAR(1),\n    contr_no                      VARCHAR(32),\n    cut_mode                      VARCHAR(3),\n    data_source                   VARCHAR(1),\n    dclcus_mark                   VARCHAR(1)                     not null,\n    dclcus_type                   VARCHAR(1),\n    decl_customs                  VARCHAR(4),\n    declare_code                  VARCHAR(10)                    not null,\n    declare_credit_code           VARCHAR(18),\n    declare_date                  timestamp,\n    declare_name                  VARCHAR(50)                    not null,\n    declare_type                  VARCHAR(1)  default 1          not null,\n    desp_port                     VARCHAR(6),\n    dest_port                     VARCHAR(6),\n    du_code                       VARCHAR(4),\n    duty_self                     VARCHAR(1),\n    entry_declare_date            timestamp,\n    entry_message_id              VARCHAR(128),\n    entry_no                      VARCHAR(18),\n    entry_port                    VARCHAR(6),\n    entry_status                  VARCHAR(2),\n    entry_type                    VARCHAR(1),\n    error_msg                     VARCHAR(4000),\n    fee_curr                      VARCHAR(3),\n    fee_mark                      VARCHAR(1),\n    fee_rate                      numeric(16, 4),\n    fee_rate_note                 VARCHAR(30),\n    flag                          VARCHAR(1)  default 0,\n    formal_vrfded_date            timestamp,\n    g_mark                        VARCHAR(1)                     not null,\n    gross_wt                      numeric(19, 5),\n    i_e_date                      timestamp,\n    i_e_mark                      VARCHAR(1),\n    i_e_port                      VARCHAR(4)                     not null,\n    ic_card_no                    VARCHAR(20),\n    indb_time                     timestamp,\n    input_code                    VARCHAR(10)                    not null,\n    input_credit_code             VARCHAR(18),\n    input_date                    timestamp         default now()    not null,\n    input_name                    VARCHAR(50)                    not null,\n    insert_time                   timestamp         default now()    not null,\n    insert_user                   VARCHAR(50)                    not null,\n    insur_curr                    VARCHAR(3),\n    insur_mark                    VARCHAR(1),\n    insur_rate                    numeric(16, 4),\n    insur_rate_note               VARCHAR(30),\n    item_cnt                      numeric(9)    default 0          not null,\n    license_no                    VARCHAR(20),\n    list_iochkpt_status           VARCHAR(1),\n    list_type                     VARCHAR(1)  default 0          not null,\n    master_customs                VARCHAR(4)                     not null,\n    merge_type                    VARCHAR(1)  default 0          not null,\n    message_id                    VARCHAR(128),\n    net_wt                        numeric(19, 5),\n    note                          VARCHAR(256),\n    note1                         VARCHAR(255),\n    note2                         VARCHAR(255),\n    note3                         VARCHAR(255),\n    ori_bill_list_no              VARCHAR(20),\n    other_curr                    VARCHAR(3),\n    other_mark                    VARCHAR(1),\n    other_rate                    numeric(16, 4),\n    other_rate_note               VARCHAR(30),\n    overseas_shipper_aeo          VARCHAR(50),\n    overseas_shipper_name         VARCHAR(256),\n    pack_num                      numeric(9),\n    passport_used_mark            VARCHAR(1),\n    pre_seq_no                    VARCHAR(18),\n    pre_vrfded_date               timestamp,\n    receive_code                  VARCHAR(10)                    not null,\n    receive_code_ciq              VARCHAR(10),\n    receive_credit_code           VARCHAR(18),\n    receive_name                  VARCHAR(50)                    not null,\n    rel_ems_no                    VARCHAR(12),\n    rel_entry_declare_code        VARCHAR(10),\n    rel_entry_declare_credit_code VARCHAR(18),\n    rel_entry_declare_name        VARCHAR(50),\n    rel_entry_no                  VARCHAR(18),\n    rel_entry_receive_code        VARCHAR(10),\n    rel_entry_receive_credit_code VARCHAR(18),\n    rel_entry_receive_name        VARCHAR(50),\n    rel_entry_trade_code          VARCHAR(10),\n    rel_entry_trade_credit_code   VARCHAR(18),\n    rel_entry_trade_name          VARCHAR(50),\n    rel_list_no                   VARCHAR(18),\n    rotate_apply_no               VARCHAR(64),\n    rotate_type                   VARCHAR(1),\n    send_user                     VARCHAR(128),\n    seq_no                        VARCHAR(18),\n    status                        VARCHAR(2)                     not null,\n    trade_code_ciq                VARCHAR(10),\n    trade_country                 VARCHAR(3),\n    trade_credit_code             VARCHAR(18),\n    trade_mode                    VARCHAR(4)                     not null,\n    trade_nation                  VARCHAR(3),\n    traf_mode                     VARCHAR(1)                     not null,\n    traf_name                     VARCHAR(50),\n    trans_mode                    VARCHAR(1),\n    update_time                   timestamp         default now(),\n    update_user                   VARCHAR(50),\n    voyage_no                     VARCHAR(32),\n    vrfded_mark                   VARCHAR(1),\n    vrfded_mode                   VARCHAR(2),\n    warehouse                     VARCHAR(100),\n    wrap_type                     VARCHAR(64)\n);\n\ncomment on table ew is '表头';\n\ncomment on column ew.sid is 'SID';\n\n--插入数据\n\ninsert into ew\n\nselect SID, TRADE_CODE, TRADE_NAME, EMS_NO, EMS_LIST_NO, BILL_LIST_NO, LIST_NO, AGENT_CODE,\n       AGENT_CODE_CIQ, AGENT_CREDIT_CODE, AGENT_NAME, BILL_NO, BUSINESS_TYPE, CHANGE_TIMES,\n       CLASSIFY_REASON, CLASSIFY_TIME, CLASSIFY_TYPE, CONFIRM_PRICE, CONFIRM_ROYALTIES,\n       CONFIRM_SPECIAL, CONTR_NO, CUT_MODE, DATA_SOURCE, DCLCUS_MARK, DCLCUS_TYPE,\n       DECL_CUSTOMS, DECLARE_CODE, DECLARE_CREDIT_CODE, DECLARE_DATE, DECLARE_NAME,\n       DECLARE_TYPE, DESP_PORT, DEST_PORT, DU_CODE, DUTY_SELF, ENTRY_DECLARE_DATE,\n       ENTRY_MESSAGE_ID, ENTRY_NO, ENTRY_PORT, ENTRY_STATUS, ENTRY_TYPE, ERROR_MSG, FEE_CURR,\n       FEE_MARK, FEE_RATE, FEE_RATE_NOTE, FLAG, FORMAL_VRFDED_DATE, G_MARK, GROSS_WT, I_E_DATE,\n       I_E_MARK, I_E_PORT, IC_CARD_NO, INDB_TIME, INPUT_CODE, INPUT_CREDIT_CODE, INPUT_DATE,\n       INPUT_NAME, INSERT_TIME, INSERT_USER, INSUR_CURR, INSUR_MARK, INSUR_RATE,\n       INSUR_RATE_NOTE, ITEM_CNT, LICENSE_NO, LIST_IOCHKPT_STATUS, LIST_TYPE, MASTER_CUSTOMS,\n       MERGE_TYPE, MESSAGE_ID, NET_WT, NOTE, NOTE1, NOTE2, NOTE3, ORI_BILL_LIST_NO, OTHER_CURR,\n       OTHER_MARK, OTHER_RATE, OTHER_RATE_NOTE, OVERSEAS_SHIPPER_AEO, OVERSEAS_SHIPPER_NAME,\n       PACK_NUM, PASSPORT_USED_MARK, PRE_SEQ_NO, PRE_VRFDED_DATE, RECEIVE_CODE,\n       RECEIVE_CODE_CIQ, RECEIVE_CREDIT_CODE, RECEIVE_NAME, REL_EMS_NO, REL_ENTRY_DECLARE_CODE,\n       REL_ENTRY_DECLARE_CREDIT_CODE, REL_ENTRY_DECLARE_NAME, REL_ENTRY_NO,\n       REL_ENTRY_RECEIVE_CODE, REL_ENTRY_RECEIVE_CREDIT_CODE, REL_ENTRY_RECEIVE_NAME,\n       REL_ENTRY_TRADE_CODE, REL_ENTRY_TRADE_CREDIT_CODE, REL_ENTRY_TRADE_NAME, REL_LIST_NO,\n       ROTATE_APPLY_NO, ROTATE_TYPE, SEND_USER, SEQ_NO, STATUS, TRADE_CODE_CIQ, TRADE_COUNTRY,\n       TRADE_CREDIT_CODE, TRADE_MODE, TRADE_NATION, TRAF_MODE, TRAF_NAME, TRANS_MODE,\n       UPDATE_TIME, UPDATE_USER, VOYAGE_NO, VRFDED_MARK, VRFDED_MODE, WAREHOUSE, WRAP_TYPE\nfrom re;\n\ncreate index IDX_BILL_LIST_005_NEW on T_DC_BILL_LIST_NEW (TRADE_CODE, EMS_NO,HEAD_ID);\n\ncreate unique index IDX_BILL_LIST_006_NEW on T_DC_BILL_LIST_NEW (TRADE_CODE, EMS_NO,BILL_LIST_NO, SERIAL_NO);\n\ndo\n$$\n    declare\n        HEAD_PARTITION CURSOR FOR\n            SELECT TRADE_CODE, EMS_NO\n            FROM t_dc_bill_list\n            group by TRADE_CODE, EMS_NO;\n        HEAD_ROW  record;\n        MAIN_PART INTEGER;\n        SUB_PART  INTEGER;\n        MAIN_PREFIX VARCHAR(50);\n        SUB_PREFIX VARCHAR(50);\n        T_NAME VARCHAR(50);\n    begin\n        for HEAD_ROW IN HEAD_PARTITION\n            LOOP\n                MAIN_PART := 0;\n                SUB_PART := 0;\n                MAIN_PREFIX := 'b_l_p_';\n                SUB_PREFIX := 'b_l_s_';\n                T_NAME := 't_dc_bill_list_new';\n                SELECT COUNT(1)\n                INTO MAIN_PART\n                FROM (SELECT relid::text, parentrelid::text, level FROM pg_partition_tree(T_NAME)) t\n                WHERE parentrelid = T_NAME\n                  AND relid = lower(concat(MAIN_PREFIX,HEAD_ROW.TRADE_CODE))\n                  and level = 1;\n                SELECT COUNT(1)\n                INTO SUB_PART\n                FROM (SELECT relid::text, parentrelid::text, level FROM pg_partition_tree(T_NAME)) t\n                WHERE parentrelid = lower(concat(MAIN_PREFIX,HEAD_ROW.TRADE_CODE))\n                  AND relid = lower(concat(SUB_PREFIX,HEAD_ROW.EMS_NO))\n                  and level = 2;\n                if MAIN_PART = 0 then\n                    EXECUTE(concat('create table ', MAIN_PREFIX, HEAD_ROW.TRADE_CODE, ' partition of ',T_NAME,' for values in (''', HEAD_ROW.TRADE_CODE, ''') partition by list(EMS_NO);'));\n                end if;\n                if SUB_PART = 0 then\n                    EXECUTE(concat('create table ', SUB_PREFIX, HEAD_ROW.EMS_NO, ' partition of ', MAIN_PREFIX, HEAD_ROW.TRADE_CODE,' for values in (''', HEAD_ROW.EMS_NO, ''')'));\n                end if;\n            end loop;\n    end\n$$;\n\n\ndo\n$$\n    declare\n        num INTEGER;\n        old INTEGER;\n    begin\n        select count(1) into old from information_schema.tables where table_name='t_dc_bill_list_old';\n        if old = 0 then\n            select count(1) into num from information_schema.tables where table_name = 't_dc_bill_list';\n            if num = 1 then\n                alter table t_dc_bill_list rename to t_dc_bill_list_old;\n\n                select count(1) into num from pg_indexes where indexname = 'idx_bill_list_001';\n                if num = 1 then\n                    alter index idx_bill_list_001 rename to idx_bill_list_001_old;\n                end if;\n            end if;\n        end if;\n        select count(1) into num from information_schema.tables where table_name = 't_dc_bill_list';\n        if num = 0 then\n            alter table t_dc_bill_list_new rename to t_dc_bill_list;\n            alter index idx_bill_list_001_new rename to idx_bill_list_001;\n        end if;\n    end\n$$;\n\n触发器（如果已存在则删除后重新创建）：\n\ndrop TRIGGER if exists tsut_aud_data_truncate_trigger ON tsut_aud ;\n\n-- before:在插入和更新数据前使用function处理\n\ncreate trigger tsut_aud_data_truncate_trigger before insert or update on tsut_aud for each row execute procedure tsut_aud_data_trunc_trigger();\n\n\nPS:触发器语法不支持create trigger if not exists\n\n \n ALTER TABLE dingtalk_corp_info ADD COLUMN IF NOT EXISTS admin_id TEXT;\n\n 其中用IF EXISTS判断表是否存在，存在则删除\n\n DROP TABLE IF EXISTS tableName\n\n 创建主键\n\nalter table table_name add constraint constraint_name primary key(column_name1,column_name2);\n\n创建唯一约束\n\nalter table table_name add constraint constraint_name unique(column_name1,column_name2);\n\nalter table t1 drop constraint uk_t1_id keep index;\n\n删除约束\n\nalter table T_INVITEE_RECORD_TEST drop constraint SYS_C00133333 cascade drop index;\n\nalter table table_name drop constraint if EXISTS uk_users_name1;\n\n\n查看约束信息\n\nSELECT\n   tc.constraint_name, tc.table_name, kcu.column_name, \n   ccu.table_name AS foreign_table_name,\n   ccu.column_name AS foreign_column_name,\n   tc.is_deferrable,tc.initially_deferred\n FROM\n   information_schema.table_constraints AS tc \n   JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name\n   JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name\n WHERE constraint_type = 'UNIQUE' AND tc.table_name = 't_hx_dcr_consume';\n\nselect * from information_schema.key_column_usage where constraint_name ='pk_t_hx_dcr_consume'\n\n删除约束及关联索引\n\nalter table T_INVITEE_RECORD_TEST drop constraint SYS_C00133333 cascade drop index;\n\n删除主键及关联索引\n\nalter table T_INVITEE_RECORD_TEST drop primary key cascade drop index;\n\n //查看所有的存储过程\n手动异常返回\nRAISE USING hint = -20000, message = '当前状态不允许新增或修改', detail = 'User-defined exception';\n最后异常返回\n EXCEPTION\n            WHEN OTHERS THEN\n            v_isok := FALSE;\n            p_ret_code := SQLSTATE::TEXT;\n            p_ret_str := substr(SQLERRM, 1, 200);\n            ROLLBACK;\n            IF(v_isok) THEN\n            COMMIT;\n            END IF;\n去除多余0\nrtrim(rtrim(to_char(l.FACTOR_1,'fm99999999999990.9000000000000'),'0'),'.')  FACTOR_1,\nmybatis传入单个字符判断,针对字符类型值最后加.toString()\n  <if test=\"COP_G_NO != null and COP_G_NO != '' and COP_G_NO=='0'.toString()\">\n   and COP_G_NO=#{COP_G_NO}\n  </if>\n存储过程是否存在\n select * from pg_proc；\n\n select count(1) from pg_proc join pg_namespace on pg_namespace.oid=pg_proc.pronamespace where proname='p_bill_generate_no' and pg_namespace.nspname='db';\n DROP PROCEDURE p_bill_generate_no;\n\n执行存储过程\n<parameterMap type=\"java.util.Map\" id=\"checkTmpMap2\">\n    <parameter property=\"P_TEMP_OWNER\" mode=\"IN\" jdbcType=\"VARCHAR\"/>\n    <parameter property=\"P_FLAG\" mode=\"IN\" jdbcType=\"VARCHAR\"/>\n    <parameter property=\"P_RET_CODE\" mode=\"IN\" jdbcType=\"VARCHAR\"/>\n    <parameter property=\"P_RET_STR\" mode=\"IN\" jdbcType=\"VARCHAR\"/>\n</parameterMap>\n<select id=\"checkTmpByParam\" parameterMap=\"checkTmpMap2\" statementType=\"CALLABLE\" resultType=\"java.util.Map\" databaseId=\"postgresql\">\n    CALL P_EMS_CUS_EXG_LOCK(?,?,?,?)\n</select>\n 创建存储过程\n\n CREATE OR REPLACE PROCEDURE saa()\n            LANGUAGE plpgsql\n            AS $procedure$\n            DECLARE\n            p_g_no DOUBLE PRECISION;\n            p_message_id CHARACTER VARYING(64);\n            p_ems_no CHARACTER VARYING(20);\n            /* 定义游标 */\n            dec_task CURSOR FOR\n            SELECT * FROM dc_bill.t_dc_dec_task AS t\n            WHERE t.status = '0' AND dc_bill.f_xdo_nvl(t.message_id,'') = ''\n            FOR UPDATE;\n            /* 定义一个游标变量 */\n            dec_row record;\n            BEGIN\n            FOR dec_row IN dec_task LOOP\n            SELECT COALESCE(MAX(g_no) + 1, 1) INTO STRICT p_g_no\n            FROM dc_bill.t_dc_dec_task AS t\n            WHERE t.trade_code = dec_row.trade_code AND t.business_type = dec_row.business_type AND t.send_recv_type = 'S' AND t.insert_time &gt;= DATE_TRUNC('day', dec_row.INSERT_TIME) AND t.insert_time &lt; DATE_TRUNC('day', dec_row.INSERT_TIME) + (1::NUMERIC || ' days')::INTERVAL;\n            SELECT substr(ems_no, 1, 1) INTO STRICT p_ems_no\n            FROM dc_bill.t_dc_dec_task\n            WHERE sid = dec_row.SID;\n            IF dec_row.business_type = 'ENTRY' THEN\n            UPDATE dc_bill.t_dc_dec_task\n            SET g_no = p_g_no,message_id = CONCAT_WS('', 'DECLENTER', '-', dec_row.trade_code, '-', TO_CHAR(DATE_TRUNC('second', dec_row.insert_time), 'YYYYMMDD'), '-', LPAD(p_g_no::TEXT, 4, '0'))\n            WHERE CURRENT OF DEC_TASK;\n            ELSIF dec_row.business_type = 'BILL' THEN\n            IF p_ems_no = 'E' THEN\n            p_message_id := CONCAT_WS('', 'NEMSINVT', '-', dec_row.trade_code, '-', TO_CHAR(DATE_TRUNC('second', dec_row.insert_time), 'YYYYMMDD'), '-', LPAD(p_g_no::TEXT, 4, '0'));\n            ELSE\n            p_message_id := CONCAT_WS('', 'NPTSINVT', '-', dec_row.trade_code, '-', TO_CHAR(DATE_TRUNC('second', dec_row.insert_time), 'YYYYMMDD'), '-', LPAD(p_g_no::TEXT, 4, '0'));\n            END IF;\n            UPDATE dc_bill.t_dc_dec_task\n            SET g_no = p_g_no,message_id = p_message_id\n            WHERE CURRENT OF DEC_TASK;\n            END IF;\n            END LOOP;\n            END;\n            $procedure$\n\n CREATE OR REPLACE PROCEDURE sadfsa(p_temp_owner text, p_flag text, INOUT p_ret_code text, INOUT p_ret_str text)\n            LANGUAGE plpgsql\n            AS $procedure$\n            /* 批次（guid） */\n            /* 标识（0：校验 1：导入） */\n            DECLARE\n            p_trade_code CHARACTER VARYING(10);\n            /* 海关10位编码 */\n            p_cop_g_no CHARACTER VARYING(50);\n            /* 料号 */\n            p_ems_no CHARACTER VARYING(50);\n            v_isok BOOLEAN;\n            /* */\n            begin\n            v_isok := true;\n            SELECT\n            trade_code\n            INTO STRICT p_trade_code\n            FROM t_ems_cus_exg_lock_tmp\n            WHERE temp_owner = p_temp_owner\n            LIMIT 1;\n            SELECT\n            cop_g_no\n            INTO STRICT p_cop_g_no\n            FROM t_ems_cus_exg_lock_tmp\n            WHERE temp_owner = p_temp_owner\n            LIMIT 1;\n            SELECT\n            ems_no\n            INTO STRICT p_ems_no\n            FROM t_ems_cus_exg_lock_tmp\n            WHERE temp_owner = p_temp_owner\n            LIMIT 1;\n\n            IF p_flag = '0' OR p_flag = '2' OR p_flag = '3' THEN\n            /* 校验 */\n            /* 料号不存在 */\n            /* */\n            UPDATE t_ems_cus_exg_lock_tmp AS tmp\n            SET temp_flag = 1, temp_remark = CONCAT_WS('', tmp.temp_remark, '|成品不存在')\n            WHERE NOT EXISTS (SELECT\n            1\n            FROM t_ems_cus_exg_lock\n            WHERE ems_no = tmp.ems_no AND cop_g_no = tmp.cop_g_no\n            /* 成品的 TRADE_CODE字段是需要声明的变量，还是临时表中的数据？ */\n            /* AND TRADE_CODE = P_TRADE_CODE */\n            ) AND temp_owner = p_temp_owner;\n            /* 检查成品号是否重复 */\n            UPDATE t_ems_cus_exg_lock_tmp AS tmp\n            SET temp_flag = 1, temp_remark = CONCAT_WS('', tmp.temp_remark, '|成品号重复!')\n            WHERE EXISTS (SELECT\n            1\n            FROM t_ems_cus_exg_lock_tmp AS tmp1\n            WHERE tmp1.temp_owner = p_temp_owner AND tmp1.cop_g_no = tmp.cop_g_no\n            GROUP BY cop_g_no\n            HAVING COUNT(cop_g_no) &gt; 1) AND temp_owner = p_temp_owner;\n            /* 判断锁定解锁标志是否正确 */\n            UPDATE t_ems_cus_exg_lock_tmp AS tmp\n            SET temp_flag = 1, temp_remark = CONCAT_WS('', tmp.temp_remark, '|锁定解锁标志不正确')\n            WHERE (tmp.type &lt;&gt; '0' AND tmp.type &lt;&gt; '1') AND tmp.temp_owner = p_temp_owner;\n            END IF;\n\n            IF p_flag = '1' OR p_flag = '2' THEN\n            /* 修改导入 */\n            update t_ems_cus_exg_lock a set\n            type = b.type,note = b.note, update_time = CURRENT_TIMESTAMP, update_user = b.update_user\n            from t_ems_cus_exg_lock_tmp as b\n            where a.cop_g_no = b.cop_g_no and a.ems_no = b.ems_no\n            and temp_flag IN (0, 2) AND temp_owner = p_temp_owner;\n            /*\n            UPDATE t_ems_cus_exg_lock\n            SET type = t.type, update_time = aws_oracle_ext.SYSDATE(), update_user = t.update_user\n            FROM t_ems_cus_exg_lock AS e\n            INNER JOIN (SELECT\n            tmp.type, tmp.cop_g_no, tmp.ems_no, tmp.trade_code, tmp.update_user\n            FROM t_ems_cus_exg_lock_tmp AS tmp\n            WHERE tmp.temp_flag IN (0, 2) AND tmp.temp_owner = p_temp_owner) AS t\n            ON t.cop_g_no = e.cop_g_no AND t.ems_no = e.ems_no;\n            */\n            /* 删除临时表里本次导入的数据 */\n\n            IF p_flag = '1' THEN\n            DELETE FROM t_ems_cus_exg_lock_tmp AS tmp\n            WHERE temp_owner = p_temp_owner;\n            ELSIF p_flag = '2' THEN\n            DELETE FROM t_ems_cus_exg_lock_tmp AS tmp\n            WHERE temp_owner = p_temp_owner AND temp_flag = '0'::NUMERIC;\n            END IF;\n            END IF;\n            EXCEPTION\n            WHEN others then\n            v_isok := false;\n            p_ret_code := SQLSTATE::TEXT;\n            p_ret_str := substr(SQLERRM, 1, 200);\n            ROLLBACK;\n            if(v_isok) then\n            commit;\n            end if;\n            END;\n            $procedure$\n            ;\nCREATE OR REPLACE PROCEDURE test_gen_message_id()\n LANGUAGE plpgsql\nAS $procedure$\n            DECLARE\n            p_g_no DOUBLE PRECISION;\n            p_message_id CHARACTER VARYING(64);\n            p_ems_no CHARACTER VARYING(20);\n            /* 定义游标 */\n            dec_task CURSOR FOR\n            SELECT * FROM dc_bill.t_dc_dec_task AS t\n            WHERE t.status = '0' AND dc_bill.f_xdo_nvl(t.message_id,'') = ''\n            FOR UPDATE;\n            /* 定义一个游标变量 */\n            dec_row record;\n            BEGIN\n            FOR dec_row IN dec_task LOOP\n            SELECT COALESCE(MAX(g_no) + 1, 1) INTO STRICT p_g_no\n            FROM dc_bill.t_dc_dec_task AS t\n            WHERE t.trade_code = dec_row.trade_code AND t.business_type = dec_row.business_type AND t.send_recv_type = 'S' AND t.insert_time >= DATE_TRUNC('day', dec_row.INSERT_TIME) AND t.insert_time < DATE_TRUNC('day', dec_row.INSERT_TIME) + (1::NUMERIC || ' days')::INTERVAL;\n            SELECT substr(ems_no, 1, 1) INTO STRICT p_ems_no\n            FROM dc_bill.t_dc_dec_task\n            WHERE sid = dec_row.SID;\n            IF dec_row.business_type = 'ENTRY' THEN\n            UPDATE dc_bill.t_dc_dec_task\n            SET g_no = p_g_no,message_id = CONCAT_WS('', 'DECLENTER', '-', dec_row.trade_code, '-', TO_CHAR(DATE_TRUNC('second', dec_row.insert_time), 'YYYYMMDD'), '-', LPAD(p_g_no::TEXT, 4, '0'))\n            WHERE CURRENT OF DEC_TASK;\n            ELSIF dec_row.business_type = 'BILL' THEN\n            IF p_ems_no = 'E' THEN\n            p_message_id := CONCAT_WS('', 'NEMSINVT', '-', dec_row.trade_code, '-', TO_CHAR(DATE_TRUNC('second', dec_row.insert_time), 'YYYYMMDD'), '-', LPAD(p_g_no::TEXT, 4, '0'));\n            ELSE\n            p_message_id := CONCAT_WS('', 'NPTSINVT', '-', dec_row.trade_code, '-', TO_CHAR(DATE_TRUNC('second', dec_row.insert_time), 'YYYYMMDD'), '-', LPAD(p_g_no::TEXT, 4, '0'));\n            END IF;\n            UPDATE dc_bill.t_dc_dec_task\n            SET g_no = p_g_no,message_id = p_message_id\n            WHERE CURRENT OF DEC_TASK;\n            END IF;\n            END LOOP;\n            END;\n            $procedure$\n;\n \nCREATE OR REPLACE PROCEDURE efwfwe(p_temp_owner text, p_flag text, INOUT p_ret_code text, INOUT p_ret_str text)\n LANGUAGE plpgsql\nAS $procedure$\n/* 批次（guid） */\n/* 标识（0：校验 1：导入） */\nDECLARE\n    p_trade_code CHARACTER VARYING(10);\n    /* 海关10位编码 */\n    p_cop_g_no CHARACTER VARYING(50);\n    /* 料号 */\n    p_ems_no CHARACTER VARYING(50);\n    v_isok BOOLEAN;\nbegin\n\tv_isok := true;\n    SELECT\n        trade_code\n        INTO STRICT p_trade_code\n        FROM t_ems_cus_img_lock_tmp\n        WHERE temp_owner = p_temp_owner\n        LIMIT 1;\n    SELECT\n        cop_g_no\n        INTO STRICT p_cop_g_no\n        FROM t_ems_cus_img_lock_tmp\n        WHERE temp_owner = p_temp_owner\n        LIMIT 1;\n    SELECT\n        ems_no\n        INTO STRICT p_ems_no\n        FROM t_ems_cus_img_lock_tmp\n        WHERE temp_owner = p_temp_owner\n        LIMIT 1;\n\n    IF p_flag = '0' OR p_flag = '2' OR p_flag = '3' THEN\n        /* 校验 */\n        /* 料号不存在 */\n        /* */\n        UPDATE t_ems_cus_img_lock_tmp AS tmp\n        SET temp_flag = 1, temp_remark = CONCAT_WS('', tmp.temp_remark, '|料件不存在')\n            WHERE NOT EXISTS (SELECT\n                1\n                FROM t_ems_cus_img_lock\n                WHERE ems_no = tmp.ems_no AND cop_g_no = tmp.cop_g_no) AND temp_owner = p_temp_owner;\n        /* 检查成品号是否重复 */\n        UPDATE t_ems_cus_img_lock_tmp AS tmp\n        SET temp_flag = 1, temp_remark = CONCAT_WS('', tmp.temp_remark, '|导入文件中料号重复，不予导入!')\n            WHERE EXISTS (SELECT\n                1\n                FROM t_ems_cus_img_lock_tmp AS tmp1\n                WHERE tmp1.temp_owner = p_temp_owner AND tmp1.cop_g_no = tmp.cop_g_no\n                GROUP BY cop_g_no\n                HAVING COUNT(cop_g_no) > 1) AND temp_owner = p_temp_owner;\n        /* 判断锁定解锁标志是否正确 */\n        UPDATE t_ems_cus_img_lock_tmp AS tmp\n        SET temp_flag = 1, temp_remark = CONCAT_WS('', tmp.temp_remark, '|锁定解锁标志不正确')\n            WHERE (tmp.type <> '0' AND tmp.type <> '1') AND tmp.temp_owner = p_temp_owner;\n    END IF;\n\n    IF p_flag = '1' OR p_flag = '2' THEN\n        /* 修改导入 */\n    \tupdate t_ems_cus_img_lock a set \n        type = b.type, update_time = CURRENT_TIMESTAMP, update_user = b.update_user\n        from t_ems_cus_img_lock_tmp as b \n        where a.cop_g_no = b.cop_g_no and a.ems_no = b.ems_no \n        and temp_flag IN (0, 2) AND temp_owner = p_temp_owner;\n       \n        /* 删除临时表里本次导入的数据 */\n\n        IF p_flag = '1' THEN\n            DELETE FROM t_ems_cus_img_lock_tmp AS tmp\n                WHERE temp_owner = p_temp_owner;\n        ELSIF p_flag = '2' THEN\n            DELETE FROM t_ems_cus_img_lock_tmp AS tmp\n                WHERE temp_owner = p_temp_owner AND temp_flag = '0'::NUMERIC;\n        END IF;\n    END IF;\n    EXCEPTION\n        WHEN others then\n        \tv_isok := false;\n            p_ret_code := SQLSTATE::TEXT;\n            p_ret_str := substr(SQLERRM, 1, 200);\n            ROLLBACK;\n    if(v_isok) then\n\t\tcommit;\n    end if;\nEND;\n$procedure$\n;\n\n建表语句\ncreate table t_ems_action_log\n(\n  sid           VARCHAR(40) default sys_guid(),\n  trade_code    VARCHAR(10),\n  ems_no        VARCHAR(12),\n  dcr_times     float8,//numeric(12,9)\n  cop_ems_no    VARCHAR(20),\n  action        VARCHAR(32) not null,\n  business_type VARCHAR(100) not null,\n  note          VARCHAR(4000),\n  insert_time   timestamp default now(),\n  insert_user   VARCHAR(50)\n);\n-- Add comments to the columns\ncomment on column t_ems_action_log.sid\n  is 'SID';\ncomment on column t_ems_action_log.trade_code\n  is '位编码';\ncomment on column t_ems_action_log.ems_no\n  is '测试号';\ncomment on column t_ems_action_log.dcr_times\n  is '次数';\ncomment on column t_ems_action_log.cop_ems_no\n  is '部编号';\ncomment on column t_ems_action_log.action\n  is '操作{WIPE_ALL:清空数据；DEL：删除数据; CANCEL_AUTO_DEC: } ';\ncomment on column t_ems_action_log.business_type\n  is '业务类型{TR:资质  EMS:账册  DCR:报核 }';\ncomment on column t_ems_action_log.note\n  is '日志{DEL类型是记录本次删除数据的SID,多条是以'',''隔开}';\ncomment on column t_ems_action_log.insert_time\n  is '插入时间';\ncomment on column t_ems_action_log.insert_user\n  is '插入人';\n\ndrop PROCEDURE p_dcr_generate_no;\n\n性能优化\n\nUPDATE tetre tmp \n\t\t\t   SET temp_remark = concat_ws(\n\t\t\t\t '',\n\t\t\t\t temp_remark, \n\t\t     CASE WHEN (SELECT COUNT (1) FROM wewe tmp1 \n\t\t\t   WHERE tmp1.temp_owner = p_temp_owner AND tmp.cop_exg_no = tmp1.cop_exg_no\n               AND tmp.cop_img_no = tmp1.cop_img_no\n               AND tmp.exg_version = tmp1.exg_version\n               AND tmp.sid <> tmp1.sid) > 0 THEN\n\t\t\t\t\t'|error:存在ew的多行数据' ELSE ''\t\n\t\t     END) \n\t\t\t   WHERE temp_owner = p_temp_owner;\n\t\t\t\t \nUPDATE we tmp \n         SET temp_remark = concat_ws('', tmp.temp_remark, '|error:号不存在')\n         WHERE NOT EXISTS (SELECT 1\n            FROM wewe p\n            WHERE p.trade_code = p_trade_code\n            AND tmp.cop_img_no = p.cop_g_no\n            AND p.cop_ems_no = p_cop_ems_no)\n            AND temp_owner = p_temp_owner;\n\n删除默认值\n\nALTER TABLE test ALTER COLUMN dcr_cycle DROP DEFAULT;\n \n--新建一个字段uid1\n \nalter table user add column uid1 serial;\n\nDO\n$do$\nBEGIN\nIF (select count(*) from information_schema.columns where table_name = 't_dc_dec_task' and column_name='send_counter') < 1\nTHEN\n   ALTER TABLE t_dc_dec_task ADD COLUMN send_counter int2 NOT NULL DEFAULT 0;\nEND IF;\nEND\n$do$;\n\nCOMMENT ON COLUMN t_dc_dec_task.send_counter IS '发送次数';\n\n \n--删除老字段uid\n \nalter table user drop column uid;\n \n--修改uid1字段名称为uid\n \nalter table user rename uid1 to uid;\n \nalter table t_dc_bill_template alter column receive_name drop not null;\n\nALTER TABLE t_dc_bill_cfg ALTER COLUMN value TYPE varchar(256) USING value::varchar;\n\n判断序号是否连续\nselect * from (SELECT temp_index, ROW_NUMBER() OVER(order by temp_index) as ROWNO from(\nselect * from t_dc_bill_list_tmp where \ntemp_owner = '59a81987-a97a-5696-b755-cb9dce29ba76-Z80000000000000432-3223940025' \norder by temp_index) as tt ) as t1\nwhere t1.temp_index!=ROWNO\n\n--增加主键\n  \nalter table user add primary key (uid);\n\n当前时间减去2天\nselect now() - 2 * interval '1 day';\n\n索引是否存在\n\nselect count(1) into isExist from pg_indexes where tablename =('t_dc_bill_head') and INDEXNAME=('idx_bill_head_06')and schemaname ='dc_bill';\n    if isExist > 0 then\n        execute ('DROP INDEX idx_bill_head_06');\n    end if;\n\n    select count(1) into num from information_schema.tables where table_name = 't_dc_bill_head';\n        if num = 0 then\n            alter table t_dc_bill_head_new rename to t_dc_bill_head;\n            alter index idx_bill_head_000_new rename to idx_bill_head_000;\n    end if;\n\n表是否存在\n\nselect * from information_schema.tables where table_schema = 'db';\n\n表结构\n\nSELECT table_name,column_name,data_type FROM information_schema.columns\nwhere table_schema='db' and table_name='dbtable';\n\nselect count(1) from pg_class where relkind='i' and relname=('IDX_T_DC_BILL_HEAD_13');\n\ncreate index IDX_T_DC_BILL_HEAD_13 on T_DC_BILL_HEAD (ENTRY_MESSAGE_ID);\n\n\nalter table  \"t_dc_dec_responses_bill\"  alter column \"fail_info\" type varchar(4000);\n\n\nALTER TABLE dc_bill.t_dc_bill_core_task ALTER COLUMN para TYPE varchar(4000);\n\nALTER TABLE t_dc_bill_template ALTER COLUMN declare_code DROP NOT NULL;\n\n\nALTER TABLE t_dc_bill_template ALTER COLUMN fee_rate TYPE numeric(16,4) USING fee_rate::numeric;\n\n\n修改索引名\n\nalter index idx_bill_head_005 rename to idx_bill_head_005_old;\n\n\n select date_trunc('month',now()) +interval '12 h';\t\t\n//每月1号 12点\t\t\nselect date_trunc('month',now()) + interval '15 d 9 h 30 min';\t\t\n//每月15号9点半\t\t\nselect date_trunc('day',now()) + interval '9 h';\t\t\n//每天9点\t\t\nselect date_trunc('day',now()) + interval '7 d';\t\t\n//每周的今天\t\t\nselect date_trunc('weak',now())  + interval '1d 1minute';\t\t\n//每周的周二第一分钟\t\t\nselect date_trunc('h',now()) + interval '30 minute';\t\t\n//每小时\t\t\nselect date_trunc('minute',now()) + interval '30 second';\t\t\n//每分钟\t\t\nselect date_trunc('minute',now()) + interval '30 minute 30 second';\t\t\n//每30分钟 \t\t\t\nselect date_trunc('quarter',now()) + interval '15 d 15 h 15 minute 30 second';\t\t\n//本季度的第15天,15小时 15分 30秒\t\t\nselect date_trunc('quarter',now() ) - interval '1 h';\t\t\n//每个季度最后一天的晚上11点\t\t\nselect date_trunc('quarter',now() + interval '3 month') - interval '1 h';\t\t\n//每个季度的最后一天的晚上的11点(从下个季度开始算起)              \n\n函数/存储过程（如果已存在则更新）：\n\nCREATE OR REPLACE FUNCTION test_current_date()\n RETURNS date\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN CURRENT_DATE;\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_current_timestamp()\n RETURNS timestamp without time zone\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN DATE_TRUNC('second', CURRENT_TIMESTAMP);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_date_trunc(p_date timestamp without time zone)\n RETURNS date\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN DATE_TRUNC('day', p_date);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_date_nvl(anyelement, anyelement)\n RETURNS anyelement\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN COALESCE($1, $2);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_aud_data_trunc_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nbegin\n    NEW.lchgusr = substring(NEW.lchgusr for 40);\n    NEW.userid = substring(NEW.userid for 129);\n    NEW.status = substring(NEW.status for 1);\n\n  return NEW;\nend;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_date_addorsub(p_date timestamp without time zone, p_interval numeric, p_unit character varying)\n RETURNS timestamp without time zone\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    IF p_unit = 'y' or p_unit = 'Y' THEN\n        RETURN p_date + p_interval * interval '1 year';\n    elsif p_unit = 'm' or p_unit = 'M' THEN\n        RETURN p_date + p_interval * interval '1 month';\n    elsif p_unit = 'd' or p_unit = 'D' THEN\n        RETURN p_date + p_interval * interval '1 day';\n    elsif p_unit = 'h' or p_unit = 'H' THEN\n        RETURN p_date + p_interval * interval '1 hour';\n    elsif upper(p_unit) = 'MI' THEN\n        RETURN p_date + p_interval * interval '1 min';\n    elsif p_unit = 's' or p_unit = 'S' THEN\n        RETURN p_date + p_interval * interval '1 sec';\n    END IF;\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_date_diff(p_date1 timestamp without time zone, p_date2 timestamp without time zone)\n RETURNS numeric\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN EXTRACT(epoch FROM p_date1 - p_date2) / 3600 / 24;\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_date_trunc(p_date timestamp without time zone)\n RETURNS date\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN DATE_TRUNC('day', p_date);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_nvl(anyelement, anyelement)\n RETURNS anyelement\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN COALESCE($1, $2);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_nvl2(anyelement, anyelement, anyelement)\n RETURNS anyelement\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    IF $1 IS NOT NULL THEN\n        RETURN $2;\n    ELSE\n        RETURN $3;\n\tEND IF;\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_to_date(p_date text, p_format text)\n RETURNS timestamp without time zone\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN to_timestamp(p_date, p_format);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_to_date_only(p_date text, p_format text)\n RETURNS date\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN to_date(p_date, p_format);\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_to_number(p_text text)\n RETURNS numeric\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN to_number(p_text, regexp_replace(p_text, '[0-9]', '9', 'g'));\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_xdo_decode(anyelement, anyelement, anyelement, anyelement, anyelement, anyelement)\n RETURNS anyelement\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    CASE $1\n    WHEN $2 THEN\n        RETURN $3;\n    WHEN $4 THEN\n        RETURN $5;\n    ELSE\n        RETURN $6;\n    END CASE;\nEND;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION sys_guid()\n RETURNS uuid\n LANGUAGE sql\n STRICT\nAS $function$\nselect uuid_generate_v4();\n$function$\n;\n\nCREATE OR REPLACE FUNCTION uuid_generate_v4()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v4$function$\n;\n\nCREATE OR REPLACE FUNCTION test_create_partitions()\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\ndeclare\n\t\tsc RECORD;\n\t\ttb RECORD;\n\t\tsql1 VARCHAR(500);\n\tbegin\n\t\tfor sc in (select t.cav_mark,t.ems_no from t_hx_dcr_list t) loop\n\t\t\tfor tb in (select p.partition_table_name, p.note from t_hx_partition p) loop \n\t\t\t\t\n\t\t\t\tsql1 := 'create table if not exists ' || tb.partition_table_name || '_' || sc.cav_mark || ' partition of '|| tb.partition_table_name ||'(cav_mark) for values in ('''|| sc.cav_mark ||''');';\n\t\t\t\tEXECUTE sql1;\n\t\t\tend loop;\n\t\tend loop;\n\t\treturn 1;\n\tend;\n$function$\n;\n\nCREATE OR REPLACE FUNCTION test_to_char(createtime timestamp without time zone)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE\nAS $function$  \n    select to_char($1, 'YYYYMM');  \n$function$\n;\n\nCREATE OR REPLACE PROCEDURE test_ret_log(p_cop_ems_no text, p_sid text, p_status text, p_trade_code text, INOUT p_ret_code text, INOUT p_ret_str text)\n LANGUAGE plpgsql\nAS $procedure$\nDECLARE\n    p_head_id CHARACTER VARYING(40);\n    p_declare_type CHARACTER VARYING(1);\n    p_count NUMERIC(38);\n    p_flag CHARACTER VARYING(1);\n    v_isok BOOLEAN;\nbegin\n\tv_isok := true;\n    SELECT\n        head_id\n        INTO STRICT p_head_id\n        FROM t_ems_dec_responses_cus\n        WHERE sid = p_sid;\n    SELECT\n        declare_type\n        INTO STRICT p_declare_type\n        FROM t_ems_cus_head_pre\n        WHERE cop_ems_no = p_cop_ems_no AND trade_code = p_trade_code;\n    SELECT\n        COUNT(1)\n        INTO STRICT p_count\n        FROM t_ems_dec_log_detail\n        WHERE head_id = p_head_id;\n\n    IF p_count > 0 THEN\n        p_flag := '1';\n    ELSE\n        p_flag := '0';\n    END IF;\n    INSERT INTO t_ems_dec_log (sid, trade_code, cop_ems_no, business_type, declare_type, status, note, insert_time, insert_user, appr_date, head_id, message_id, flag)\n    SELECT\n        sys_guid(), p_trade_code, p_cop_ems_no, 'CUS', p_declare_type, p_status, fail_info, insert_time, insert_user, appr_date, p_head_id, message_id, p_flag\n        FROM t_ems_dec_responses_cus\n        WHERE sid = p_sid;\n    EXCEPTION\n        WHEN others then\n        \tv_isok := false;\n            p_ret_code := SQLSTATE::TEXT;\n            p_ret_str := substr(SQLERRM, 1, 200);\n            ROLLBACK;\n    if(v_isok) then\n\t\tcommit;\n    end if;\nEND;\n$procedure$\n;\n\n创建分区\ndo\n$$\ndeclare\n    TABLE_LIST CURSOR FOR\n        select PARTITION_TABLE_NAME\n        from T_HX_PARTITION;\n    LIST_PARTITION CURSOR FOR\n        select EMS_NO\n        from T_HX_DCR_LIST\n        group by EMS_NO,CAV_MARK;\n    TABLE_ROW record;\n    LIST_ROW  record;\n    MAIN_PART INTEGER;\nbegin\n    for TABLE_ROW in TABLE_LIST\n        LOOP\n            for LIST_ROW in LIST_PARTITION\n                LOOP\n                    MAIN_PART := 0 ;\n\t\t\t\t\tSELECT count(1)\n\t\t\t\t\tINTO MAIN_PART\n                    FROM (SELECT relid::text, parentrelid::text, level FROM pg_partition_tree(TABLE_ROW.PARTITION_TABLE_NAME)) t\n                    WHERE parentrelid = lower(TABLE_ROW.PARTITION_TABLE_NAME)\n                    AND relid = lower(concat(TABLE_ROW.PARTITION_TABLE_NAME,'_',LIST_ROW.EMS_NO))\n                    and level = 1;\n                    if MAIN_PART = 0 then\n                        EXECUTE(concat('create table if not exists ', lower(concat(TABLE_ROW.PARTITION_TABLE_NAME,'_',LIST_ROW.EMS_NO)), ' partition of ',TABLE_ROW.PARTITION_TABLE_NAME,'(EMS_NO) for values in (''', LIST_ROW.EMS_NO, ''')'));\n                    end if;\n                END LOOP;\n\t\tEND LOOP;\nEND $$;\n\n存储过程\n\nselect count(*) from pg_proc where proname = 'p_init_data') = 1\n\ndrop PROCEDURE p_init_data;\n\n视图\n\nselect count(*) from pg_views where schemaname= 'dc_stk' and viewname='t_ems_cus_consume_cur';\n\ndrop view t_ems_cus_consume_cur;\n\n索引\n\nselect count(1) from pg_class where relkind='i' and relname=('pk_001');\n\nselect count(1) from pg_indexes where upper(indexname)=upper('idx_HX_DCR_CONSUME_01');\n\ndrop index pk_001;\n\ncreate index IF NOT EXISTS idx_calc_extend_ele_01 on T_HX_CALC_EXTEND_ELE(EMS_NO,DCR_TIMES,COP_G_NO);\n\n约束\n\nselect count(1) from pg_constraint where contype='p' and upper(conname )=upper('pk_t_hx_dcr_consume');\n\nalter table T_HX_DCR_CONSUME drop CONSTRAINT pk_t_hx_dcr_consume;\n\nselect count(1) from pg_constraint where contype='u' and upper(conname )=upper('pk_t_hx_dcr_consume');\n\nALTER TABLE T_HX_DCR_CONSUME DROP  CONSTRAINT pk_t_hx_dcr_consume;\n\nalter table t_hx_dcr_consume add constraint pk_t_hx_dcr_consume\nUNIQUE (CAV_MARK,COP_EXG_NO,EXG_VERSION,COP_IMG_NO);\n\n创建主从分区\ndo\n$$\n    declare\n        HEAD_PARTITION CURSOR FOR\n            SELECT TRADE_CODE, EMS_NO\n            FROM t_dc_bill_list\n            group by TRADE_CODE, EMS_NO;\n        HEAD_ROW  record;\n        MAIN_PART INTEGER;\n        SUB_PART  INTEGER;\n        MAIN_PREFIX VARCHAR(50);\n        SUB_PREFIX VARCHAR(50);\n        T_NAME VARCHAR(50);\n    begin\n        for HEAD_ROW IN HEAD_PARTITION\n            LOOP\n                MAIN_PART := 0;\n                SUB_PART := 0;\n                MAIN_PREFIX := 'b_l_p_';\n                SUB_PREFIX := 'b_l_s_';\n                T_NAME := 't_dc_bill_list_new';\n                SELECT COUNT(1)\n                INTO MAIN_PART\n                FROM (SELECT relid::text, parentrelid::text, level FROM pg_partition_tree(T_NAME)) t\n                WHERE parentrelid = T_NAME\n                  AND relid = lower(concat(MAIN_PREFIX,HEAD_ROW.TRADE_CODE))\n                  and level = 1;\n                SELECT COUNT(1)\n                INTO SUB_PART\n                FROM (SELECT relid::text, parentrelid::text, level FROM pg_partition_tree(T_NAME)) t\n                WHERE parentrelid = lower(concat(MAIN_PREFIX,HEAD_ROW.TRADE_CODE))\n                  AND relid = lower(concat(SUB_PREFIX,HEAD_ROW.EMS_NO))\n                  and level = 2;\n                if MAIN_PART = 0 then\n                    EXECUTE(concat('create table ', MAIN_PREFIX, HEAD_ROW.TRADE_CODE, ' partition of ',T_NAME,' for values in (''', HEAD_ROW.TRADE_CODE, ''') partition by list(EMS_NO);'));\n                end if;\n                if SUB_PART = 0 then\n                    EXECUTE(concat('create table ', SUB_PREFIX, HEAD_ROW.EMS_NO, ' partition of ', MAIN_PREFIX, HEAD_ROW.TRADE_CODE,' for values in (''', HEAD_ROW.EMS_NO, ''')'));\n                end if;\n            end loop;\n    end\n$$;\n\n删除分区\n<update id=\"deleteDataByDCJET\">\n  truncate table t_hx_calc_balance_DCJET;\n  truncate table t_hx_calc_bill_source_DCJET;\n</update>  \n分析表释放内存\nanalyze t_hx_calc_exg_con_sum_DCJET\n\nps:函数/存储过程语法不支持 create FUNCTION if not exists\n\n表：\n\n当表不存在时创建表：\n\ncreate table if not exists bar_code_herml\n(\n  \"barcodeEan\" varchar(13) NOT NULL PRIMARY KEY,\n  \"itemId\" int NOT NULL\n);\n\n当表存在时，先删除后创建表（更新表结构并删除所有数据）：\n\ndrop table if exists bar_code_herml;\n\ncreate table  bar_code_herml\n(\n  \"barcodeEan\" varchar(13) NOT NULL PRIMARY KEY,\n  \"itemId\" int NOT NULL\n);\n\n\ncreate table t_ems_action_log\n(\n  sid           VARCHAR(40) default sys_guid(),\n  trade_code    VARCHAR(10),\n  ems_no        VARCHAR(12),\n  dcr_times     float8,\n  cop_ems_no      VARCHAR(20),\n  action        VARCHAR(32) not null,\n  business_type VARCHAR(100) not null,\n  note          VARCHAR(4000),\n  insert_time   timestamp default now(),\n  insert_user   VARCHAR(50)\n);\n-- Add comments to the columns\ncomment on column t_ems_action_log.sid\n  is 'SID';\ncomment on column t_ems_action_log.trade_code\n  is '编码';\ncomment on column t_ems_action_log.ems_no\n  is '账册号';\ncomment on column t_ems_action_log.dcr_times\n  is '次数';\ncomment on column t_ems_action_log.cop_ems_no\n  is '编号';\ncomment on column t_ems_action_log.action\n  is '操作{WIPE_ALL:清空数据；DEL：删除数据; CANCEL_AUTO_DEC: } ';\ncomment on column t_ems_action_log.business_type\n  is '业务类型{TR:资质  EMS:账册  DCR:报核 }';\ncomment on column t_ems_action_log.note\n  is '日志{DEL类型是记录本次删除数据的SID,多条是以'',''隔开}';\ncomment on column t_ems_action_log.insert_time\n  is '插入时间';\ncomment on column t_ems_action_log.insert_user\n  is '插入人'; \n\n索引：\n\n如果不存在则创建索引：\n\nCREATE INDEX if not exists uaemt_tsuoidh_enu ON uaemt USING btree (tsuoidh);\n\n如果存在则删除后重新创建索引：\n\ndrop index if exists uaemt_tsuoidh_enu;\nCREATE INDEX uaemt_tsuoidh_enu ON uaemt USING btree (tsuoidh);\n\n单纯执行sql\nSELECT float4(#{total}/#{qty}::numeric)\n\nsql统计组合\n\nSELECT a.id ,a.name,COALESCE(b.dircount ,'0') dircount ,COALESCE(c.subcount ,'0')  subcount ,COALESCE(d.listcount ,'0') listcount, COALESCE(e.checkcount ,'0') checkcount ,COALESCE(f.punishcount ,'0') punishcount,\n  COALESCE(g.forcecount ,'0') forcecount ,  CASE  WHEN COALESCE(b.dircount ,'0')=0 THEN 0.00\n    ELSE round((COALESCE(e.checkcount ,'0')+COALESCE(f.punishcount ,'0')+COALESCE(g.forcecount ,'0'))/COALESCE(b.dircount ,'0')::numeric ,2)    END rate\n  FROM lx_company a\n  left join\n  (SELECT departmentid ,count(departmentid) dircount FROM ut_publishdirectory  GROUP BY departmentid) b\n   on a.id= b.departmentid\n   left join\n     (SELECT departmentid ,count(departmentid) subcount FROM ut_publishsubdetail  GROUP BY departmentid) c\n   on a.id= c.departmentid\n    left join\n    (SELECT c.departmentid,count(c.departmentid) listcount FROM\n(SELECT a.*, b.departmentid FROM ut_publishdirectory_list a LEFT JOIN ut_publishsubdetail b on  a.detailcode= b.subitemcode ) c GROUP BY departmentid ) d\n on a.id = d.departmentid\nLEFT JOIN\n(SELECT a.departmentid ,count(a.departmentid) checkcount from\n(SELECT distinct ch.id, ch.taskname,ut.departmentid  from ut_checktask_publishdirectory cp LEFT JOIN ut_checktask ch on ch.id=cp.taskid  left JOIN ut_publishdirectory ut on cp.inventorycode=\nut.mattercode) a GROUP BY a.departmentid) e\non e.departmentid=a.id\nLEFT JOIN\n(SELECT  c.departmentid,count(departmentid) punishcount from\n(SELECT a.*,b.departmentid from ut_punishaction a  left JOIN ut_publishdirectory b on a.superviseitemcode=b.mattercode) c GROUP BY c.departmentid ) f\non a.id=f.departmentid\nLEFT JOIN\n(SELECT  c.departmentid,count(departmentid) forcecount from\n(SELECT a.*,b.departmentid from ut_forceaction a  left JOIN ut_publishdirectory b on a.superviseitemcode=b.mattercode) c GROUP BY c.departmentid ) g\non a.id=g.departmentid\n\nUPDATE 要更新的表\nSET 字段1 = cqt.字段1,\n 字段2 = cqt.字段2,\n\nFROM\n    数据来源表 cqt\nWHERE\n    要更新的表.bsm = cqt.bsm\n\n\nupdate wewe set COP_IMG_NO =#{COP_IMG_NO}\n                WHERE TEMP_OWNER =#{TEMP_OWNER}\n                AND EXG_VERSION BETWEEN #{BEGIN_START} AND #{BEGIN_END};\n        \nupdate wewe set COP_EXG_NO =#{COP_EXG_NO}\n                WHERE TEMP_OWNER =#{TEMP_OWNER}\n                AND EXG_VERSION BETWEEN #{BEGIN_START} AND #{BEGIN_END};\n\n字段修改\n\nselect count(1) from information_schema.columns where table_name = 'test' and column_name='input_credit_code' and is_nullable='YES';\n\nalter table test alter column input_credit_code drop not null;\n\n查找表结构\n\nselect\ncol.table_schema,\ncol.table_name,\ncol.ordinal_position,\ncol.column_name,\ncol.data_type,\ncol.character_maximum_length,\ncol.numeric_precision,\ncol.numeric_scale,\ncol.is_nullable,\ncol.column_default,\ndes.description\nfrom\ninformation_schema.columns col left join pg_description des on\ncol.table_name::regclass = des.objoid\nand col.ordinal_position = des.objsubid\nwhere\ntable_schema = 'dc_stk'\nand table_name = 't_hx_stk_bom'\norder by\nordinal_position;\n\nselect * from information_schema.columns where table_name = 't_hx_stk_bom' \n\n查找索引是否存在\n\nSELECT count(1) FROM pg_indexes WHERE tablename = 'test' and indexname = 'idx_bill_head_a24'\n\ncreate index idx_bill_head_a24 on test (bill_list_no);\n\nupdate wewe t\n        set temp_flag = 1,\n            temp_remark = coalesce(t.temp_remark, '') || '|不存在!'\n        from (\n            select p.sid, p.cop_img_no, p.cav_mark\n            from wewe p\n            left join t_ems_cus_img_cur c\n            on (p.ems_no = c.ems_no\n            and p.cop_img_no = c.cop_g_no\n            and c.ems_no = #{emsNo}\n            and c.trade_code = #{tradeCode})\n            where p.cav_mark = #{cavMark}\n            and p.batch_no = #{batchId}\n            and c.cop_g_no is null\n            ) r\n        where r.cop_img_no = t.cop_img_no\n            and r.cav_mark = t.cav_mark\n            and t.cav_mark = #{cavMark}\n            and t.batch_no = #{batchId}\n            \n\nUPDATE\n        ewwe O\n        SET LOCK_MARK = #{batchId}\n        WHERE EXISTS(\n        SELECT 1\n        FROM (\n        SELECT SID,\n        ROW_NUMBER() OVER (\n        ORDER BY INSERT_TIME) RNUM\n        FROM T_DC_BILL_CORE_TASK\n        WHERE BUSINESS_TYPE = #{businessType}\n        AND STATUS = #{lockStatus}\n        AND LOCK_MARK IS NULL) T\n        WHERE T.RNUM &lt;= #{batchLockMaxCount}\n        AND T.SID = O.SID)\n\n\n<select id=\"selectByFlag\" resultMap=\"hxStkBomTmpResultMap\" parameterType=\"map\">\n\t\tselect t.* from wew t\n\t\t<where>\n\t\t\tand t.TEMP_OWNER = #{TEMP_OWNER,jdbcType=VARCHAR}\n\t\t\tAND t.TEMP_FLAG IN\n\t\t\t<foreach item=\"item\" index=\"index\" collection=\"TEMP_FLAG\" open=\"(\" separator=\",\" close=\")\">\n\t\t\t\t#{item}\n\t\t\t</foreach>\n\t\t</where>\n\t</select>\n\n<update id=\"updateStkBomList\" parameterType=\"java.lang.String\" databaseId=\"postgresql\">\n        update wewe t\n           set dec_cm=p.dec_cm,\n               dec_dm_visiable=p.dec_dm_visiable,\n               dec_dm_invisiable=p.dec_dm_invisiable,\n               exg_g_name=p.exg_g_name,\n               img_g_name=p.img_g_name,\n               img_unit=p.img_unit,\n               note=p.note,\n               update_time=p.update_time,\n               update_user=p.update_user\n        from ewwe p\n        where t.cav_mark = #{cavMark}\n            and p.cav_mark = #{cavMark}\n            and t.type = p.type\n            and t.exg_version = p.exg_version\n            and t.cop_exg_no = p.cop_exg_no\n            and t.cop_img_no = p.cop_img_no\n            and p.temp_owner = #{batchId};\n\n        insert into ewwe (sid, trade_code, ems_no, dcr_times, cav_mark, cop_exg_no, cop_img_no, dec_cm, dec_dm_visiable,\n        exg_g_name, exg_version, img_g_name, img_unit, insert_time, insert_user, note, update_time,\n        update_user, type, dec_dm_invisiable, exg_g_no, img_g_no)\n        select sid, trade_code, ems_no, dcr_times::double precision, cav_mark, cop_exg_no, cop_img_no, dec_cm, dec_dm_visiable,\n        exg_g_name, exg_version, img_g_name, img_unit, insert_time, insert_user, note, update_time,\n        update_user, type, dec_dm_invisiable, exg_g_no, img_g_no\n        from ewwew p\n        where not exists(select 1\n        from wewe t\n        where t.cav_mark = #{cavMark}\n        and p.cav_mark = #{cavMark}\n        and t.type = p.type\n        and t.exg_version = p.exg_version\n        and t.cop_exg_no = p.cop_exg_no\n        and t.cop_img_no = p.cop_img_no)\n        and p.temp_owner = #{batchId}\n    </update>\n\n\t<update id=\"updateStkBomList\" parameterType=\"java.lang.String\">\n        merge into wewe t\n        using wewe p\n        on (t.cav_mark = #{cavMark}\n        and p.cav_mark = #{cavMark}\n        and t.type = p.type\n        and t.exg_version = p.exg_version\n        and t.cop_exg_no = p.cop_exg_no\n        and t.cop_img_no = p.cop_img_no and p.temp_owner = #{batchId})\n        when matched then\n        update\n        set dec_cm=p.dec_cm,\n        dec_dm_visiable=p.dec_dm_visiable,\n        dec_dm_invisiable=p.dec_dm_invisiable,\n        exg_g_name=p.exg_g_name,\n        img_g_name=p.img_g_name,\n        img_unit=p.img_unit,\n        note=p.note,\n        update_time=p.update_time,\n        update_user=p.update_user\n        when not matched then\n        insert (sid, trade_code, ems_no, dcr_times, cav_mark, cop_exg_no, cop_img_no, dec_cm, dec_dm_visiable, exg_g_name,\n        exg_version, img_g_name, img_unit, insert_time, insert_user, note, update_time, update_user, type,\n        dec_dm_invisiable, exg_g_no, img_g_no)\n        VALUES (p.sid, p.trade_code, p.ems_no, p.dcr_times, p.cav_mark, p.cop_exg_no, p.cop_img_no, p.dec_cm,\n        p.dec_dm_visiable, p.exg_g_name, p.exg_version, p.img_g_name, p.img_unit, p.insert_time, p.insert_user,\n        p.note, p.update_time, p.update_user, p.type, p.dec_dm_invisiable, p.exg_g_no, p.img_g_no)\n        where p.TEMP_OWNER = #{batchId}\n</update>\n\nNULL::numeric AS msg_dec_mark\n\nNULL::timestamp without time zone AS putrec_appr_time,\n\nNULL::character varying AS qty_ctrl_flag,\n\n<select id=\"updateIpImgQty\" parameterType=\"map\" databaseId=\"postgresql\">\n        UPDATE ewwe s\n        SET IP_IMG_QTY = v.IP_IMG_QTY\n            FROM (SELECT t.CAV_MARK, t.COP_G_NO, f_xdo_nvl(sum(t.QTY),0.0) AS IP_IMG_QTY\n                         FROM wewe t\n                         WHERE t.CAV_MARK = #{CAV_MARK,jdbcType=VARCHAR}\n                         group by t.CAV_MARK, t.COP_G_NO\n\t\t\t\t ) v\n        WHERE s.CAV_MARK = #{CAV_MARK,jdbcType=VARCHAR}\n          AND s.COP_G_NO = v.COP_G_NO\n</select>\n\n<select id=\"updateIpCvrtQty\" parameterType=\"map\">\n        MERGE INTO weww s\n        USING (SELECT t.CAV_MARK, t.COP_IMG_NO, f_xdo_nvl(sum(t.CVNT_QTY),0.0) AS IP_CVRT_QTY\n                         FROM wewe t\n                         WHERE t.CAV_MARK = #{CAV_MARK,jdbcType=VARCHAR}\n                         group by t.CAV_MARK, t.COP_IMG_NO\n\t\t\t  ) v\n        ON (s.CAV_MARK = #{CAV_MARK} and v.CAV_MARK = #{CAV_MARK} AND s.COP_G_NO = v.COP_IMG_NO)\n        WHEN MATCHED THEN\n        UPDATE SET s.IP_CVRT_QTY = v.IP_CVRT_QTY\n</select>\n\ninsert into wewe\n        (sid,\n         trade_code,\n         ems_no,\n         dcr_times,\n         cav_mark,\n         cop_g_no,\n         g_name,\n         exg_version,\n         unit,\n         qty,\n         factory,\n         type,\n         note,\n         insert_time,\n         insert_user)\n            (select sys_guid(),\n                    t.trade_code,\n                    t.ems_no,\n                    t.dcr_times,\n                    t.cav_mark,\n                    t.cop_g_no,\n                    t.g_name,\n                    t.exg_version,\n                    t.unit,\n                    t.qty,\n                    t.factory,\n                    t.type,\n                    t.note,\n                    f_xdo_current_timestamp(),\n                    #{userNo}\n             from wewe t\n             where t.CAV_MARK = #{cavMark}\n               and t.business_type in ('EXG_RD_NO_ENTRY', 'EXG_RD_ENTRY')\n               and t.TYPE = '1'\n               and not exists (select 1\n                               from wew b\n                               where b.CAV_MARK = #{cavMark}\n                                 and b.COP_EXG_NO = t.COP_G_NO\n                                 and b.EXG_VERSION = t.EXG_VERSION))\n\n\n<update id=\"updateStkIpImgList\" parameterType=\"java.lang.String\" databaseId=\"postgresql\">\n        update wew t\n        set G_NAME=p.G_NAME,\n            UNIT=p.UNIT,\n            QTY=p.QTY,\n            CURR=p.CURR,\n            DEC_PRICE=p.DEC_PRICE,\n            DEC_TOTAL=p.DEC_TOTAL,\n            RATE=p.RATE,\n            NOTE=p.NOTE,\n            UPDATE_TIME=p.UPDATE_TIME,\n            UPDATE_USER=p.UPDATE_USER\n            from wew p\n            where t.CAV_MARK = #{cavMark}\n            and p.CAV_MARK = #{cavMark}\n            and t.WO_NO = p.WO_NO\n            and t.COP_G_NO = p.COP_G_NO\n            and p.BATCH_NO = #{batchId}\n</update>\n\n<update id=\"updateStkIpImgList\" parameterType=\"java.lang.String\">\n        update wew t\n        set (\n            G_NAME,\n            UNIT,\n            QTY,\n            CURR,\n            DEC_PRICE,\n            DEC_TOTAL,\n            RATE,\n            NOTE,\n            UPDATE_TIME,\n            UPDATE_USER) =\n            (select\n            p.G_NAME,\n            p.UNIT,\n            p.QTY,\n            p.CURR,\n            p.DEC_PRICE,\n            p.DEC_TOTAL,\n            p.RATE,\n            p.NOTE,\n            p.UPDATE_TIME,\n            p.UPDATE_USER\n            from wewe p\n            where p.CAV_MARK = #{cavMark}\n            and t.WO_NO = p.WO_NO\n            and t.COP_G_NO = p.COP_G_NO\n            and p.BATCH_NO = #{batchId})\n        where t.CAV_MARK = #{cavMark}\n          and exists (select 1\n            from wewe e\n            where e.CAV_MARK = #{cavMark}\n            and t.WO_NO = e.WO_NO\n            and t.COP_G_NO = e.COP_G_NO\n            and e.BATCH_NO = #{batchId}\n            )\n</update>\n\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);