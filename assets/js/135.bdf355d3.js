(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{626:function(n,t,v){"use strict";v.r(t);var a=v(6),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,v=n._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[v("h2",{attrs:{id:"java-重写-override-与重载-overload"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-重写-override-与重载-overload"}},[n._v("#")]),n._v(" Java 重写(Override)与重载(Overload)")]),n._v(" "),v("p",[n._v("重写(Override)\n重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！")]),n._v(" "),v("p",[n._v("重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。")]),n._v(" "),v("p",[n._v("重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。")]),n._v(" "),v("p",[n._v("在面向对象原则里，重写意味着可以重写任何现有方法。实例如下：")]),n._v(" "),v("p",[n._v('TestDog.java 文件代码：\nclass Animal{\npublic void move(){\nSystem.out.println("动物可以移动");\n}\n}')]),n._v(" "),v("p",[n._v('class Dog extends Animal{\npublic void move(){\nSystem.out.println("狗可以跑和走");\n}\n}')]),n._v(" "),v("p",[n._v("public class TestDog{\npublic static void main(String args[]){\nAnimal a = new Animal(); // Animal 对象\nAnimal b = new Dog(); // Dog 对象")]),n._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[n._v("  a.move();// 执行 Animal 类的方法\n\n  b.move();//执行 Dog 类的方法\n")])])]),v("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),v("p",[n._v("动物可以移动\n狗可以跑和走\n在上面的例子中可以看到，尽管 b 属于 Animal 类型，但是它运行的是 Dog 类的 move方法。")]),n._v(" "),v("p",[n._v("这是由于在编译阶段，只是检查参数的引用类型。")]),n._v(" "),v("p",[n._v("然而在运行时，Java 虚拟机(JVM)指定对象的类型并且运行该对象的方法。")]),n._v(" "),v("p",[n._v("因此在上面的例子中，之所以能编译成功，是因为 Animal 类中存在 move 方法，然而运行时，运行的是特定对象的方法。")]),n._v(" "),v("p",[n._v("思考以下例子：")]),n._v(" "),v("p",[n._v('TestDog.java 文件代码：\nclass Animal{\npublic void move(){\nSystem.out.println("动物可以移动");\n}\n}')]),n._v(" "),v("p",[n._v('class Dog extends Animal{\npublic void move(){\nSystem.out.println("狗可以跑和走");\n}\npublic void bark(){\nSystem.out.println("狗可以吠叫");\n}\n}')]),n._v(" "),v("p",[n._v("public class TestDog{\npublic static void main(String args[]){\nAnimal a = new Animal(); // Animal 对象\nAnimal b = new Dog(); // Dog 对象")]),n._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[n._v("  a.move();// 执行 Animal 类的方法\n  b.move();//执行 Dog 类的方法\n  b.bark();\n")])])]),v("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),v("p",[n._v("TestDog.java:30: cannot find symbol\nsymbol  : method bark()\nlocation: class Animal\nb.bark();\n^\n该程序将抛出一个编译错误，因为b的引用类型Animal没有bark方法。")]),n._v(" "),v("p",[n._v("方法的重写规则\n参数列表与被重写方法的参数列表必须完全相同。")]),n._v(" "),v("p",[n._v("返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。")]),n._v(" "),v("p",[n._v("访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。")]),n._v(" "),v("p",[n._v("父类的成员方法只能被它的子类重写。")]),n._v(" "),v("p",[n._v("声明为 final 的方法不能被重写。")]),n._v(" "),v("p",[n._v("声明为 static 的方法不能被重写，但是能够被再次声明。")]),n._v(" "),v("p",[n._v("子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。")]),n._v(" "),v("p",[n._v("子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。")]),n._v(" "),v("p",[n._v("重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。")]),n._v(" "),v("p",[n._v("构造方法不能被重写。")]),n._v(" "),v("p",[n._v("如果不能继承一个类，则不能重写该类的方法。")]),n._v(" "),v("p",[n._v("Super 关键字的使用\n当需要在子类中调用父类的被重写方法时，要使用 super 关键字。")]),n._v(" "),v("p",[n._v('TestDog.java 文件代码：\nclass Animal{\npublic void move(){\nSystem.out.println("动物可以移动");\n}\n}')]),n._v(" "),v("p",[n._v('class Dog extends Animal{\npublic void move(){\nsuper.move(); // 应用super类的方法\nSystem.out.println("狗可以跑和走");\n}\n}')]),n._v(" "),v("p",[n._v("public class TestDog{\npublic static void main(String args[]){")]),n._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[n._v("  Animal b = new Dog(); // Dog 对象\n  b.move(); //执行 Dog类的方法\n")])])]),v("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),v("p",[n._v("动物可以移动\n狗可以跑和走\n重载(Overload)\n重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。")]),n._v(" "),v("p",[n._v("每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。")]),n._v(" "),v("p",[n._v("最常用的地方就是构造器的重载。")]),n._v(" "),v("p",[n._v("重载规则:")]),n._v(" "),v("p",[n._v('被重载的方法必须改变参数列表(参数个数或类型不一样)；\n被重载的方法可以改变返回类型；\n被重载的方法可以改变访问修饰符；\n被重载的方法可以声明新的或更广的检查异常；\n方法能够在同一个类中或者在一个子类中被重载。\n无法以返回值类型作为重载函数的区分标准。\n实例\nOverloading.java 文件代码：\npublic class Overloading {\npublic int test(){\nSystem.out.println("test1");\nreturn 1;\n}')]),n._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[n._v('public void test(int a){\n    System.out.println("test2");\n}   \n\n//以下两个参数类型顺序不同\npublic String test(int a,String s){\n    System.out.println("test3");\n    return "returntest3";\n}   \n\npublic String test(String s,int a){\n    System.out.println("test4");\n    return "returntest4";\n}   \n\npublic static void main(String[] args){\n    Overloading o = new Overloading();\n    System.out.println(o.test());\n    o.test(1);\n    System.out.println(o.test(1,"test3"));\n    System.out.println(o.test("test4",1));\n}\n')])])]),v("p",[n._v("}\n重写与重载之间的区别\n区别点\t重载方法\t重写方法\n参数列表\t必须修改\t一定不能修改\n返回类型\t可以修改\t一定不能修改\n异常\t可以修改\t可以减少或删除，一定不能抛出新的或者更广的异常\n访问\t可以修改\t一定不能做更严格的限制（可以降低限制）\n总结\n方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。")]),n._v(" "),v("p",[n._v("(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。\n(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。\n(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。")]),n._v(" "),v("p",[v("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/overloading-vs-overriding.png",alt:"RUNOOB 图标"}})]),n._v(" "),v("p",[v("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/overloading-vs-overriding.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);