(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{849:function(e,n,t){"use strict";t.r(n);var r=t(6),a=Object(r.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-cloud-gateway全局过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway全局过滤器"}},[this._v("#")]),this._v(" Spring Cloud Gateway全局过滤器")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('接口定义类 org.springframework.cloud.gateway.filter.GlobalFilter，具体代码如下所示。\npublic interface GlobalFilter {\n    Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain);\n}\n\n有转发、路由、负载等相关的 GlobalFilter，感兴趣的朋友可以去看下源码自行了解。我们如何通过定义 GlobalFilter 来实现我们的业务逻辑？\n\n这里给出一个官方文档上的案例，代码如下所示。\n@Configuration\npublic class ExampleConfiguration {\n    private Logger log = LoggerFactory.getLogger(ExampleConfiguration.class);\n    @Bean\n    @Order(-1)\n    public GlobalFilter a() {\n        return (exchange, chain) -> {\n            log.info("first pre filter");\n            return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n                log.info("third post filter");\n            }));\n        };\n    }\n    @Bean\n    @Order(0)\n    public GlobalFilter b() {\n        return (exchange, chain) -> {\n            log.info("second pre filter");\n            return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n                log.info("second post filter");\n            }));\n        };\n    }\n    @Bean\n    @Order(1)\n    public GlobalFilter c() {\n        return (exchange, chain) -> {\n            log.info("third pre filter");\n            return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n                log.info("first post filter");\n            }));\n        };\n    }\n}\n上面定义了 3 个 GlobalFilter，通过 @Order 来指定执行的顺序，数字越小，优先级越高。下面就是输出的日志，从日志就可以看出执行的顺序，如下所示。\n2019-8-26 16:08:52.406  INFO 55062 --- [ioEventLoop-4-1] c.c.gateway.config.ExampleConfiguration  : first pre filter\n2019-8-26 16:08:52.406  INFO 55062 --- [ioEventLoop-4-1] c.c.gateway.config.ExampleConfiguration  : second pre filter\n2019-8-26 16:08:52.407  INFO 55062 --- [ioEventLoop-4-1] c.c.gateway.config.ExampleConfiguration  : third pre filter\n2019-8-26 16:08:52.437  INFO 55062 --- [ctor-http-nio-7] c.c.gateway.config.ExampleConfiguration  : first post filter\n2019-8-26 16:08:52.438  INFO 55062 --- [ctor-http-nio-7] c.c.gateway.config.ExampleConfiguration  : second post filter\n2019-8-26 16:08:52.438  INFO 55062 --- [ctor-http-nio-7] c.c.gateway.config.ExampleConfiguration  : third post filter\n\n当 GlobalFilter 的逻辑比较多时，笔者还是推荐大家单独写一个 GlobalFilter 来处理，比如我们要实现对 IP 的访问限制，即不在 IP 白名单中就不能调用的需求。\n\n单独定义只需要实现 GlobalFilter、Ordered 两个接口就可以了，具体代码如下所示。\n@Component\npublic class IPCheckFilter implements GlobalFilter, Ordered {\n    @Override\n    public int getOrder() {\n        return 0;\n    }\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        HttpHeaders headers = exchange.getRequest().getHeaders();\n        // 此处写得非常绝对, 只作演示用, 实际中需要采取配置的方式\n        if (getIp(headers).equals("127.0.0.1")) {\n            ServerHttpResponse response = exchange.getResponse();\n            ResponseData data = new ResponseData();\n            data.setCode(401);\n            data.setMessage("非法请求");\n            byte[] datas = JsonUtils.toJson(data).getBytes(StandardCharsets.UTF_8);\n            DataBuffer buffer = response.bufferFactory().wrap(datas);\n            response.setStatusCode(HttpStatus.UNAUTHORIZED);\n            response.getHeaders().add("Content-Type", "application/json;charset=UTF-8");\n            return response.writeWith(Mono.just(buffer));\n        }\n        return chain.filter(exchange);\n    }\n    // 这里从请求头中获取用户的实际IP,根据Nginx转发的请求头获取\n    private String getIp(HttpHeaders headers) {\n        return "127.0.0.1";\n    }\n}\n过滤的使用虽然比较简单，但作用很大，可以处理很多需求，上面讲的 IP 认证拦截只是冰山一角，更多的功能需要我们自己基于过滤器去实现。\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);