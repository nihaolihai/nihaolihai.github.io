(window.webpackJsonp=window.webpackJsonp||[]).push([[471],{959:function(n,t,e){"use strict";e.r(t);var i=e(6),o=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"swing-按钮组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swing-按钮组件"}},[this._v("#")]),this._v(" swing 按钮组件")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\n按钮是图形界面上常见的元素，在前面已经多次使用过它。在 Swing 中按钮是 JButton 类的对象，JButton 类的常用构造方法如下。\nJButton()：创建一个无标签文本、无图标的按钮。\nJButton(Icon icon)：创建一个无标签文本、有图标的按钮。\nJButton(String text)：创建一个有标签文本、无图标的按钮。\nJButton(String text,Icon icon)：创建一个有标签文本、有图标的按钮。\n\nJButton 类的常用方法如表 1 所示。\n表1 JButton类的常用方法\n方法名称\t说明\naddActionListener(ActionListener listener)\t为按担组件注册 ActionListener 监听\nvoid setIcon(Icon icon)\t设置按钮的默认图标\nvoid setText(String text)\t设置按鈕的文本\nvoid setMargin(Insets m)\t设置按钮边框和标签之间的空白\nvoid setMnemonic(int nmemonic)\t设置按钮的键盘快捷键，所设置的快捷键在实际操作时需要结合\nAlt 键进行实现\nvoid setPressedIcon(Icon icon)\t设置按下按钮时的图标\nvoid setSelectedIcon(Icon icon)\t设置选择按鈕时的图标\nvoid setRolloveiicon(Icon icon)\t设置鼠标移动到按扭区域时的图标\nvoid setDisabledIcon(Icon icon)\t设置按钮无效状态下的图标\nvoid setVerticalAlignment(int alig)\t设置图标和文本的垂直对齐方式\nvoid setHorizontalAlignment(int alig)\t设置图标和文本的水平对齐方式\nvoid setEnable(boolean flag)\t启用或禁用按扭\nvoid setVerticalTextPosition(int textPosition)\t设置文本相对于图标的垂直位置\nvoid setHorizontalTextPosition(int textPosition)\t设置文本相对于图标的水平位置\n例 1\n使用 JFrame 组件创建一个窗口，然后创建 4 个不同类型的按钮，再分别添加到窗口上显示。具体代码如下：\npackage ch17;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.SwingConstants;\npublic class JButtonDemo\n{\n    public static void main(String[] args)\n    {\n        JFrame frame=new JFrame("Java按钮组件示例");    //创建Frame窗口\n        frame.setSize(400, 200);\n        JPanel jp=new JPanel();    //创建JPanel对象\n        JButton btn1=new JButton("我是普通按钮");    //创建JButton对象\n        JButton btn2=new JButton("我是带背景颜色按钮");\n        JButton btn3=new JButton("我是不可用按钮");\n        JButton btn4=new JButton("我是底部对齐按钮");\n        jp.add(btn1);\n        btn2.setBackground(Color.YELLOW);    //设置按钮背景色\n        jp.add(btn2);\n        btn3.setEnabled(false);    //设置按钮不可用\n        jp.add(btn3);\n        Dimension preferredSize=new Dimension(160, 60);    //设置尺寸\n        btn4.setPreferredSize(preferredSize);    //设置按钮大小\n        btn4.setVerticalAlignment(SwingConstants.BOTTOM);    //设置按钮垂直对齐方式\n        jp.add(btn4);\n        frame.add(jp);\n        frame.setBounds(300, 200, 600, 300);\n        frame.setVisible(true);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n}\n\n上述代码创建了 1 个 JFrame 窗口对象、1 个 JPanel 面板对象和 4 个 JButton 按钮，然后调用 JButton 类的 setBackground() 方法、setEnabled() 方法、setPreferredSize() 方法和 setVerticalAlignment() 方法设置按钮的显示外观。程序运行后 4 个按钮显示效果如图 1 所示。\n\n\n')])])]),t("p",[t("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/181105/3-1Q105101406146.gif",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);t.default=o.exports}}]);