(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{666:function(n,t,e){"use strict";e.r(t);var s=e(6),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"java-object-hashcode-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-object-hashcode-方法"}},[n._v("#")]),n._v(" Java Object hashCode() 方法")]),n._v(" "),e("p",[n._v("Object hashCode() 方法用于获取对象的 hash 值。")]),n._v(" "),e("p",[n._v("语法\nobject.hashCode()\n参数\n无 。")]),n._v(" "),e("p",[n._v("返回值\n返回对象哈希值，是一个整数，表示在哈希表中的位置。")]),n._v(" "),e("p",[n._v("实例\n以下实例演示了 hashCode() 方法的使用：")]),n._v(" "),e("p",[n._v("实例\nclass RunoobTest {\npublic static void main(String[] args) {")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("    // Object 使用 hashCode()\n    Object obj1 = new Object();\n    System.out.println(obj1.hashCode()); \n\n    Object obj2 = new Object();\n    System.out.println(obj2.hashCode());\n\n    Object obj3 = new Object();\n    System.out.println(obj3.hashCode()); \n}\n")])])]),e("p",[n._v("}\n以上程序执行结果为：")]),n._v(" "),e("p",[n._v("225534817\n1878246837\n929338653\nString 和 ArrayList 类使用 hashCode() 方法，String 和 ArrayList 类都继承了 Object，所以可以直接使用 hashCode() 方法：")]),n._v(" "),e("p",[n._v("实例\nimport java.util.ArrayList;")]),n._v(" "),e("p",[n._v("class RunoobTest {\npublic static void main(String[] args) {")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("    // String 使用 hashCode()\n    String str = new String();\n    System.out.println(str.hashCode()); // 0\n\n    // ArrayList 使用 hashCode()\n    ArrayList<Integer> list = new ArrayList<>();\n    System.out.println(list.hashCode()); // 1\n}\n")])])]),e("p",[n._v("}\n以上程序执行结果为：")]),n._v(" "),e("p",[n._v("0\n1\n以下实例演示如果两个对象相等，则它们的哈希值也是相等的：")]),n._v(" "),e("p",[n._v("实例\nclass RunoobTest {\npublic static void main(String[] args) {")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("    // Object 使用 hashCode()\n    Object obj1 = new Object();\n\n    // obj1 赋值给 obj2\n    Object obj2 = obj1;\n\n    // 判断两个对象是否相等\n    System.out.println(obj1.equals(obj2)); // true\n\n    // 获取 obj1 与 obj2 的哈希值\n    System.out.println(obj1.hashCode()); // 225534817 \n    System.out.println(obj2.hashCode()); // 225534817\n\n}\n")])])]),e("p",[n._v("}\n以上程序执行结果为：")]),n._v(" "),e("p",[n._v("true\n225534817\n225534817")])])}),[],!1,null,null,null);t.default=a.exports}}]);