(window.webpackJsonp=window.webpackJsonp||[]).push([[441],{933:function(e,n,t){"use strict";t.r(n);var a=t(6),r=Object(a.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"jsp-el表达式常用隐含对象详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsp-el表达式常用隐含对象详解"}},[this._v("#")]),this._v(" JSP EL表达式常用隐含对象详解")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('EL 隐含对象共有 11 个，本节只介绍几个常用的 EL 隐含对象，即 pageScope、requestScope、sessionScope、applicationScope、param 以及 paramValues。\n1）与作用范围相关的隐含对象\n与作用范围相关的 EL 隐含对象有 pageScope、requestScope、sessionScope 和 applicationScope，分别可以获取 JSP 隐含对象 pageContext、request、session 和 application 中的数据。\n\n如果在 EL 中没有使用隐含对象指定作用范围，则会依次从 page、request、session、application 范围查找，若找到就直接返回，不再继续找下去；如果所有范围都没有找到，就返回空字符串。获取数据的格式如下：\n${EL隐含对象.关键字对象.属性}\n\n或\n${EL隐含对象.关键字对象}\n\n例如：\n<jsp:useBean id="user" class="bean.UserBean" scope="page"/>\x3c!--bean标签--\x3e\n<jsp:setProperty name="user" property="name" value="EL隐含对象"/>\nname：${pageScope.user.name}\n\n再如，在 Controller 或 Servlet 中有这样一段话：\nArrayList<UserBean> users = new ArrayList<UserBean>();\nUserBean ub1 = new UserBean("zhang",20);\nUserBean ub2 = new UserBean("zhao",50);\nusers.add(ub1);\nusers.add(ub2);\nrequest.setAttribute("array",users);\n其中，UserBean 有两个属性 name 和 age，那么在对应视图 JSP 中 request 有效的范围内可以使用 EL 取出 UserBean 的属性，代码如下：\n${array[0].name} ${array[0].age}\n${array[1].name} ${array[1].age}\n\n2）与请求参数相关的隐含对象\n与请求参数相关的 EL 隐含对象有 param 和 paramValues。获取数据的格式如下：\n${EL隐含对象.参数名}\n\n例如，input.jsp 的代码如下：\n<form method="post" action="param.jsp">\n    <p>\n        姓名：<input type="text" name="username" size=" 15" />\n    </p>\n    <p>\n        兴趣：\n        <input type="checkbox" name="habit" value="看书" />看书\n        <input type="checkbox" name="habit" value="玩游戏"/>玩游戏\n        <input type="checkbox" name="habit" value="旅游"/>旅游\n    </P>\n        <input type="submit" value="提交" />\n</form>\n那么在 param.jsp 页面中可以使用 EL 获取参数值，代码如下：\n<%request.setCharacterEncoding("GBK");%>\n<body>\n<h2>EL隐含对象param、paramValues</h2>\n姓名：${param.username}</br>\n兴趣：\n${paramValues.habit[0]}\n${paramValues.habit[1]}\n${paramValues.habit[2]}\n\n示例\n编写一个 Controller，在该控制器类处理方法中使用 request 对象和 Model 对象存储数据，然后从处理方法转发到 show.jsp 页面，在 show.jsp 页面中显示 request 对象的数据。\n\n运行控制器的处理方法，在 IE 地址栏中输入“http://localhost:8080/springMVCDemo11/input”。程序运行结果如图 1 所示。\n\n使用EL获取数据\n图 1  使用EL获取数据\n\n实现具体步骤如下：\n1）创建控制器类\n在 src 目录下创建一个名为 controller 的包，并在该包下创建一个名为 InputController 的控制器类。代码如下：\npackage controller;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n@Controller\npublic class InputController {\n    @RequestMapping("/input")\n    public String input(HttpServletRequest request, Model model) {\n        String names[] = { "zhao", "qian", "sun", "li" };\n        request.setAttribute("name", names);\n        String address[] = { "beijing", "shanghai", "shenzhen" };\n        model.addAttribute("address", address);\n        return "show";\n    }\n}\n2）创建 show.jsp 页面\n在 WEB-INF 目录下创建 jsp 文件夹，在该文件夹中创建 show.jsp 页面。代码如下：\n纯文本复制\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    从Controller转发过来的request内置对象的数据如下：\n    <br> ${requestScope.name[0]}\n    <br> ${requestScope.name[1]}\n    <br> ${requestScope.name[2]}\n    <br> ${requestScope.name[3]}\n    <br>\n    <hr>\n    从Controller转发过来的Model对象的数据如下：\n    <br> ${address[0]}\n    <br> ${address[1]}\n    <br> ${address[2]}\n    <br>\n</body>\n</html>\n\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);