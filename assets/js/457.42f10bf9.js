(window.webpackJsonp=window.webpackJsonp||[]).push([[457],{946:function(n,e,t){"use strict";t.r(e);var i=t(6),a=Object(i.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"swing-滑块组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swing-滑块组件"}},[this._v("#")]),this._v(" swing 滑块组件")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('\n在前面的章节中，我们介绍了 Swing 设计简单界面所需的窗口、布局组件以及如何响应事件。Swing 还提供了很多高级组件，如菜单栏、工具栏、文件选择器、表格以及树等。使用这些高级组件可以实现更为复杂的布局，也可以使程序界面更加人性化，以提高程序的灵活性。在之后的章节中，我们将开始详细介绍这些高级组件。\n\n在学习其他高级组件之前，我们先来介绍一些布局组件，包括滑块、进度条、计时器、菜单栏和工具栏，本节我们首先来介绍滑块。\n\n滑块（JSlider）是一个允许用户在有限区间内通过移动滑块来选择值的组件。JSlider 类的常用构造方法如表 1 所示。\n\n表1 JSIider类的常用构造方法\n构造方法\t说明\nJSlider()\t创建一个范围在 0~100 且初始值为 50 的水平滑块\nJSlider(BoundedRangeModel brm)\t使用指定的 BoundedRangeModel 创建一个水平滑块\nJSlider(int orientation)\t使用指定的方向创建一个滑块，范围在 0~100 且初始值为 50\nJSlider(int min,int max)\t使用指定的最小值和最大值来创建一个水平滑块，初始值等于最小值加上最大值的平均值\nJSlider(int min,int max,int value)\t用指定的最小值、最大值和初始值创建一个水平滑块\n例如，创建一个最小值为 30，最大值为 120，初始值为 55 的水平滑块的语句如下所示。\nJSIider slider=new JSIider(30,120,55);\n\n滑块可以显示主刻度标记以及主刻度之间的次刻度标记。刻度标记之间的值的个数由 setMajorTickSpacing() 方法和 setMinorTickSpacing() 方法来控制。刻度标记的绘制由 setPaintTicks() 方法控制。\n\n滑块也可以在固定时间间隔（或在任意位置）沿滑块刻度打印文本标签，标签的绘制由 setLabelTable() 方法和 setPaintLabels() 方法控制。\n\nJSIider 类常用方法如表 2 所示。\n\n表2 JSIider类常用方法\n方法名称\t说明\ncreateStandardLabels(int increment)\t创建一个数字文本标签的 Hashtable，从滑块最小值处开始增加，并使用指定的增量\ngetLabelTable()\t返回哪些标签在哪些刻度绘制的字典\ngetMaj orTickSpacing()\t返回主刻度标记的间隔\ngetMaximum()\t从 BoundedRangeModel 返回滑块所支持的最大值\ngetMinimum()\t从 BoundedRangeModel 返回滑块所支持的最小值\ngetMinorTickSpacing()\t返回次刻度标记的间隔\ngetSnapToTicks()\t如果滑块（及其所表示的值）解析为最靠近用户放置滑块处的刻度标记的值，则返回为 true\ngetValue()\t从 BoundedRangeModel 返回滑块的当前值\nsetLabelTable(Dictionary labels)\t用于指定将在给定值处绘制哪个标签\nsetMaj orTickSpacing(int n)\t此方法设置主刻度标记的间隔\nsetMaximum(int maximum)\t将滑块的最大值设置为 maximum\nsetMinimum(int minimum)\t将滑块的最小值设置为 minimum\nsetMinorTickSpacing(int n)\t设置次刻度标记的间隔\nsetOrientation(int orientation)\t将滑块的方向设置为 SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL\nsetPaintLabels(boolean b)\t确定是否在滑块上绘制标签\nsetPaintTicks(boolean b)\t确定是否在滑块上绘制刻度标记\nsetPaintTrack(boolean b)\t确定是否在滑块上绘制滑道\nsetSnapToTicks(boolean b)\t指定为 true，则滑块（及其所表示的值）解析为最靠近用户放置滑块处的刻度标记的值\nsetValue(int n)\t将滑块的当前值设置为 n\n例 1\n在了解 JSIider 类的基础语法之后，下面创建一个滑块实例。实例非常简单，仅仅包含一个滑块，实例源代码如下所示。\n纯文本复制\npackage ch18;\nimport java.awt.Container;\nimport javax.swing.JFrame;\nimport javax.swing.JSlider;\npublic class JSliderDemo\n{\n    public static void main(String[] agrs)\n    {\n        JFrame frame=new JFrame("滑块组件示例");\n        frame.setSize(100,100);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        Container contentPane=frame.getContentPane();\n        JSlider slider=new JSlider(0,100);\n        slider.setMajorTickSpacing(10);\n        slider.setMinorTickSpacing(5);\n        slider.setPaintLabels(true);   \n        slider.setPaintTicks(true);\n        contentPane.add(slider);\n        frame.setVisible(true);       \n    }\n}\n\n\n如果需要在滑块上添加刻度或标签，可以在“contentPane.add(slider);”前添加下面两行语句：\nslider.setPaintLabels(true);\nslider.setPaintTicks(true);\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);