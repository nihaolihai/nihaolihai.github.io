(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{758:function(n,a,e){"use strict";e.r(a);var t=e(6),s=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"day3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#day3"}},[n._v("#")]),n._v(" day3")]),n._v(" "),e("h2",{attrs:{id:"提纲-1-java当中如何产生随机数2-java当中给我们提供的数学工具类java-lang-math3-java当中如何格式化输出4-方法的设计与调用5-条件判断-if-else-和-switch语句-三目运算6-循环语句-for循环-while循环-do-while7-break-continue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提纲-1-java当中如何产生随机数2-java当中给我们提供的数学工具类java-lang-math3-java当中如何格式化输出4-方法的设计与调用5-条件判断-if-else-和-switch语句-三目运算6-循环语句-for循环-while循环-do-while7-break-continue"}},[n._v("#")]),n._v(" 提纲:\n1.Java当中如何产生随机数\n2.Java当中给我们提供的数学工具类Java.lang.Math\n3.Java当中如何格式化输出\n4.方法的设计与调用\n5.条件判断   if   else 和 switch语句   三目运算\n6.循环语句    for循环   while循环   do while\n7.break    continue")]),n._v(" "),e("p",[n._v("知识点1:伪随机\nJava给我们提供了两种生成随机数的方式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("       //1.通过Math.random()方法       \n        //此方法是静态的,所以可以直接类名.方法名\n        //方法的返回类型是double\n        //范围[0.0,1.0)\n        double r = Math.random();//返回了一个大于等于0.0小于1.0之间的伪随机数\n         案例1:如何产生1-100之间的随机数?\n        int r =(int)(Math.random()*100+1);//需要强转\n\n     第二种方法:java.util.Random()类\n          //因为nextInt(int n)方法是非静态的,所以我们必须要通过对象名.方法名来调用\n          //所以我们必须要先创建对象\n          //返回类型是int 类型\n          //范围是[0,n)\n\n          1.先创建Random()对象\n          Random r = new Random();//r就是对象或者说r是一个引用\n          int n = nextInt(100)+1;//产生了一个[1-100]\n")])])]),e("hr"),n._v(" "),e("h2",{attrs:{id:"知识点二-java中给我们提供了关于数学的工具类-进行-指数运算-求根次幂-求最值注意点-math的方法都是静态方法-所以可以直接math-方法名-来进行调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点二-java中给我们提供了关于数学的工具类-进行-指数运算-求根次幂-求最值注意点-math的方法都是静态方法-所以可以直接math-方法名-来进行调用"}},[n._v("#")]),n._v(" 知识点二:\nJava中给我们提供了关于数学的工具类,进行  指数运算  求根\n次幂     求最值"),e("br"),n._v("\n注意点:Math的方法都是静态方法,所以可以直接Math.方法名()来进行调用")]),n._v(" "),e("p",[n._v("知识点三:\nJava中的格式化输出")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("          语法:%[flag][width][.precision]占位符\n\n          flag:标记位    -表示左对齐   默认的是右对齐\n          width:变量所占的宽度\n          precision:精度\n")])])]),e("h2",{attrs:{id:"占位符有哪些-s-代表字符串-所有的类型都可以被字符串代替-但是字符串不能够随意转成其他类型-d-代表一个整数-f-代表一个小数-b-代表布尔类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#占位符有哪些-s-代表字符串-所有的类型都可以被字符串代替-但是字符串不能够随意转成其他类型-d-代表一个整数-f-代表一个小数-b-代表布尔类型"}},[n._v("#")]),n._v(" 占位符有哪些?\n%s   代表字符串(所有的类型都可以被字符串代替,但是字符串不能够随意转成其他类型)\n%d   代表一个整数\n%f    代表一个小数\n%b   代表布尔类型")]),n._v(" "),e("p",[n._v("知识点四:方法的设计与调用\n为了完成某一个功能\n//定义一个类\npackage xxx.xxx.xx\nimport  xxx.xxx.xxx\nimport xx.xxx.xxx\npublic class XXX{\n//方法\n}")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("   语法:\n        修饰符  返回类型   方法名([参数列表])[可抛出的异常列表]{\n                      //方法体\n        }\n   目前,我们学习的方法该如何定义:\n          public [static] 返回类型  方法名([参数列表]){\n                  //方法体\n          }\n      注意:用static修饰的方法叫做静态方法,没有用static修饰的方法叫做非静态方法\n      普通修饰符:static(静态的)  final(最终的)  abstract(抽象的)\n      访问修饰符:\n            public  公开的,代表这个方法可以被所有的类来访问\n            protected  受保护的\n            default     不用写   默认的\n            private     私有的\n       注意点:修饰符之间是没有顺序的,也就是说  public static 或者static public\n\n      返回类型:\n                  1.void:就是表示返回类型是void,但是该方法没有返回值\n                  2.基本类型或者是对象类型(包含内置对象/自定义对象)\n        方法名:\n         标识符:方法名  变量名  类名所取的名字\n         标识符的命名规则\n                    行业内必须要遵守的:\n                     1.标识符由数字/字母/下划线/美元符号$组成的,但是不能由数字开头\n                     2.不能是Java关键字/不能使以下3个字面量(null true false)+不能是Java的两个保留字(goto  const)\n                     3.标识符没有长度限制\n                     4.标识符大小写是敏感的\n                     5.不推荐使用中文,会出现乱码问题\n                     6.提倡见名知意\n\n\n                    尽可能遵守的:\n                    1.类名和接口的命名首字母要大写,以后每个单词首字母也要大写\n                    2.方法名和变量名首字母要小写,以后每个单词的首字母要大写(驼峰)\n                    3.包名一般是公司域名倒置+项目代号  全部是由小写并且以.隔开\n                    4.常量命名一般是全部大写并且以_连接起来,也是提倡见名知意\n")])])]),e("p",[n._v('参数列表:可有可无\n传给方法的"原料"')]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("       实参:就是方法的调用者,传给方法的值,有实际的值\n       形参:定义中方法中的变量(参数列表中的),没有实际的值\n      \n       局部变量:定义在方法内部的变量,生命周期只存在于方法中,即{}内\n")])])]),e("p",[n._v("总结:\n方法调用:1.非静态方法可以调用所有方法\n2. 静态方法中只可以直接调用静态方法(如果想调用非静态方法,\n依然是要通过对象名.方法名来调用)\n3.静态方法的调用可以直接通过类名.方法名\n4.非静态方法的调用前必须要先创建对象,然后通过对象名.方法名")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("      总结:如果一个方法有返回类型,那么该方法中必有return\n              如果一个方法中有return,那么该方法返回类型不一定不是void\n")])])]),e("p",[n._v("方法返回类型该如何选择:\n这个根据具体业务\n只要你能把自己说服就行")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("            如果说你这是为了输出或者处理某个事物,那么就就可以用void\n            如果说你是为了得到某个值,而不关心这个值的后续处理,那么你就选择有返回类型的\n")])])]),e("hr"),n._v(" "),e("p",[n._v("知识点5:\n条件判断\n语法:\n1.条件过滤\nif(条件){\n//statement 1\n}")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("        2.分支的\n        if(条件){\n                //statement 2\n        }esle{\n              //statement 3\n        }\n\n        3.带多分支的\n        if(条件){\n            //......\n              if(...){\n                    ....\n              }\n        }else if(条件){\n              //....\n        }else if(条件){\n              //.....\n        }else{\n                ...............\n        }\n")])])]),e("p",[n._v("注意点:1.if括号里面的条件最好要互斥\n2.else if语句可以有多个\n3.if else  语句可以嵌套使用\n4.条件可以是布尔类型或者是表达式   if(i>j){}\nboolean flag  = true;\nif(flag){")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("                        }\n")])])]),e("hr"),n._v(" "),e("h2",{attrs:{id:"知识点6-switch-case语法1-switch中变量有6种-string-类型是jdk7-0以后加入进去-可以是string-byte-short-int-char-enum-枚举-面试题-经常会问switch括号中变量是否可以为long型-不可以-switch-变量-case-值1-语句1break-不能忘了case-值2-语句2break-default-break"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知识点6-switch-case语法1-switch中变量有6种-string-类型是jdk7-0以后加入进去-可以是string-byte-short-int-char-enum-枚举-面试题-经常会问switch括号中变量是否可以为long型-不可以-switch-变量-case-值1-语句1break-不能忘了case-值2-语句2break-default-break"}},[n._v("#")]),n._v(" 知识点6:switch   case\n语法1:\nswitch中变量有6种,(String 类型是JDK7.0以后加入进去)\n可以是String byte short int char enum(枚举)\n面试题:经常会问switch括号中变量是否可以为long型?  不可以!!!\nswitch(变量){\ncase 值1:\n//语句1\nbreak;//不能忘了\ncase 值2:\n//语句2\nbreak;\n.........\n........\ndefault:\nbreak;\n}")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("     语法2:\n               switch(变量){\n                case 值1:\n                case 值2:\n                              //语句2\n                              break;\n                   case 值3:\n                            break;......\n                   default:\n                       //....\n                            break;\n            }\n")])])]),e("p",[n._v("注意:case 是可以合并起来一块写的!\n运行原理:当switch括号中的变量等于case 后面的值的时候,就进入相应的case中执行\n当它遇到break的时候,就会跳出switch,否则程序会继续往下执行\n当没有哪个case后面的值跟switch括号中的变量相等,那么程序就会进入到\ndefault中去执行")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("            注意:default可以出现在任意一个位置\n")])])]),e("h2",{attrs:{id:"总结-switch-case能够完成的功能-if-else一定能够完成-也就是if-else-的业务拓展性更大一点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结-switch-case能够完成的功能-if-else一定能够完成-也就是if-else-的业务拓展性更大一点"}},[n._v("#")]),n._v(" 总结:switch  case能够完成的功能 if  else一定能够完成]\n也就是if   else   的业务拓展性更大一点")]),n._v(" "),e("p",[n._v("知识点7:三目运算\n(表达式)?expre1:expre2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('        如果表达式是true的话就进入expre1 ,否则就进入expre2\n\n        System.out.println(1>2?"真的":"假的");//假的\n        \n        (9%2==0)?"1":(1>2?"2":"1")--------\x3e1\n')])])]),e("hr"),n._v(" "),e("p",[n._v("知识点8:循环语句\nfor循环\nwhile循环\n以上俩个叫做后置循环\ndo while循环  叫做前置循环")]),n._v(" "),e("p",[n._v("1.for 循环\n语法:\nfor(表达式1;表达式2;表达式3){\n//循环体\n}\n表达式1:初始化语句,只执行一次;\n表达式2:循环条件,满足条件,进入(继续)循环,不满足的时候,循环终止\n至少执行一次;\n表达式3:变量因子,记录每次循环变量的值前后的变化\n可能执行,也有可能不执行")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('            简单形式:\n             for(int i=11;i<=10;i++){\n                  System.out.println(i);\n             }\n\n             for循环的复合态\n             for(int i=0,j=1;i<=10 && j<=5;i+=2,j+=2){\n                    System.out.printn(i+" "+j)\n             }\n\n             for循环括号中的三个表达式任意一个都是可以省略的\n            for(int i=0;;i++){\n                      ............\n            }\n\n            int i;\n            for(i=10;i<10;){\n                    ..........\n            }\n\n            //下面这种写法相当于while(true){}\n            //死循环\n            for(;;){\n                  ..........\n            }\n')])])]),e("p",[n._v("for循环可以嵌套使用:\n外层循环和内层循环无关:\n外层循环走一次,内层循环运行全部\nfor(int i=0;i<=10;i++){\nfor(int j=0;j<=5;j++){\n.....\n}\n}")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("           外层循环和内层循环相关的\n           内层循环的条件用到了外层循环的变量\n              for(int i=0;i<=10;i++){\n                        for(int j=0;j<=i;j++){\n                                  .....\n                        }\n                  }\n")])])]),e("p",[n._v("面试题:\nbreak和continue区别\nbreak    跳出循环,如果有多个循环嵌套,那么它只跳出自己所在的那一层循环\n跳出switch")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("    continue:跳过本轮循环(continue后面的程序同样不执行),继续等待下一轮循环\n                  一般是出现在循环体中\n")])])]),e("p",[n._v("while循环")]),n._v(" "),e("p",[n._v("语法:while(条件){\n//循环体\n}\n条件同样可以是布尔类型或者是表示式")]),n._v(" "),e("p",[n._v("//死循环   千万不要忘记指定循环退出条件\nwhile(true){\nif(条件){\nbreak;\n}\n}\n或者\nboolean flag = true;\nwhile(flag){\nif(条件){\nflag = false;\n}\n}\n适用条件:当你不确定你要循环多少次的时候")]),n._v(" "),e("p",[n._v("do while循环    前置循环    先进入循环体,然后再判断循环条件\ndo{")]),n._v(" "),e("p",[n._v("}while(条件);")])])}),[],!1,null,null,null);a.default=s.exports}}]);