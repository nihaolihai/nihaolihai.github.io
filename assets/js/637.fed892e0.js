(window.webpackJsonp=window.webpackJsonp||[]).push([[637],{1131:function(n,e,r){"use strict";r.r(e);var t=r(6),o=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"mongodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mongodb"}},[this._v("#")]),this._v(" MongoDB")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('pom.xml\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n   <modelVersion>4.0.0</modelVersion>\n\n   <groupId>top.lrshuai.mongodb</groupId>\n   <artifactId>blog</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <packaging>jar</packaging>\n\n   <name>springboot-mongodb</name>\n   <description>Demo project for Spring Boot</description>\n\n   <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-parent</artifactId>\n      <version>1.5.8.RELEASE</version>\n      <relativePath/> \x3c!-- lookup parent from repository --\x3e\n   </parent>\n\n   <properties>\n      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n      <java.version>1.8</java.version>\n   </properties>\n\n   <dependencies>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter</artifactId>\n      </dependency>\n\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-test</artifactId>\n         <scope>test</scope>\n      </dependency>\n      \n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-data-mongodb</artifactId>\n      </dependency>\n      \n   </dependencies>\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n         </plugin>\n      </plugins>\n   </build>\n\n\n</project>\npoperitis\n# this is need password auth\n#spring.data.mongodb.uri=mongodb://name:pass@localhost:27017/test\n\n# not need auth \nspring.data.mongodb.uri=mongodb://192.168.12.133:22222/test\n启动\n@SpringBootApplication()\npublic class Application {\n\n   public static void main(String[] args) {\n      SpringApplication.run(Application.class, args);\n   }\n   \n}\ndao\npublic interface UserDao {\n   public void saveUser(User user);\n   public void saveBathUser(List<User> users);\n   public void delUserById(Long id);\n   public int upadteUserById(User user);\n   public User findUserByName(String name);\n   public List<User> findAll();\n   public List<User> findUserByLikeName(String name);\n   \n}\npackage top.lrshuai.mongodb.dao.impl;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.stereotype.Component;\n\nimport com.mongodb.WriteResult;\n\nimport top.lrshuai.mongodb.dao.UserDao;\nimport top.lrshuai.mongodb.entity.User;\n\n@Component\npublic class UserDaoImpl implements UserDao{\n\n   @Autowired\n   private MongoTemplate mongoTemplate;\n   \n   /**\n    * 新增一个，存在则覆盖\n    */\n   @Override\n   public void saveUser(User user) {\n      mongoTemplate.save(user);\n   }\n   \n   /**\n    * 批量新增\n    */\n   @Override\n   public void saveBathUser(List<User> users) {\n      mongoTemplate.insert(users, User.class);\n   }\n   \n   /**\n    * 删除\n    */\n   @Override\n   public void delUserById(Long id) {\n      Query query = new Query(Criteria.where("id").is(id));\n      mongoTemplate.remove(query, User.class);\n   }\n\n   /**\n    * 更新 通过id\n    */\n   @Override\n   public int upadteUserById(User user) {\n      Query query = new Query(Criteria.where("id").is(user.getId()));\n      Update update = new Update();\n      update.set("name", user.getName()).set("age", user.getAge());\n      WriteResult result =  mongoTemplate.updateFirst(query, update, User.class);\n      return result.getN();\n   }\n\n   /**\n    * 通过名称查找\n    */\n   @Override\n   public User findUserByName(String name) {\n      Query query = new Query(Criteria.where("name").is(name));\n      return mongoTemplate.findOne(query, User.class);\n   }\n   \n   /**\n    * 查询所有\n    */\n   @Override\n   public List<User> findAll() {\n      return mongoTemplate.findAll(User.class);\n   }\n   \n   /**\n    * name模糊查找\n    */\n   @Override\n   public List<User> findUserByLikeName(String name) {\n      Query query = new Query();\n      query.addCriteria(Criteria.where("name").regex(".*" +name+ ".*"));\n      return mongoTemplate.find(query, User.class);\n   }\n\n}\n\n实体类\npackage top.lrshuai.mongodb.entity;\n\nimport org.springframework.data.annotation.Id;\n\npublic class User {\n   @Id\n   private Long id;\n   \n   private String name;\n   private Integer age;\n   \n   public Long getId() {\n      return id;\n   }\n   public void setId(Long id) {\n      this.id = id;\n   }\n   public String getName() {\n      return name;\n   }\n   public void setName(String name) {\n      this.name = name;\n   }\n   public Integer getAge() {\n      return age;\n   }\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public User() {\n      super();\n      // TODO Auto-generated constructor stub\n   }\n   public User(Long id, String name, Integer age) {\n      super();\n      this.id = id;\n      this.name = name;\n      this.age = age;\n   }\n   @Override\n   public String toString() {\n      return "User [id=" + id + ", name=" + name + ", age=" + age + "]";\n   }\n   \n   \n   \n}\n\n\npackage top.lrshuai.mongodb.repository;\n\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.stereotype.Component;\n\nimport top.lrshuai.mongodb.entity.User;\n\n@Component\npublic interface UserRepository extends MongoRepository<User, Long>{\n   public User findUserByName(String username);\n\n}\n\n')])])])])}),[],!1,null,null,null);e.default=o.exports}}]);