(window.webpackJsonp=window.webpackJsonp||[]).push([[569],{1059:function(e,t,n){"use strict";n.r(t);var r=n(6),i=Object(r.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"servlet-filterconfig接口及其使用方法详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet-filterconfig接口及其使用方法详解"}},[this._v("#")]),this._v(" servlet FilterConfig接口及其使用方法详解")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('FilterConfig 是 Servlet API 提供的一个用于获取 Filter 程序在 web.xml 文件中的配置信息的接口，该接口封装了 Filter 程序在 web.xml 中的所有注册信息，并且提供了一系列获取这些配置信息的方法，具体如表 1 所示。\n\n表 1 FilterConfig 接口中的方法\n方法声明\t功能描述\nString getFilterName()\tgetFilterName() 方法用于返回在 web.xml 文件中为 Filter 所设置的名称，也就是返回 ＜filter-name＞ 元素的设置值\nString getInitParameter(String name)\tgetInitParameter(String name) 方法用于返回在 web.xml 文件中为 Filter 所设置的某个名称的初始化参数值，如果指定名称的初始化参数不存在，则返回 null\nEnumeration getInitParameterNames()\tgetInitParameterNames() 方法用于返回一个 Enumeration 集合对象，该集合对象包含在 web.xml 文件中为当前 Filter 设置的所有初始化参数的名称\nServletContext getServletContext()\tgetServletContext()方法用于返回 FilterConfig 对象中所包装的 ServletContext 对象的引用表 1 列举了 FilterConfig 接口中的一系列方法，为了让读者更好地掌握这些方法，下面以 getInitParameter（String name）方法的使用为例演示 FilterConfig 接口的使用。\n1）创建过滤器\n在 filterDemo01 项目的 com.mengma.filter 包中创建过滤器 MyFilter03，使用该过滤器获取 web.xml 中设置的参数，如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\npublic class MyFilter03 implements Filter {\n    private String characterEncoding;\n    FilterConfig fc;\n    public void init(FilterConfig fConfig) throws ServletException {\n        // 获取 FilterConfig 对象\n        this.fc = fConfig;\n    }\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n        // 输出参数信息\n        characterEncoding = fc.getInitParameter("Encoding");\n        System.out.println("encoding初始化参数的值为：" + characterEncoding);\n        chain.doFilter(request, response);\n    }\n    public void destroy() {\n    }\n}\n2）配置过滤器\n在 web.xml 文件中配置过滤器信息。为了防止其他过滤器影响 MyFilter03 的拦截效果，需要先将 web.xml 文件中其他过滤器的配置信息注释掉，然后将 MyFilter03 过滤器的映射信息配置在 MyServlet 配置信息的前面，具体代码如下所示：\n<filter>\n    <filter-name>MyFilter03</filter-name>\n    <filter-class>com.mengma.filter.MyFilter03</filter-class>\n    <init-param>\n        <param-name>encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>MyFilter03</filter-name>\n    <url-pattern>/MyServlet</url-pattern>\n</filter-mapping>\n3）运行项目并查看结果\n启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/filterDemo01/MyServlet 访问 MyServlet\n\n')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);