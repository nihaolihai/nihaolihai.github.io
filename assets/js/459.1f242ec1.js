(window.webpackJsonp=window.webpackJsonp||[]).push([[459],{948:function(e,n,r){"use strict";r.r(n);var t=r(6),a=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"swing-计时器组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#swing-计时器组件"}},[this._v("#")]),this._v(" swing 计时器组件")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('计时器（Timer）组件可以在指定时间间隔触发一个或多个 ActionEvent。设置计时器的过程包括创建一个 Timer 对象，在该对象上注册一个或多个动作侦听器，以及使用 start() 方法启动该计时器。\n\n例如，以下代码创建并启动一个每秒（该时间由 Timer 构造方法的第一个参数指定）触发一次动作事件的计时器。Timer 构造方法的第二个参数指定接收计时器动作事件的监听器。\nint delay=1000;    //时间间隔，单位为毫秒\nActionListener taskPerformer=new ActionListener()\n{\n    public void afrfcionPerformed(ActionEvent evt)\n    {\n        //具体的任务\n    }\n};\nnew Timer(delay,taskPerformer).start();\n\n创建 Timer 类时要指定一个延迟参数和一个 ActionListener。延迟参数用于设置初始延迟和事件触发之间的延迟（以毫秒为单位）。启动计时器后，它将在向已注册监听器触发第一个 ActionEvent 之前等待初始延迟。第一个事件之后，每次超过事件间延迟时它都继续触发事件，直到被停止。\n\n创建 Timer 类之后，可以单独更改初始延迟和事件间延迟，并且可以添加其他 ActionListener。如果希望计时器只在第一次时触发然后停止，可以对计时器调用 setRepeats(false)。Timer 类的常用方法如表 1 所示。\n\n表1 Timer类的常用方法\n方法名称\t说明\naddActionListener(ActionListener 1)\t将一个动作监听器添加到 Timer\ngetDelay()\t返回两次触发动作事件间延迟，以毫秒为单位\nisCoalesce()\t如果 Timer 组合多个挂起的动作事件，则返回 true\nisRunning()\t如果 Timer 正在运行，则返回 true\nrestart()\t重新启动 Timer，取消所有挂起的触发并使它按初始延迟触发\nsetCoalesce(boolean flag)\t设置 Timer 是否组合多个挂起的 ActionEvent\nsetDelay(int delay)\t设置 Timer 的事件间延迟，两次连续的动作事件之间的毫秒数\nsetLogTimers(boolean flag)\t启用/禁用计时器日志\nsetRepeats(boolean flag)\t如果 flag 为 false，则指示 Timer 只向其监听器发送一次动作事件\nstart()\t启动 Timer，使它开始向其监听器发送动作事件\nstop()\t停止 Timer，使它停止向其监听器发送动作事件\n例 1\n编写一个实例，模拟软件安装过程中显示安装进度信息的进度条。该实例中使用 Timer 类模拟安装软件的实际过程，JProgressBar 类显示相应的进度信息，主要实现过程如下。\n\n(1) 创建一个 JProgressBarDemo1 类并实现 ActionListener 接口和 ChangeListener 接口。\npackage ch18;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JProgressBar;\nimport javax.swing.Timer;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\npublic class JProgressBarDemo1 implements ActionListener,ChangeListener\n{\n    JFrame frame=null;\n    JProgressBar progressbar;\n    JLabel label;\n    Timer timer;\n    JButton b;\n    public static void main(String[] agrs)\n    {\n        new JProgressBarDemo1();    //创建一个实例化对象\n    }\n}\n\n(2) 在构造方法中对进度条和计时器进行设置。主要代码如下：\npublic JProgressBarDemo1()\n{\n    frame=new JFrame("软件安装");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    Container contentPane=frame.getContentPane();\n    label=new JLabel(" ",JLabel.CENTER);    //创建显示进度信息的文本标签\n    progressbar=new JProgressBar();    //创建一个进度条\n    progressbar.setOrientation(JProgressBar.HORIZONTAL);\n    progressbar.setMinimum(0);\n    progressbar.setMaximum(100);\n    progressbar.setValue(0);\n    progressbar.setStringPainted(true);\n    progressbar.addChangeListener(this);    //添加事件监听器\n    //设置进度条的几何形状\n    progressbar.setPreferredSize(new Dimension(300,20));\n    progressbar.setBorderPainted(true);\n    progressbar.setBackground(Color.pink);\n    //添加启动按钮\n    JPanel panel=new JPanel();\n    b=new JButton("安装");\n    b.setForeground(Color.blue);\n    //添加事件监听器\n    b.addActionListener(this);\n    panel.add(b);\n    timer=new Timer(100, this);    //创建一个计时器，计时间隔为100毫秒\n    //把组件添加到frame中\n    contentPane.add(panel,BorderLayout.NORTH);\n    contentPane.add(progressbar,BorderLayout.CENTER);\n    contentPane.add(label,BorderLayout.SOUTH);\n    frame.pack();\n    frame.setVisible(true);\n}\n\n(3) 实现 ActionListener 接口中的 actionPerformed() 方法，在这里控制计时器的开始，以及进度条值的变化。具体代码如下：\n//实现事件监听器接口中的方法\npublic void actionPerformed(ActionEvent e)\n{\n    if(e.getSource()==b)\n        timer.start();\n    if(e.getSource()==timer)\n    {\n        int value=progressbar.getValue();\n        if(value<100)\n        {\n            progressbar.setValue(++value);\n        }\n        else\n        {\n            timer.stop();\n            frame.dispose();\n        }\n    }\n}\n\n(4) 实现 ChangeListener 接口中的 stateChange() 方法，具体代码如下：\npublic void stateChanged(ChangeEvent e1)    //实现事件监听器接口中的方法\n{\n    int value=progressbar.getValue();\n    if(e1.getSource()==progressbar)\n    {\n        label.setText("目前已完成进度："+Integer.toString(value)+" %");\n        label.setForeground(Color.blue);\n    }\n}\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);