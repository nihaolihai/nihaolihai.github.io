(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{635:function(n,i,t){"use strict";t.r(i);var e=t(6),s=Object(e.a)({},(function(){var n=this.$createElement,i=this._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[i("h2",{attrs:{id:"java-linkedlist"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#java-linkedlist"}},[this._v("#")]),this._v(" Java LinkedList")]),this._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[this._v('链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。\n\n链表可分为单向链表和双向链表。\n\n一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。\n\n\n\n一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。\n\n\n\nJava LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。\n\n与 ArrayList 相比，LinkedList 的增加和删除对操作效率更高，而查找和修改的操作效率较低。\n\n以下情况使用 ArrayList :\n\n频繁访问列表中的某一个元素。\n只需要在列表末尾进行添加和删除元素操作。\n以下情况使用 LinkedList :\n\n你需要通过循环迭代来访问列表中的某些元素。\n需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。\nLinkedList 继承了 AbstractSequentialList 类。\n\nLinkedList 实现了 Queue 接口，可作为队列使用。\n\nLinkedList 实现了 List 接口，可进行列表的相关操作。\n\nLinkedList 实现了 Deque 接口，可作为队列使用。\n\nLinkedList 实现了 Cloneable 接口，可实现克隆。\n\nLinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。\n\n\n\nLinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\n// 引入 LinkedList 类\nimport java.util.LinkedList; \n\nLinkedList<E> list = new LinkedList<E>();   // 普通创建方法\n或者\nLinkedList<E> list = new LinkedList(Collection<? extends E> c); // 使用集合创建链表\n创建一个简单的链表实例：\n\n// 引入 LinkedList 类\n实例\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Google, Runoob, Taobao, Weibo]\n更多的情况下我们使用 ArrayList 访问列表中的随机元素更加高效，但以下几种情况 LinkedList 提供了更高效的方法。\n\n在列表开头添加元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        // 使用 addFirst() 在头部添加元素\n        sites.addFirst("Wiki");\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Wiki, Google, Runoob, Taobao]\n在列表结尾添加元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        // 使用 addLast() 在尾部添加元素\n        sites.addLast("Wiki");\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Google, Runoob, Taobao, Wiki]\n在列表开头移除元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        // 使用 removeFirst() 移除头部元素\n        sites.removeFirst();\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Runoob, Taobao, Weibo]\n在列表结尾移除元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        // 使用 removeLast() 移除尾部元素\n        sites.removeLast();\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Google, Runoob, Taobao]\n获取列表开头的元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        // 使用 getFirst() 获取头部元素\n        System.out.println(sites.getFirst());\n    }\n}\n以上实例，执行输出结果为：\n\nGoogle\n获取列表结尾的元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        // 使用 getLast() 获取尾部元素\n        System.out.println(sites.getLast());\n    }\n}\n以上实例，执行输出结果为：\n\nWeibo\n迭代元素\n我们可以使用 for 配合 size() 方法来迭代列表中的元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        for (int size = sites.size(), i = 0; i < size; i++) {\n            System.out.println(sites.get(i));\n        }\n    }\n}\nsize() 方法用于计算链表的大小。\n\n以上实例，执行输出结果为：\n\nGoogle\nRunoob\nTaobao\nWeibo\n也可以使用 for-each 来迭代元素：\n\n实例\n// 引入 LinkedList 类\nimport java.util.LinkedList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        LinkedList<String> sites = new LinkedList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        for (String i : sites) {\n            System.out.println(i);\n        }\n    }\n}\n以上实例，执行输出结果为：\n\nGoogle\nRunoob\nTaobao\nWeibo\n常用方法\n方法\t描述\npublic boolean add(E e)\t链表末尾添加元素，返回是否成功，成功为 true，失败为 false。\npublic void add(int index, E element)\t向指定位置插入元素。\npublic boolean addAll(Collection c)\t将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。\npublic boolean addAll(int index, Collection c)\t将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。\npublic void addFirst(E e)\t元素添加到头部。\npublic void addLast(E e)\t元素添加到尾部。\npublic boolean offer(E e)\t向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。\npublic boolean offerFirst(E e)\t头部插入元素，返回是否成功，成功为 true，失败为 false。\npublic boolean offerLast(E e)\t尾部插入元素，返回是否成功，成功为 true，失败为 false。\npublic void clear()\t清空链表。\npublic E removeFirst()\t删除并返回第一个元素。\npublic E removeLast()\t删除并返回最后一个元素。\npublic boolean remove(Object o)\t删除某一元素，返回是否成功，成功为 true，失败为 false。\npublic E remove(int index)\t删除指定位置的元素。\npublic E poll()\t删除并返回第一个元素。\npublic E remove()\t删除并返回第一个元素。\npublic boolean contains(Object o)\t判断是否含有某一元素。\npublic E get(int index)\t返回指定位置的元素。\npublic E getFirst()\t返回第一个元素。\npublic E getLast()\t返回最后一个元素。\npublic int indexOf(Object o)\t查找指定元素从前往后第一次出现的索引。\npublic int lastIndexOf(Object o)\t查找指定元素最后一次出现的索引。\npublic E peek()\t返回第一个元素。\npublic E element()\t返回第一个元素。\npublic E peekFirst()\t返回头部元素。\npublic E peekLast()\t返回尾部元素。\npublic E set(int index, E element)\t设置指定位置的元素。\npublic Object clone()\t克隆该列表。\npublic Iterator descendingIterator()\t返回倒序迭代器。\npublic int size()\t返回链表元素个数。\npublic ListIterator listIterator(int index)\t返回从指定位置开始到末尾的迭代器。\npublic Object[] toArray()\t返回一个由链表元素组成的数组。\npublic T[] toArray(T[] a)\t返回一个由链表元素转换类型而成的数组。\n')])])])])}),[],!1,null,null,null);i.default=s.exports}}]);