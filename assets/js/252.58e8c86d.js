(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{741:function(e,r,n){"use strict";n.r(r);var t=n(6),s=Object(t.a)({},(function(){var e=this.$createElement,r=this._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[r("h2",{attrs:{id:"mybatis一对多关联查询-级联查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mybatis一对多关联查询-级联查询"}},[this._v("#")]),this._v(" MyBatis一对多关联查询（级联查询）")]),this._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('在《MyBatis一对一关联查询》教程中学习了 MyBatis 如何处理一对一级联查询，那么 MyBatis 又是如何处理一对多级联查询的呢？在实际生活中一对多级联关系有许多，例如一个用户可以有多个订单，而一个订单只属于一个用户。\n\n下面以用户和订单之间的关系为例讲解一对多级联查询（实现“根据 uid 查询用户及其关联的订单信息”的功能）的处理过程，读者只需参考该实例即可学会一对多级联查询的 MyBatis 实现。\n1）创建数据表\n本实例需要两张数据表，一张是用户表 user，一张是订单表 orders，这两张表具有一对多的级联关系。user 表在前面已创建，orders 表的创建代码如下：\nCREATE TABLE `orders` (\n    `id` tinyint(2) NOT NULL AUTO_INCREMENT,\n    `ordersn` varchar(10) DEFAULT NULL,\n    `user_id` tinyint(2) DEFAULT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n2）创建持久化类\n在 myBatisDemo02 应用的 com.po 包中创建数据表 orders 对应的持久化类 Orders，user 表对应的持久化类 MyUser 在前面已创建，但需要为 MyUser 添加如下属性：\n// 一对多级联查询，用户关联的订单\nprivate List<Orders> ordersList;\n\n同时，需要为该属性添加 setter 和 getter 方法。\n\nOrders 类的代码如下：\npackage com.po;\npublic class Orders {\n    private Integer id;\n    private String ordersn;\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getOrdersn() {\n        return ordersn;\n    }\n    public void setOrdersn(String ordersn) {\n        this.ordersn = ordersn;\n    }\n    @Override\n    public String toString() {\n        return "Orders[id=" + id + ",ordersn=" + ordersn + "]";\n    }\n}\n3）创建映射文件\n在 myBatisDemo02 应用的 com.mybatis 中创建两张表对应的映射文件 UserMapper.xml 和 OrdersMapper.xml。映射文件 UserMapper.xml 在前面已创建，但需要添加以下配置才能实现一对多级联查询（根据 uid 查询用户及其关联的订单信息）：\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="com.mybatis.mapper.UserMapper">\n    \x3c!-- 一对多 根据uid查询用户及其关联的订单信息：级联查询的第一种方法（嵌套查询） --\x3e\n    <resultMap type="com.po.MyUser" id="userAndOrders1">\n        <id property="uid" column="uid" />\n        <result property="uname" column="uname" />\n        <result property="usex" column="usex" />\n        \x3c!-- 一对多级联查询，ofType表示集合中的元素类型，将uid传递给selectOrdersByld --\x3e\n        <collection property="ordersList" ofType="com.po.Orders"\n            column="uid" select="com.dao.OrdersDao.selectOrdersByld" />\n    </resultMap>\n    <select id="selectUserOrdersById1" parameterType="Integer"\n        resultMap="userAndOrders1">\n        select * from user where uid = #{id}\n    </select>\n    \x3c!--对多根据uid查询用户及其关联的订单信息：级联查询的第二种方法（嵌套结果） --\x3e\n    <resultMap type="com.po.MyUser" id="userAndOrders2">\n        <id property="uid" column="uid" />\n        <result property="uname" column="uname" />\n        <result property="usex" column="usex" />\n        \x3c!-- 对多级联查询，ofType表示集合中的元素类型 --\x3e\n        <collection property="ordersList" ofType="com.po.Orders">\n            <id property="id" column="id" />\n            <result property="ordersn" column="ordersn" />\n        </collection>\n    </resultMap>\n    <select id="selectUserOrdersById2" parameterType="Integer"\n        resultMap="userAndOrders2">\n        select u.*,o.id, o.ordersn from user u, orders o where u.uid\n        = o.user_id and\n        u.uid=#{id}\n    </select>\n    \x3c!-- 一对多 根据uid查询用户及其关联的订单信息：连接查询（使用POJO存储结果） --\x3e\n    <select id="selectUserOrdersById3" parameterType="Integer"\n        resultType="com.pojo.SelectUserOrdersById">\n        select u.*, o.id, o.ordersn from user u, orders o where\n        u.uid = o.user_id\n        and u.uid=#{id}\n    </select>\n</mapper>\nOrdersMapper.xml 的配置代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="com.dao.OrdersDao">\n    \x3c!-- 根据用户uid查询订单信息 --\x3e\n    <select id="selectOrdersById" resultType="com.po.Orders"\n        parameterType="Integer">\n        select * from orders where user_id=#{id}\n    </select>\n</mapper>\n4）创建 POJO 类\n在 myBatisDemo02 应用的 com.pojo 包中创建在第 3 步中使用的 POJO 类 com.pojo. SelectUserOrdersById。\n\nSelectUserOrdersById 的代码如下：\npackage com.po;\npublic class SelectUserOrdersById {\n    private Integer uid;\n    private String uname;\n    private String usex;\n    private Integer id;\n    private String ordersn;\n    // 省略setter和getter方法\n    @Override\n    public String toString() { // 为了方便查看结果，重写了toString方法\n        return "User[uid=" + uid + ",uname=" + uname + ",usex=" + usex\n                + ",oid=" + id + ",ordersn=" + ordersn + "]";\n    }\n}\n5）创建数据操作接口\n在 myBatisDemo02 应用的 com.dao 包中创建第 3 步中映射文件对应的数据操作接口 OrdersDao 和 UserDao。\n\nOrdersDao 的代码如下：\npackage com.dao;\nimport java.util.List;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\nimport com.po.Orders;\n@Repository("ordersDao")\n@Mapper\npublic interface OrdersDao {\n    public List<Orders> selectOrdersById(Integer uid);\n}\nUserDao 接口在前面已创建，这里只需添加如下接口方法：\npackage com.dao;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\nimport com.po.MyUser;\nimport com.po.SelectUserOrdersById;\n@Repository("userDao")\n@Mapper\npublic interface UserDao {\n    public MyUser selectOrdersById1(Integer uid);\n    public MyUser selectOrdersById2(Integer uid);\n    public List<SelectUserOrdersById> selectOrdersById3(Integer uid);\n}\n6）调用接口方法及测试\n在 myBatisDemo02 应用的 com.controller 包中创建 OneToMoreController 类，在该类中调用第 5 步的接口方法，同时创建测试类 TestOneToMore。\n\nOneToMoreController 的代码如下：\n@Controller("oneToMoreController")\npublic class oneToMoreController {\n    @Autowired\n    private UserDao userDao;\n    public void test(){\n        //查询一个用户及订单信息\n        MyUser auser1 = userDao.selectUserOrderById1(1);\n        System.out.println(auser1);\n        System.out.println("=============================");\n        MyUser auser2 = userDao.selectUserOrderById2(1);\n        System.out.println(auser2);\n        System.out.println("=============================");\n        List<SelectUserOrdersById> auser3 = userDao.selectUserOrdersById3(1);\n        System.out.println(auser3);\n        System.out.println("=============================");\n    }\n}\nTestOneToMore 的代码如下：\n纯文本复制\npublic class TestOneToMore {\n    public static void main(String[] args) {\n        ApplicationContext appcon = new ClassPathXmlApplicationContext("applicationContext.xml");\n        OneToMoreController otm = (OneToMoreController)appcon.getBean("oneToMoreController");\n        otm.test();\n    }\n}\n\n')])])])])}),[],!1,null,null,null);r.default=s.exports}}]);