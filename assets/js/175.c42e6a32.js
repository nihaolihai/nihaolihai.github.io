(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{672:function(n,t,e){"use strict";e.r(t);var i=e(6),r=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"java-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-字符串"}},[this._v("#")]),this._v(" Java  字符串")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\n- 如何编译 Java 文件\n\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println("Hello World");\n    }\n}\n\nc:\\jdk\\demoapp> javac HelloWorld.java\n\nc:\\jdk\\demoapp> java HelloWorld\n\nC:> java -classpath C:\\java\\DemoClasses HelloWorld\n\n- hava运行版本\njava -version\n\n- 格式化时间（SimpleDateFormat）\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n \npublic class Main{\n    public static void main(String[] args){\n        Date date = new Date();\n        String strDateFormat = "yyyy-MM-dd HH:mm:ss";\n        SimpleDateFormat sdf = new SimpleDateFormat(strDateFormat);\n        System.out.println(sdf.format(date));\n    }\n}\n\n- 获取当前时间\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n \npublic class Main{\n    public static void main(String[] args){\n        \n        SimpleDateFormat sdf = new SimpleDateFormat();// 格式化时间 \n        sdf.applyPattern("yyyy-MM-dd HH:mm:ss a");// a为am/pm的标记  \n        Date date = new Date();// 获取当前时间 \n        System.out.println("现在时间：" + sdf.format(date)); // 输出已经格式化的现在时间（24小时制） \n    } \n}\n\n- 获取年份、月份等\n\npublic class Main {\n    public static void main(String[] args) {\n        Calendar cal = Calendar.getInstance();\n        int day = cal.get(Calendar.DATE);\n        int month = cal.get(Calendar.MONTH) + 1;\n        int year = cal.get(Calendar.YEAR);\n        int dow = cal.get(Calendar.DAY_OF_WEEK);\n        int dom = cal.get(Calendar.DAY_OF_MONTH);\n        int doy = cal.get(Calendar.DAY_OF_YEAR);\n \n        System.out.println("当期时间: " + cal.getTime());\n        System.out.println("日期: " + day);\n        System.out.println("月份: " + month);\n        System.out.println("年份: " + year);\n        System.out.println("一周的第几天: " + dow);  // 星期日为一周的第一天输出为 1，星期一输出为 2，以此类推\n        System.out.println("一月中的第几天: " + dom);\n        System.out.println("一年的第几天: " + doy);\n    }\n}\n\n- 时间戳转换成时间\n\n以下实例演示了如何使用 SimpleDateFormat 类的 format() 方法将时间戳转换成时间。\n\n日期和时间模式(注意大小写，代表的含义是不同的)：\n\nyyyy：年\nMM：月\ndd：日\nhh：1~12小时制(1-12)\nHH：24小时制(0-23)\nmm：分\nss：秒\nS：毫秒\nE：星期几\nD：一年中的第几天\nF：一月中的第几个星期(会把这个月总共过的天数除以7)\nw：一年中的第几个星期\nW：一月中的第几星期(会根据实际情况来算)\na：上下午标识\nk：和HH差不多，表示一天24小时制(1-24)\nK：和hh差不多，表示一天12小时制(0-11)\nz：表示时区\nMain.java 文件\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n \npublic class Main{\n    public static void main(String[] args){\n        Long timeStamp = System.currentTimeMillis();  //获取当前时间戳\n        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n        String sd = sdf.format(new Date(Long.parseLong(String.valueOf(timeStamp))));      // 时间戳转换成时间\n        System.out.println("格式化结果：" + sd);\n \n        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy 年 MM 月 dd 日 HH 时 mm 分 ss 秒");\n        String sd2 = sdf2.format(new Date(Long.parseLong(String.valueOf(timeStamp))));\n        System.out.println("格式化结果：" + sd2);\n   }\n}\n以上代码运行输出结果为：\n\n格式化结果：2018-07-10 12:17:34\n格式化结果：2018 年 07 月 10 日 12 时 17 分 34 秒\n\n\n- 异常处理方法\n\nclass ExceptionDemo\n{\n    public static void main(String[] args) {\n        try {\n            throw new Exception("My Exception");\n        } catch (Exception e) {\n            System.err.println("Caught Exception");\n            System.err.println("getMessage():" + e.getMessage());\n            System.err.println("getLocalizedMessage():" + e.getLocalizedMessage());\n            System.err.println("toString():" + e);\n            System.err.println("printStackTrace():");\n            e.printStackTrace();\n        }\n    }\n}\n\n- 使用 catch 处理异常\n\npublic class Main {\n    public static void main (String args[]) {\n        int array[]={20,20,40};\n        int num1=15,num2=10;\n        int result=10;\n        try{\n            result = num1/num2;\n            System.out.println("结果为 " +result);\n            for(int i =5;i >=0; i--) {\n                System.out.println ("数组的元素值为 " +array[i]);\n            }\n        }\n        catch (Exception e) {\n            System.out.println("触发异常 : "+e);\n        }\n    }\n}\n\n- 多线程异常处理\n\nclass MyThread extends Thread{\n    public void run(){\n        System.out.println("Throwing in " +"MyThread");\n        throw new RuntimeException();\n    }\n}\nclass Main {\n    public static void main(String[] args){\n        MyThread t = new MyThread();\n        t.start();\n        try{\n            Thread.sleep(1000);\n        }\n        catch (Exception x){\n            System.out.println("Caught it" + x);\n        }\n        System.out.println("Exiting main");\n    }\n}\n\n- 重载方法异常处理\n\npublic class Main {\n    double method(int i) throws Exception{\n        return i/0;\n    }\n    boolean method(boolean b) {\n        return !b;\n    }\n    static double method(int x, double y) throws Exception  {\n        return x + y ;\n    }\n    static double method(double x, double y) {\n        return x + y - 3;\n    }   \n    public static void main(String[] args) {\n        Main mn = new Main();\n        try{\n            System.out.println(method(10, 20.0));\n            System.out.println(method(10.0, 20));\n            System.out.println(method(10.0, 20.0));\n            System.out.println(mn.method(10));\n        }\n        catch (Exception ex){\n            System.out.println("exception occoure: "+ ex);\n        }\n    }\n}\n\n\npackage com.example.springbootdemo.utils;\n\npublic class RRException extends RuntimeException {\n    private static final long serialVersionUID = 1L;\n\n    private String msg;\n    private int code = -1;\n\n    public RRException(String msg) {\n        super(msg);\n        this.msg = msg;\n    }\n\n    public RRException(String msg, Throwable e) {\n        super(msg, e);\n        this.msg = msg;\n    }\n\n    public RRException(String msg, int code) {\n        super(msg);\n        this.msg = msg;\n        this.code = code;\n    }\n\n    public RRException(String msg, int code, Throwable e) {\n        super(msg, e);\n        this.msg = msg;\n        this.code = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public void setCode(int code) {\n        this.code = code;\n    }\n}\n\n\n\npublic class ExceptionDemo2 {\n   public static void main(String[] argv) {\n      new ExceptionDemo2().doTheWork();\n   }\n   public void doTheWork() {\n      Object o = null;\n      for (int i=0; i<5; i++) {\n         try {\n            o = makeObj(i);\n         }\n         catch (IllegalArgumentException e) {\n            System.err.println\n            ("Error: ("+ e.getMessage()+").");\n            return;   \n         }\n         finally {\n            System.err.println("都已执行完毕");\n            if (o==null)\n            System.exit(0);\n        }\n        System.out.println(o); \n      }\n   }\n   public Object makeObj(int type) \n   throws IllegalArgumentException {\n      if (type == 1)  \n      throw new IllegalArgumentException\n      ("不是指定的类型： " + type);\n      return new Object();\n   }\n}\n\n- 自定义异常\n\nclass WrongInputException extends Exception {  // 自定义的类\n    WrongInputException(String s) {\n        super(s);\n    }\n}\nclass Input {\n    void method() throws WrongInputException {\n        throw new WrongInputException("Wrong input"); // 抛出自定义的类\n    }\n}\nclass TestInput {\n    public static void main(String[] args){\n        try {\n            new Input().method();\n        }\n        catch(WrongInputException wie) {\n            System.out.println(wie.getMessage());\n        }\n    } \n}\n\n- 栈的实现\n\npublic class MyStack {\n   private int maxSize;\n   private long[] stackArray;\n   private int top;\n   public MyStack(int s) {\n      maxSize = s;\n      stackArray = new long[maxSize];\n      top = -1;\n   }\n   public void push(long j) {\n      stackArray[++top] = j;\n   }\n   public long pop() {\n      return stackArray[top--];\n   }\n   public long peek() {\n      return stackArray[top];\n   }\n   public boolean isEmpty() {\n      return (top == -1);\n   }\n   public boolean isFull() {\n      return (top == maxSize - 1);\n   }\n   public static void main(String[] args) {\n      MyStack theStack = new MyStack(10); \n      theStack.push(10);\n      theStack.push(20);\n      theStack.push(30);\n      theStack.push(40);\n      theStack.push(50);\n      while (!theStack.isEmpty()) {\n         long value = theStack.pop();\n         System.out.print(value);\n         System.out.print(" ");\n      }\n      System.out.println("");\n   }\n}\n\n- 死锁及解决方法\n\nimport java.util.Date;\n \npublic class LockTest {\n   public static String obj1 = "obj1";\n   public static String obj2 = "obj2";\n   public static void main(String[] args) {\n      LockA la = new LockA();\n      new Thread(la).start();\n      LockB lb = new LockB();\n      new Thread(lb).start();\n   }\n}\nclass LockA implements Runnable{\n   public void run() {\n      try {\n         System.out.println(new Date().toString() + " LockA 开始执行");\n         while(true){\n            synchronized (LockTest.obj1) {\n               System.out.println(new Date().toString() + " LockA 锁住 obj1");\n               Thread.sleep(3000); // 此处等待是给B能锁住机会\n               synchronized (LockTest.obj2) {\n                  System.out.println(new Date().toString() + " LockA 锁住 obj2");\n                  Thread.sleep(60 * 1000); // 为测试，占用了就不放\n               }\n            }\n         }\n      } catch (Exception e) {\n         e.printStackTrace();\n      }\n   }\n}\nclass LockB implements Runnable{\n   public void run() {\n      try {\n         System.out.println(new Date().toString() + " LockB 开始执行");\n         while(true){\n            synchronized (LockTest.obj2) {\n               System.out.println(new Date().toString() + " LockB 锁住 obj2");\n               Thread.sleep(3000); // 此处等待是给A能锁住机会\n               synchronized (LockTest.obj1) {\n                  System.out.println(new Date().toString() + " LockB 锁住 obj1");\n                  Thread.sleep(60 * 1000); // 为测试，占用了就不放\n               }\n            }\n         }\n      } catch (Exception e) {\n         e.printStackTrace();\n      }\n   }\n}\n\n\n- 比较\n\npublic class StringCompareEmp{\n   public static void main(String args[]){\n      String str = "Hello World";\n      String anotherString = "hello world";\n      Object objStr = str;\n \n      System.out.println( str.compareTo(anotherString) );\n      System.out.println( str.compareToIgnoreCase(anotherString) );  //忽略大小写\n      System.out.println( str.compareTo(objStr.toString()));\n   }\n}\n\n- 查找字符串最后一次出现的位置\n\npublic class SearchlastString {\n   public static void main(String[] args) {\n      String strOrig = "Hello world ,Hello Runoob";\n      int lastIndex = strOrig.lastIndexOf("Runoob");\n      if(lastIndex == - 1){\n         System.out.println("没有找到字符串 Runoob");\n      }else{\n         System.out.println("Runoob 字符串最后出现的位置： "+ lastIndex);\n      }\n   }\n}\n\n- 删除字符串中的一个字符\n\npublic class Main {\n   public static void main(String args[]) {\n      String str = "this is Java";\n      System.out.println(removeCharAt(str, 3));\n   }\n   public static String removeCharAt(String s, int pos) {\n      return s.substring(0, pos) + s.substring(pos + 1);\n   }\n}\n\n- 字符串替换\n\npublic class StringReplaceEmp{\n   public static void main(String args[]){\n      String str="Hello World";\n      System.out.println( str.replace( \'H\',\'W\' ) );\n      System.out.println( str.replaceFirst("He", "Wa") );\n      System.out.println( str.replaceAll("He", "Ha") );\n   }\n}\n\n- 字符串反转\n\npublic class StringReverseExample{\n   public static void main(String[] args){\n      String string="runoob";\n      String reverse = new StringBuffer(string).reverse().toString();\n      System.out.println("字符串反转前:"+string);\n      System.out.println("字符串反转后:"+reverse);\n   }\n}\n\n- 字符串搜索\n\npublic class SearchStringEmp {\n   public static void main(String[] args) {\n      String strOrig = "Google Runoob Taobao";\n      int intIndex = strOrig.indexOf("Runoob");\n      if(intIndex == - 1){\n         System.out.println("没有找到字符串 Runoob");\n      }else{\n         System.out.println("Runoob 字符串位置 " + intIndex);\n      }\n   }\n}\n\n- 字符串分割\n\npublic class JavaStringSplitEmp {\n   public static void main(String args[]){\n      \n      String str = "www-runoob-com";\n      String[] temp;\n      String delimeter = "-";  // 指定分割字符\n      temp = str.split(delimeter); // 分割字符串\n      // 普通 for 循环\n      for(int i =0; i < temp.length ; i++){\n         System.out.println(temp[i]);\n         System.out.println("");\n      }\n \n      System.out.println("------java for each循环输出的方法-----");\n      String str1 = "www.runoob.com";\n      String[] temp1;\n      String delimeter1 = "\\\\.";  // 指定分割字符， . 号需要转义\n      temp1 = str1.split(delimeter1); // 分割字符串\n      for(String x :  temp1){\n         System.out.println(x);\n         System.out.println("");\n      }\n   }\n}\n\n- 字符串分隔(StringTokenizer)\n\nimport java.util.StringTokenizer;\n \npublic class Main {\n    public static void main(String[] args) {\n \n        String str = "This is String , split by StringTokenizer, created by runoob";\n        StringTokenizer st = new StringTokenizer(str);\n \n        System.out.println("----- 通过空格分隔 ------");\n        while (st.hasMoreElements()) {\n            System.out.println(st.nextElement());\n        }\n \n        System.out.println("----- 通过逗号分隔 ------");\n        StringTokenizer st2 = new StringTokenizer(str, ",");\n \n        while (st2.hasMoreElements()) {\n            System.out.println(st2.nextElement());\n        }\n    }\n}\n\n - 字符串小写转大写\n\n public class StringToUpperCaseEmp {\n    public static void main(String[] args) {\n        String str = "string runoob";\n        String strUpper = str.toUpperCase();\n        System.out.println("原始字符串: " + str);\n        System.out.println("转换为大写: " + strUpper);\n    }\n}\n\n- 测试两个字符串区域是否相等\n\npublic class StringRegionMatch{\n   public static void main(String[] args){\n      String first_str = "Welcome to Microsoft";\n      String second_str = "I work with microsoft";\n      boolean match1 = first_str.\n      regionMatches(11, second_str, 12, 9);\n      boolean match2 = first_str.\n      regionMatches(true, 11, second_str, 12, 9); //第一个参数 true 表示忽略大小写区别\n      System.out.println("区分大小写返回值：" + match1);\n      System.out.println("不区分大小写返回值：" + match2);\n   }\n}\n\n- 字符串性能比较测试\n\npublic class StringComparePerformance{\n   public static void main(String[] args){      \n      long startTime = System.currentTimeMillis();\n      for(int i=0;i<50000;i++){\n         String s1 = "hello";\n         String s2 = "hello"; \n      }\n      long endTime = System.currentTimeMillis();\n      System.out.println("通过 String 关键词创建字符串" \n      + " : "+ (endTime - startTime) \n      + " 毫秒" );       \n      long startTime1 = System.currentTimeMillis();\n      for(int i=0;i<50000;i++){\n         String s3 = new String("hello");\n         String s4 = new String("hello");\n      }\n      long endTime1 = System.currentTimeMillis();\n      System.out.println("通过 String 对象创建字符串" \n      + " : " + (endTime1 - startTime1)\n      + " 毫秒");\n   }\n}\n\n- 字符串优化\n\npublic class StringOptimization {\n    public static void main(String[] args){\n        String variables[] = new String[50000];      \n        for( int i=0;i <50000;i++){\n            variables[i] = "s"+i;\n        }\n        long startTime0 = System.currentTimeMillis();\n        for(int i=0;i<50000;i++){\n            variables[i] = "hello";\n        }\n        long endTime0 = System.currentTimeMillis();\n        System.out.println("直接使用字符串： "+ (endTime0 - startTime0)  + " ms" );\n        long startTime1 = System.currentTimeMillis();\n            for(int i=0;i<50000;i++){\n            variables[i] = new String("hello");\n        }\n        long endTime1 = System.currentTimeMillis();\n        System.out.println("使用 new 关键字：" + (endTime1 - startTime1) + " ms");\n        long startTime2 = System.currentTimeMillis();\n        for(int i=0;i<50000;i++){\n            variables[i] = new String("hello");\n            variables[i] = variables[i].intern();          \n        }\n        long endTime2 = System.currentTimeMillis();\n        System.out.println("使用字符串对象的 intern() 方法: " \n        + (endTime2 - startTime2)\n        + " ms");\n    }\n}\n\n- 字符串格式化\n\nmport java.util.*;\n \npublic class StringFormat {\n    public static void main(String[] args){\n        double e = Math.E;\n        System.out.format("%f%n", e);\n        System.out.format(Locale.CHINA  , "%-10.4f%n%n", e);  //指定本地为中国（CHINA）\n    }\n}\n\n- 连接字符串\n\npublic class StringConcatenate {\n    public static void main(String[] args){\n        long startTime = System.currentTimeMillis();\n        for(int i=0;i<5000;i++){\n            String result = "This is"\n            + "testing the"\n            + "difference"+ "between"\n            + "String"+ "and"+ "StringBuffer";\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.println("字符串连接" \n        + " - 使用 + 操作符 : " \n        + (endTime - startTime)+ " ms");\n        long startTime1 = System.currentTimeMillis();\n        for(int i=0;i<5000;i++){\n            StringBuffer result = new StringBuffer();\n            result.append("This is");\n            result.append("testing the");\n            result.append("difference");\n            result.append("between");\n            result.append("String");\n            result.append("and");\n            result.append("StringBuffer");\n        }\n        long endTime1 = System.currentTimeMillis();\n        System.out.println("字符串连接" \n        + " - 使用 StringBuffer : "\n        + (endTime1 - startTime1)+ " ms");\n    }\n}\n\n\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);