(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{733:function(e,n,r){"use strict";r.r(n);var t=r(6),a=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"mybatis与spring的整合实例详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis与spring的整合实例详解"}},[this._v("#")]),this._v(" MyBatis与Spring的整合实例详解")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('下面通过一个实例实现 MyBatis 与 Spring 的整合，具体实现过程如下：\n1）创建应用并导入相关 JAR 包\n创建一个名为 MyBatis-Spring 的 Web 应用，并将《MyBatis与Spring的整合步骤》教程的 JAR 导入 /WEB-INF/lib 目录下。\n2）创建持久化类\n在 src 目录下创建一个名为 com.po 的包，将《第一个MyBatis程序》教程的持久化类复制到包中。\n3）创建 SQL 映射文件和 MyBatis 核心配置文件\n在 src 目录下创建一个名为 com.mybatis 的包，在该包中创建 MyBatis 核心配置文件 mybatis-config.xml 和 SQL 映射文件 UserMapper.xml。\n\nUserMapper.xml 的代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="com.dao.UserDao">\n    \x3c!--根据uid查询一个用户信息 --\x3e\n    <select id="selectUserById" parameterType="Integer" resultType="com..po.MyUser">\n        select * from user where uid = #{uid}\n    </select>\n    \x3c!-- 查询所有用户信息 --\x3e\n    <select id="selectAllUser" resultType="com.po.MyUser">\n        select * from user\n    </select>\n    \x3c!-- 添加一个用户，#{uname}为 com.mybatis.po.MyUser 的属性值 --\x3e\n    <insert id="addUser" parameterType="com.po.MyUser">\n    insert into user (uname,usex) values(#{uname},#{usex})\n    </insert>\n    \x3c!--修改一个用户 --\x3e\n    <update id="updateUser" parameterType="com..po.MyUser">\n        update user set uname = #{uname},usex = #{usex} where uid = #{uid}\n    </update>\n    \x3c!-- 删除一个用户 --\x3e\n    <delete id="deleteUser" parameterType="Integer">\n        delete from user where uid = #{uid}\n    </delete>\n</mapper>\nmybatis-config.xml 的代码如下：\n<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    \x3c!-- 告诉MyBatis到哪里去找映射文件 --\x3e\n    <mappers>\n        <mapper resource="com/mybatis/UserMapper.xml" />\n    </mappers>\n</configuration>\n4）创建数据访问接口\n在 src 目录下创建一个名为 com.dao 的包，在该包中创建 UserDao 接口，并将接口使用 @Mapper 注解为 Mapper，接口中的方法与 SQL 映射文件一致。\n\nUserDao 接口的代码如下：\npackage com.dao;\nimport java.util.List;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\nimport com.po.MyUser;\n@Repository("userDao")\n@Mapper\n/*\n* 使用Spring自动扫描MyBatis的接口并装配 （Spring将指定包中所有被@Mapper注解标注的接口自动装配为MyBatis的映射接口\n*/\npublic interface UserDao {\n    /**\n     * 接口方法对应的SQL映射文件UserMapper.xml中的id\n     */\n    public MyUser selectUserById(Integer uid);\n    public List<MyUser> selectAllUser();\n    public int addUser(MyUser user);\n    public int updateUser(MyUser user);\n    public int deleteUser(Integer uid);\n}\n5）创建日志文件\n在 src 目录下创建日志文件 log4j.properties，文件内容如下：\n# Global logging configuration\nlog4j.rootLogger=ERROR,stdout\n# MyBatis logging configuration...\nlog4j.logger.com.mybatis=DEBUG\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n\n6）创建控制层\n在 src 目录下创建一个名为 com.controller 的包，在包中创建 UserController 类，在该类中调用数据访问接口中的方法。\n\nUserController 类的代码如下：\npackage com.controller;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport com.dao.UserDao;\nimport com.po.MyUser;\n@Controller("userController")\npublic class UserController {\n    @Autowired\n    private UserDao userDao;\n    public void test() {\n        // 查询一个用户\n        MyUser auser = userDao.selectUserById(1);\n        System.out.println(auser);\n        System.out.println("============================");\n        // 添加一个用户\n        MyUser addmu = new MyUser();\n        addmu.setUname("陈恒");\n        addmu.setUsex("男");\n        int add = userDao.addUser(addmu);\n        System.out.println("添加了" + add + "条记录");\n        System.out.println("============================");\n        // 修改一个用户\n        MyUser updatemu = new MyUser();\n        updatemu.setUid(1);\n        updatemu.setUname("张三");\n        updatemu.setUsex("女");\n        int up = userDao.updateUser(updatemu);\n        System.out.println("修改了" + up + "条记录");\n        System.out.println("============================");\n        // 删除一个用户\n        int dl = userDao.deleteUser(9);\n        System.out.println("删除了" + dl + "条记录");\n        System.out.println("============================");\n        // 查询所有用户\n        List<MyUser> list = userDao.selectAllUser();\n        for (MyUser myUser : list) {\n            System.out.println(myUser);\n        }\n    }\n}\n7）创建 Spring 的配置文件\n在 src 目录下创建配置文件 applicationContext.xml，在配置文件中配置数据源、MyBatis 工厂以及 Mapper 代理开发等信息。\n\napplicationContext.xml 的代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xmlns:tx="http://www.springframework.org/schema/tx"\n    xmlns:aop="http://www.springframework.org/schema/aop"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/tx\n            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n            http://www.springframework.org/schema/aop\n            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">\n    \x3c!-- 指定需要扫描的包（包括子包），使注解生效 --\x3e\n    <context:component-scan base-package="com.dao" />\n    <context:component-scan base-package="com.controller" />\n    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">\n        <property name="driverClassName" value="com.mysql.jdbc.Driver" />\n        <property name="url"\n            value="jdbc:mysql://127.0.0.1:3306/smbms?\n                        useUnicode=true&amp;characterEncoding=utf-8" />\n        <property name="username" value="root" />\n        <property name="password" value="1128" />\n        \x3c!-- 最大连接数 --\x3e\n        <property name="maxTotal" value="30" />\n        \x3c!-- 最大空闲连接数 --\x3e\n        <property name="maxIdle" value="10" />\n        \x3c!-- 初始化连接数 --\x3e\n        <property name="initialSize" value="5" />\n    </bean>\n    \x3c!-- 添加事务支持 --\x3e\n    <bean id="txManager"\n        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\n        <property name="dataSource" ref="dataSource" />\n    </bean>\n    \x3c!-- 注册事务管理驱动 --\x3e\n    <tx:annotation-driven transaction-manager="txManager" />\n    \x3c!-- 配置SqlSessionFactoryBean --\x3e\n    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\n        \x3c!-- 引用数据源组件 --\x3e\n        <property name="dataSource" ref="dataSource" />\n        \x3c!-- 引用MyBatis配置文件中的配置 --\x3e\n        <property name="configLocation" value="classpath:com/mybatis/mybatis-config.xml" />\n    </bean>\n    \x3c!-- Mapper代理开发，使用Spring自动扫描MyBatis的接口并装配 （Sprinh将指定包中的所有被@Mapper注解标注的接口自动装配为MyBatis的映射接口） --\x3e\n    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">\n        \x3c!-- mybatis-spring组件的扫描器，com.dao只需要接口（接口方法与SQL映射文件中的相同） --\x3e\n        <property name="basePackage" value="com.dao" />\n        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />\n    </bean>\n</beans>\n8）创建测试类\n在 com.controller 包中创建测试类 TestController，代码如下：\n纯文本复制\npackage com.controller;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class TestController {\n    public static void main(String[] args) {\n        String xmlPath = "applicationContext.xml";\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n                xmlPath);\n        UserController uc = (UserController) applicationContext\n                .getBean("userController");\n        uc.test();\n    }\n}\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);