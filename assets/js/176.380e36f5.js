(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{664:function(n,t,r){"use strict";r.r(t);var i=r(6),a=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"java-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-数组"}},[this._v("#")]),this._v(" Java 数组")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\n- 队列（Queue）用法\n\npublic class Main {\n    public static void main(String[] args) {\n        //add()和remove()方法在失败的时候会抛出异常(不推荐)\n        Queue<String> queue = new LinkedList<String>();\n        //添加元素\n        queue.offer("a");\n        queue.offer("b");\n        queue.offer("c");\n        queue.offer("d");\n        queue.offer("e");\n        for(String q : queue){\n            System.out.println(q);\n        }\n        System.out.println("===");\n        System.out.println("poll="+queue.poll()); //返回第一个元素，并在队列中删除\n        for(String q : queue){\n            System.out.println(q);\n        }\n        System.out.println("===");\n        System.out.println("element="+queue.element()); //返回第一个元素 \n        for(String q : queue){\n            System.out.println(q);\n        }\n        System.out.println("===");\n        System.out.println("peek="+queue.peek()); //返回第一个元素 \n        for(String q : queue){\n            System.out.println(q);\n        }\n    }\n}\n\n- 获取向量的最大元素\nJava 实例 Java 实例\n\n以下实例演示了使用 Vector 类的 v.add() 方法及 Collection 类的 Collections.max() 来获取向量的最大元素：\n\nMain.java 文件\nimport java.util.Collections;\nimport java.util.Vector;\n \npublic class Main {\n   public static void main(String[] args) {\n      Vector v = new Vector();\n      v.add(new Double("3.4324"));\n      v.add(new Double("3.3532"));\n      v.add(new Double("3.342"));\n      v.add(new Double("3.349"));\n      v.add(new Double("2.3"));\n      Object obj = Collections.max(v);\n      System.out.println("最大元素是："+obj);\n   }\n}\n\n- 获取链表的元素\nJava 实例 Java 实例\n\n以下实例演示了使用 top() 和 pop() 方法来获取链表的元素：\n\nMain.java 文件\nimport java.util.*;\n \npublic class Main {\n   private LinkedList list = new LinkedList();\n   public void push(Object v) {\n      list.addFirst(v);\n   }\n   public Object top() {\n      return list.getFirst();\n   }\n   public Object pop() {\n      return list.removeFirst();\n   }\n   public static void main(String[] args) {\n      Main stack = new Main();\n      for (int i = 30; i < 40; i++)\n         stack.push(new Integer(i));\n      System.out.println(stack.top());\n      System.out.println(stack.pop());\n      System.out.println(stack.pop());\n      System.out.println(stack.pop());\n   }\n}\n\n- 数组排序及元素查找\n\npublic class MainClass {\n    public static void main(String args[]) throws Exception {\n        int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };\n        Arrays.sort(array);\n        printArray("数组排序结果为", array);\n        int index = Arrays.binarySearch(array, 2);\n        System.out.println("元素 2  在第 " + index + " 个位置");\n    }\n    private static void printArray(String message, int array[]) {\n        System.out.println(message\n        + ": [length: " + array.length + "]");\n        for (int i = 0; i < array.length; i++) {\n            if(i != 0){\n                System.out.print(", ");\n            }\n            System.out.print(array[i]);\n        }\n        System.out.println();\n    }\n}\n\n- 数组添加元素\n\npublic class MainClass {\n   public static void main(String args[]) throws Exception {\n      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };\n      Arrays.sort(array);\n      printArray("数组排序", array);\n      int index = Arrays.binarySearch(array, 1);\n      System.out.println("元素 1 所在位置（负数为不存在）："\n      + index);  \n      int newIndex = -index - 1;\n      array = insertElement(array, 1, newIndex);\n      printArray("数组添加元素 1", array);\n   }\n   private static void printArray(String message, int array[]) {\n      System.out.println(message\n      + ": [length: " + array.length + "]");\n      for (int i = 0; i < array.length; i++) {\n         if (i != 0){\n            System.out.print(", ");\n         }\n         System.out.print(array[i]);         \n      }\n      System.out.println();\n   }\n   private static int[] insertElement(int original[],\n   int element, int index) {\n      int length = original.length;\n      int destination[] = new int[length + 1];\n      System.arraycopy(original, 0, destination, 0, index);\n      destination[index] = element;\n      System.arraycopy(original, index, destination, index\n      + 1, length - index);\n      return destination;\n   }\n}\n\n- 获取数组长度\n\npublic class Main {\n   public static void main(String args[]) {\n      String[][] data = new String[2][5];\n      System.out.println("第一维数组长度: " + data.length);\n      System.out.println("第二维数组长度: " + data[0].length);\n   }\n}\n\n- 数组反转\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n \npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<String> arrayList = new ArrayList<String>();\n        arrayList.add("A");\n        arrayList.add("B");\n        arrayList.add("C");\n        arrayList.add("D");\n        arrayList.add("E");\n        System.out.println("反转前排序: " + arrayList);\n        Collections.reverse(arrayList);\n        System.out.println("反转后排序: " + arrayList);\n    }\n}\n\n- 数组输出\n\npublic class Welcome {\n    public static void main(String[] args){\n        String[] runoobs = new String[3];\n        runoobs[0] = "菜鸟教程";\n        runoobs[1] = "菜鸟工具";\n        runoobs[2] = "菜鸟笔记";\n        for (int i = 0; i < runoobs.length; i++){\n            System.out.println(runoobs[i]);\n        }\n    }\n}\n\n- 数组获取最大和最小值\n\nimport java.util.Arrays;\nimport java.util.Collections;\n \npublic class Main {\n    public static void main(String[] args) {\n        Integer[] numbers = { 8, 2, 7, 1, 4, 9, 5};\n        int min = (int) Collections.min(Arrays.asList(numbers));\n        int max = (int) Collections.max(Arrays.asList(numbers));\n        System.out.println("最小值: " + min);\n        System.out.println("最大值: " + max);\n    }\n}\n\n- 查找数组中的重复元素\n\npublic class MainClass {\n    public static void main(String[] args) \n    {\n        int[] my_array = {1, 2, 5, 5, 6, 6, 7, 2, 9, 2};\n        findDupicateInArray(my_array);\n \n    }\n \n    public static void findDupicateInArray(int[] a) {\n        int count=0;\n        for(int j=0;j<a.length;j++) {\n            for(int k =j+1;k<a.length;k++) {\n                if(a[j]==a[k]) {\n                    count++;\n                }\n            }\n            if(count==1)\n               System.out.println( "重复元素 : " +  a[j] );\n            count = 0;\n        }\n    }\n}\n\n- 删除数组元素\n\npublic class RunoobTest {\n \n    public static void main(String[] args) {\n        int[] oldarray = new int[] {3, 4, 5, 6, 7};// 原始数组\n        int num = 2;   // 删除索引为 2 的元素，即删除第三个元素 5\n        int[] newArray = new int[oldarray.length-1];// 新数组，长度为原始数组减去 1\n        \n        for(int i=0;i<newArray.length; i++) {\n            // 判断元素是否越界\n            if (num < 0 || num >= oldarray.length) {\n                throw new RuntimeException("元素越界... "); \n            } \n            // \n            if(i<num) {\n                newArray[i] = oldarray[i];\n            }\n            else {\n                newArray[i] = oldarray[i+1];\n            }\n        }\n        // 打印输出数组内容\n        System.out.println(Arrays.toString(oldarray));\n        oldarray = newArray;\n        System.out.println(Arrays.toString(oldarray));\n    }\n}\n\n- 数组差集\n\npublic class Main {\n    public static void main(String[] args)  {\n        ArrayList objArray = new ArrayList();\n        ArrayList objArray2 = new ArrayList();\n        objArray2.add(0,"common1");\n        objArray2.add(1,"common2");\n        objArray2.add(2,"notcommon");\n        objArray2.add(3,"notcommon1");\n        objArray.add(0,"common1");\n        objArray.add(1,"common2");\n        objArray.add(2,"notcommon2");\n        System.out.println("array1 的元素" +objArray);\n        System.out.println("array2 的元素" +objArray2);\n        objArray.removeAll(objArray2);\n        System.out.println("array1 与 array2 数组差集为："+objArray);\n    }\n}\n\n - 数组交集\n\n public class Main {\n    public static void main(String[] args)  {\n        ArrayList objArray = new ArrayList();\n        ArrayList objArray2 = new ArrayList();\n        objArray2.add(0,"common1");\n        objArray2.add(1,"common2");\n        objArray2.add(2,"notcommon");\n        objArray2.add(3,"notcommon1");\n        objArray.add(0,"common1");\n        objArray.add(1,"common2");\n        objArray.add(2,"notcommon2");\n        System.out.println("array1 数组元素："+objArray);\n        System.out.println("array2 数组元素："+objArray2);\n        objArray.retainAll(objArray2);\n        System.out.println("array2 & array1 数组交集为："+objArray);\n    }\n}\n\n- 在数组中查找指定元素\n\npublic class Main {\n    public static void main(String[] args)  {\n        ArrayList<String> objArray = new ArrayList<String>();\n        ArrayList<String> objArray2 = new ArrayList<String>();\n        objArray2.add(0,"common1");\n        objArray2.add(1,"common2");\n        objArray2.add(2,"notcommon");\n        objArray2.add(3,"notcommon1");\n        objArray.add(0,"common1");\n        objArray.add(1,"common2");\n        System.out.println("objArray 的数组元素："+objArray);\n        System.out.println("objArray2 的数组元素："+objArray2);\n        System.out.println("objArray 是否包含字符串common2? ： "\n        +objArray.contains("common2"));\n        System.out.println("objArray2 是否包含数组 objArray? ："\n        +objArray2.contains(objArray) );\n    }\n}\n\n- 判断数组是否相等\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        int[] ary = {1,2,3,4,5,6};\n        int[] ary1 = {1,2,3,4,5,6};\n        int[] ary2 = {1,2,3,4};\n        System.out.println("数组 ary 是否与数组 ary1相等? ："\n        +Arrays.equals(ary, ary1));\n        System.out.println("数组 ary 是否与数组 ary2相等? ："\n        +Arrays.equals(ary, ary2));\n    }\n}\n\n- 数组并集\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        String[] arr1 = { "1", "2", "3" };\n        String[] arr2 = { "4", "5", "6" };\n        String[] result_union = union(arr1, arr2);\n        System.out.println("并集的结果如下：");\n \n        for (String str : result_union) {\n            System.out.println(str);\n        }\n    }\n \n    // 求两个字符串数组的并集，利用set的元素唯一性\n    public static String[] union(String[] arr1, String[] arr2) {\n        Set<String> set = new HashSet<String>();\n \n        for (String str : arr1) {\n            set.add(str);\n        }\n \n        for (String str : arr2) {\n            set.add(str);\n        }\n \n        String[] result = {  };\n \n        return set.toArray(result);\n    }\n}\n\n\n- 方法重载\n\n方法名相同\n方法的参数类型，参数个不一样\n方法的返回类型可以不相同\n方法的修饰符可以不相同\nmain 方法也可以被重载\n以下实例演示了如何重载 MyClass 类的 info 方法：\n\nMainClass.java 文件\nclass MyClass {\n    int height;\n    MyClass() {\n        System.out.println("无参数构造函数");\n        height = 4;\n    }\n    MyClass(int i) {\n        System.out.println("房子高度为 " + i + " 米");\n        height = i;\n    }\n    void info() {\n        System.out.println("房子高度为 " + height + " 米");\n    }\n    void info(String s) {\n        System.out.println(s + ": 房子高度为 " + height + " 米");\n    }\n}\npublic class MainClass {\n    public static void main(String[] args) {\n        MyClass t = new MyClass(3);\n        t.info();\n        t.info("重载方法");\n        //重载构造函数\n        new MyClass();\n    }\n}\n\n\n- 输出数组元素\n\npublic class MainClass {\n    public static void printArray(Integer[] inputArray) {\n        for (Integer element : inputArray){\n            System.out.printf("%s ", element);\n            System.out.println();\n        }\n    }\n    public static void printArray(Double[] inputArray) {\n        for (Double element : inputArray){\n            System.out.printf("%s ", element);\n            System.out.println();\n        }\n    }\n    public static void printArray(Character[] inputArray) {\n        for (Character element : inputArray){\n            System.out.printf("%s ", element);\n            System.out.println();\n        }\n    }\n    public static void main(String args[]) {\n        Integer[] integerArray = { 1, 2, 3, 4, 5, 6 };\n        Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7 };\n        Character[] characterArray = { \'H\', \'E\', \'L\', \'L\', \'O\' };\n        System.out.println("输出整型数组:");\n        printArray(integerArray);\n        System.out.println("\\n输出双精度型数组:");\n        printArray(doubleArray);\n        System.out.println("\\n输出字符型数组:");\n        printArray(characterArray);\n    }\n}\n\n\n - 标签(Label)\n\n public class Main {\n    public static void main(String[] args) {\n        String strSearch = "This is the string in which you have to search for a substring.";\n        String substring = "substring";\n        boolean found = false;\n        int max = strSearch.length() - substring.length();\n        testlbl:\n        for (int i = 0; i <= max; i++) {\n            int length = substring.length();\n            int j = i;\n            int k = 0;\n            while (length-- != 0) {\n                if(strSearch.charAt(j++) != substring.charAt(k++)){\n                    continue testlbl;\n                }\n            }\n            found = true;\n            break testlbl;\n        }\n        if (found) {\n            System.out.println("发现子字符串。");\n        }\n        else {\n            System.out.println("字符串中没有发现子字符串。");\n        }\n    }\n}\n\n- Varargs 可变参数使用\n\npublic class Main {\n    static int  sumvarargs(int... intArrays){\n        int sum, i;\n        sum=0;\n        for(i=0; i< intArrays.length; i++) {\n            sum += intArrays[i];\n        }\n        return(sum);\n    }\n    public static void main(String args[]){\n        int sum=0;\n        sum = sumvarargs(new int[]{10,12,33});\n        System.out.println("数字相加之和为: " + sum);\n    }\n}\n\n- 重载(overloading)方法中使用 Varargs\n\npublic class Main {\n    static void vaTest(int ... no) {\n        System.out.print("vaTest(int ...): " \n        + "参数个数: " + no.length +" 内容: ");\n        for(int n : no)\n        System.out.print(n + " ");\n        System.out.println();\n    }\n    static void vaTest(boolean ... bl) {\n        System.out.print("vaTest(boolean ...) " +\n        "参数个数: " + bl.length + " 内容: ");\n        for(boolean b : bl)\n        System.out.print(b + " ");\n        System.out.println();\n    }\n    static void vaTest(String msg, int ... no) {\n        System.out.print("vaTest(String, int ...): " +\n        msg +"参数个数: "+ no.length +" 内容: ");\n        for(int  n : no)\n        System.out.print(n + " ");\n        System.out.println();\n    }\n    public static void main(String args[]){\n        vaTest(1, 2, 3);\n        vaTest("测试: ", 10, 20);\n        vaTest(true, false, false);\n    }\n}\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);