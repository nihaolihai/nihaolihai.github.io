(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{608:function(n,a,e){"use strict";e.r(a);var t=e(6),v=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"java-循环结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-循环结构"}},[n._v("#")]),n._v(" Java 循环结构")]),n._v(" "),e("p",[n._v("顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次,，就需要使用循环结构。")]),n._v(" "),e("p",[n._v("Java中有三种主要的循环结构：")]),n._v(" "),e("p",[n._v("while 循环\ndo…while 循环\nfor 循环\n在Java5中引入了一种主要用于数组的增强型for循环。")]),n._v(" "),e("p",[n._v("while 循环\nwhile是最基本的循环，它的结构为：")]),n._v(" "),e("p",[n._v("while( 布尔表达式 ) {\n//循环内容\n}\n只要布尔表达式为 true，循环就会一直执行下去。")]),n._v(" "),e("p",[n._v('实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String args[]) {\nint x = 10;\nwhile( x < 20 ) {\nSystem.out.print("value of x : " + x );\nx++;\nSystem.out.print("\\n");\n}\n}\n}\n以上实例编译运行结果如下：')]),n._v(" "),e("p",[n._v("value of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\ndo…while 循环\n对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。")]),n._v(" "),e("p",[n._v("do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。")]),n._v(" "),e("p",[n._v("do {\n//代码语句\n}while(布尔表达式);\n注意：布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。")]),n._v(" "),e("p",[n._v("实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String args[]){\nint x = 10;")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('  do{\n     System.out.print("value of x : " + x );\n     x++;\n     System.out.print("\\n");\n  }while( x < 20 );\n')])])]),e("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),e("p",[n._v("value of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\nfor循环\n虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。")]),n._v(" "),e("p",[n._v("for循环执行的次数是在执行前就确定的。语法格式如下：")]),n._v(" "),e("p",[n._v("for(初始化; 布尔表达式; 更新) {\n//代码语句\n}\n关于 for 循环有以下几点说明：")]),n._v(" "),e("p",[n._v("最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。\n然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。\n执行一次循环后，更新循环控制变量。\n再次检测布尔表达式。循环执行上面的过程。\n实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String args[]) {")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('  for(int x = 10; x < 20; x = x+1) {\n     System.out.print("value of x : " + x );\n     System.out.print("\\n");\n  }\n')])])]),e("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),e("p",[n._v("value of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\nJava 增强 for 循环\nJava5 引入了一种主要用于数组的增强型 for 循环。")]),n._v(" "),e("p",[n._v("Java 增强 for 循环语法格式如下:")]),n._v(" "),e("p",[n._v("for(声明语句 : 表达式)\n{\n//代码句子\n}\n声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。")]),n._v(" "),e("p",[n._v("表达式：表达式是要访问的数组名，或者是返回值为数组的方法。")]),n._v(" "),e("p",[n._v("实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String args[]){\nint [] numbers = {10, 20, 30, 40, 50};")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('  for(int x : numbers ){\n     System.out.print( x );\n     System.out.print(",");\n  }\n  System.out.print("\\n");\n  String [] names ={"James", "Larry", "Tom", "Lacy"};\n  for( String name : names ) {\n     System.out.print( name );\n     System.out.print(",");\n  }\n')])])]),e("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),e("p",[n._v("10,20,30,40,50,\nJames,Larry,Tom,Lacy,\nbreak 关键字\nbreak 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。")]),n._v(" "),e("p",[n._v("break 跳出最里层的循环，并且继续执行该循环下面的语句。")]),n._v(" "),e("p",[n._v("语法\nbreak 的用法很简单，就是循环结构中的一条语句：")]),n._v(" "),e("p",[n._v("break;\n实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String args[]) {\nint [] numbers = {10, 20, 30, 40, 50};")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('  for(int x : numbers ) {\n     // x 等于 30 时跳出循环\n     if( x == 30 ) {\n        break;\n     }\n     System.out.print( x );\n     System.out.print("\\n");\n  }\n')])])]),e("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),e("p",[n._v("10\n20\ncontinue 关键字\ncontinue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。")]),n._v(" "),e("p",[n._v("在 for 循环中，continue 语句使程序立即跳转到更新语句。")]),n._v(" "),e("p",[n._v("在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。")]),n._v(" "),e("p",[n._v("语法\ncontinue 就是循环体中一条简单的语句：")]),n._v(" "),e("p",[n._v("continue;\n实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String args[]) {\nint [] numbers = {10, 20, 30, 40, 50};")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('  for(int x : numbers ) {\n     if( x == 30 ) {\n    continue;\n     }\n     System.out.print( x );\n     System.out.print("\\n");\n  }\n')])])]),e("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),e("p",[n._v("10\n20\n40\n50")])])}),[],!1,null,null,null);a.default=v.exports}}]);