(window.webpackJsonp=window.webpackJsonp||[]).push([[426],{914:function(n,e,a){"use strict";a.r(e);var t=a(6),r=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-mvc-jsr-303验证框架之hibernate-validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-jsr-303验证框架之hibernate-validator"}},[this._v("#")]),this._v(" Spring MVC JSR-303验证框架之Hibernate-Validator")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('对于 JSR 303 验证，目前有两个实现，一个是 Hibernate Validator，一个是 Apache BVal。本教程采用的是 Hibernate Validator，注意它和 Hibernate 无关，只是使用它进行数据验证。\n1. 下载与安装 Hibernate Validator\n用户可以通过地址“https://sourceforge.net/projects/hibernate/files/hibernate-validator/”下载 Hibernate Validator，本教程选择的是 hibernate-validator-4.3.2.Final-dist.zip。\n\n首先将下载的压缩包解压，然后将 \\hibernate-validator-4.3.2.Final\\dist 目录下的 hibernate-validator-4.3.2.Final.jar 和 \\hibernate-validator-4.3.2.Final\\dist\\lib\\required 目录下的 jboss-logging-3.1.0.Final.jar、validation-api-1.0.0. GA.jar 复制到应用的 \\WEB-INF\\lib 目录下。\n2. 配置属性文件与验证器\n如果将验证错误消息放在属性文件中，那么需要在配置文件中配置属性文件，并将属性文件与 Hibernate Validator 关联，具体配置代码如下：\n\x3c!-- 配置消息属性文件 --\x3e\n<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">\n    \x3c!-- 资源文件名 --\x3e\n    <property name="basenames">\n        <list>\n            <value>/WEB-INF/resource/errorMessages</value>\n        </list>\n    </property>\n    \x3c!-- 资源文件编码格式 --\x3e\n    <property name="fileEncodings" value="utf-8" />\n    \x3c!-- 对资源文件内容缓存的时间，单位为秒 --\x3e\n    <property name="cacheSeconds" value="120" />\n</bean>\n\x3c!-- 注册校验器 --\x3e\n<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">\n    \x3c!-- hibernate 校验器 --\x3e\n    <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />\n    \x3c!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用 classpath下的 ValidationMessages.properties --\x3e\n    <property name="validationMessageSource" ref="messageSource" />\n</bean>\n\x3c!--开启 Spring的 Valid 功能 --\x3e\n<mvc:annotation-driven conversion-service="conversionService" validator="validator" />\n3.  标注类型\nJSR 303 不需要编写验证器，但需要利用它的标注类型在领域模型的属性上嵌入约束。\n1）空检查\n@Null：验证对象是否为 null。\n@NotNull：验证对象是否不为 null，无法检查长度为 0 的字符串。\n@NotBlank：检查约束字符串是不是 null，以及被 trim 后的长度是否大于 0，只针对字符串，且会去掉前后空格。\n@NotEmpty：检查约束元素是否为 null 或者是 empty。\n\n示例如下：\n@NotBlank(message="{goods.gname.required}") //goods.gname.required为属性文件的错误代码\nprivate String gname;\n\n2）boolean 检查\n@AssertTrue：验证 boolean 属性是否为 true。\n@AssertFalse：验证 boolean 属性是否为 false。\n\n示例如下：\n@AssertTrue\nprivate boolean isLogin;\n\n3）长度检查\n@Size（min=，max=）：验证对象（Array、Collection、Map、String）长度是否在给定的范围之内。\n@Length（min=，max=）：验证字符串长度是否在给定的范围之内。\n\n示例如下：\n@Length(min=1,max=100)\nprivate String gdescription;\n\n4）日期检查\n@Past：验证 Date 和 Callendar 对象是否在当前时间之前。\n@Future：验证 Date 和 Calendar 对象是否在当前时间之后。\n@Pattern：验证 String 对象是否符合正则表达式的规则。\n\n示例如下：\n@Past(message="{gdate.invalid}")\nprivate Date gdate;\n\n5）数值检查\n名称\t说明\n@Min\t验证 Number 和 String 对象是否大于指定的值\n@Max\t验证 Number 和 String 对象是否小于指定的值\n@DecimalMax\t被标注的值必须不大于约束中指定的最大值，这个约束的参数是一个通过 BigDecimal 定义的最大值的字符串表示，小数存在精度\n@DecimalMin\t被标注的值必须不小于约束中指定的最小值，这个约束的参数是一个通过 BigDecimal 定义的最小值的字符串表示，小数存在精度\n@Digits\t验证 Number 和 String 的构成是否合法\n@Digits（integer=，fraction=）\t验证字符串是否符合指定格式的数字，integer 指定整数精度，fraction 指定小数精度\n@Range（min=，max=）\t检查数字是否介于 min 和 max 之间\n@Valid\t对关联对象进行校验，如果关联对象是个集合或者数组，那么对其中的元素进行校验，如果是一个 map，则对其中的值部分进行校验\n@CreditCardNumber\t信用卡验证\n@Email\t验证是否为邮件地址，如果为 null，不进行验证，通过验证示例如下：\n@Range(min=10,max=100,message="{gprice.invalid}")\nprivate double gprice;\n\n由于篇幅有限，大家可结合《Spring MVC Hibernate-Validator数据验证实例》教程学习。\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);