(window.webpackJsonp=window.webpackJsonp||[]).push([[435],{923:function(e,n,t){"use strict";t.r(n);var r=t(6),s=Object(r.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-mvc使用-exceptionhandler注解异常处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc使用-exceptionhandler注解异常处理"}},[this._v("#")]),this._v(" Spring MVC使用@ExceptionHandler注解异常处理")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('创建 BaseController 类，并在该类中使用 @ExceptionHandler 注解声明异常处理方法，具体代码如下：\npackage controller;\nimport java.sql.SQLException;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport exception.MyException;\npublic class BaseController {\n    /** 基于@ExceptionHandler异常处理 */\n    @ExceptionHandler\n    public String exception(HttpServletRequest request, Exception ex) {\n        request.setAttribute("ex", ex);\n        // 根据不同错误转向不同页面，即异常与view的对应关系\n        if (ex instanceof SQLException) {\n            return "sql-error";\n        } else if (ex instanceof MyException) {\n            return "my-error";\n        } else {\n            return "error";\n        }\n    }\n}\n将所有需要异常处理的 Controller 都继承 BaseController 类，示例代码如下：\n@Controller\npublic class TestExceptionController extends BaseController{\n    ...\n}\n在使用 @ExceptionHandler 注解声明统一处理异常时不需要配置任何信息，此时将配置文件的代码修改如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring一beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd">\n    \x3c!-- 使用扫描机制扫描包 --\x3e\n    <context:component-scan base-package="controller" />\n    <context:component-scan base-package="service" />\n    <context:component-scan base-package="dao" />\n    \x3c!-- 配置视图解析器 --\x3e\n    <bean\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver"\n        id="internalResourceViewResolver">\n        \x3c!--前缀 --\x3e\n        <property name="prefix" value="/WEB-INF/jsp/" />\n        \x3c!-- 后缀 --\x3e\n        <property name="suffix" value=".jsp" />\n    </bean>\n</beans>\n发布 springMVCDemo10 应用到 Tomcat 服务器并启动服务器，然后即可通过地址“http://localhost:8080/springMVCDemo10/”测试应用。\n\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);