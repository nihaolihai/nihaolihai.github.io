(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{825:function(t,r,n){"use strict";n.r(r);var s=n(6),a=Object(s.a)({},(function(){var t=this.$createElement,r=this._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[r("h2",{attrs:{id:"spring-cloud-hystrix的实时监控功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-hystrix的实时监控功能"}},[this._v("#")]),this._v(" Spring Cloud Hystrix的实时监控功能")]),this._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("在微服务架构中，Hystrix 除了实现容错外，还提供了实时监控功能。在服务调用时，Hystrix 会实时累积关于 HystrixCommand 的执行信息，比如每秒的请求数、成功数等。\n\n更多的指标信息请查看官方文档：https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring。\n\nHystrix 监控需要两个必备条件：\n\n1）必须有 Actuator 的依赖，代码如下所示。\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n2）必须有 Hystrix 的依赖，Spring Cloud 中必须在启动类中添加 @EnableHystrix 开启 Hystrix，代码如下所示。\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n\n我们改造下 hystrix-feign-demo 这个项目，加入上边两段代码的依赖，将 actuator 中的端点暴露出来，访问端点地址（http://localhost:8086/actuator/hystrix.stream）\n\n调用一下 /callHello 接口 http://localhost:8086/callHello，访问之后就可以看到 http://localhost:8086/actuator/hystrix.stream 这个页面中输出的数据了，\n\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);