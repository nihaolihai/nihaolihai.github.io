(window.webpackJsonp=window.webpackJsonp||[]).push([[554],{1049:function(n,t,e){"use strict";e.r(t);var i=e(6),a=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"初次体验css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初次体验css"}},[this._v("#")]),this._v(" 初次体验CSS")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('使用表格布局\n启动 Dreamweaver 或者文本编辑器（如 Sublime Text、Notepad++、记事本程序等），新建一个 HTML 文档，并保存为 table.html。\n\n输入下面的代码，使用表格来设计网页。\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>表格布局</title>\n</head>\n<body>\n\x3c!-- 表格布局 --\x3e\n<table width="778" height="514" border="0" align="center" cellpadding="0" cellspacing="0">\n    <tr>\n        <td height="74" colspan="3" valign="top" bgcolor="#A94E38"></td>\n    </tr>\n    <tr>\n        <td width="160" height="400" valign="top" bgcolor="#EEEEEE"></td>\n        <td valign="top"></td>\n        <td width="160" valign="top" bgcolor="#EEEEEE"></td>\n    </tr>\n    <tr>\n        <td height="50" colspan="3" valign="top" bgcolor="#7082C2"></td>\n    </tr>\n</table>\n</body>\n</html>\n在浏览器中打开 table.html，就可以看到上图所示的效果。\n使用 DIV+CSS 布局\n再新建一个文档，保存为 css.html。输入下面的代码，使用 <div> 标签来定义 HTML 框架。\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>DIV+CSS布局</title>\n</head>\n<body>\n\x3c!-- 使用 div 标签布局 --\x3e\n<div id="wrap">\n    <div id="header"></div>\n    <div id="main">\n        <div id="bar_l"></div>\n        <div id="content"></div>\n        <div id="bar_r"></div>\n    </div>\n    <div id="footer"></div>\n</div>\n</body>\n</html>\n在标准页面中，应该为结构标签 <div> 定义 id 属性，为页面中不同内容块定义一个名称，以便 CSS 控制。\n在 <head> 标签内部插入一个 <style type="text/css"> 标签，然后在标签内部输入下面的 CSS 代码。\nbody{  /*定义网页窗口属性，清除页边距，定义居中显示*/\n    padding: 0px;\n    margin: 0px auto;\n    text-align: center;\n}\n#wrap{  /*固定宽度，并居中显示*/\n    width: 780px;\n    margin: 0px auto;\n}\n#header{\n    width: 100%;  /*与父元素同宽*/\n    height: 74px;  /*定义固定高度*/\n    background-color: #A94E38;  /*定义背景颜色*/\n    color: #F0DFDB;  /*定义文字颜色*/\n}\n#main{\n    width: 100%;\n    height: 400px;\n}\n#bar_l, #bar_r{  /*定义左右栏样式*/\n    width: 160px;\n    height: 100%;\n    float: left;  /*浮动显示，可以实现并列分布*/\n    background-color: #eee;\n    overflow: hidden;  /*隐藏超出区域的内容*/\n}\n#content{  /*定义中间内容区域的样式*/\n    width: 460px;\n    height: 100%;\n    float: left;\n    overflow: hidden;\n    background-color: #fff;\n}\n#footer{  /*定义页脚样式*/\n    background-color: #7082C2;\n    width: 100%;\n    height: 50px;\n    clear: both;  /*清除左右浮动的元素*/\n}\n\n单单就 table.html 和 css.html 文档比较，让人感觉不到 CSS 页面的优势，甚至书写的代码比表格布局还要多。但是在一个大型网站中分别采用上面两种方式进行页面设计，如果有一天老板让把左侧通栏宽度改为 120 像素，那么：\n在传统的表格布局的网站中，需要打开多有的页面逐一进行修改，劳动强度可想而知；\n而在 DIV+CSS 布局的网站中只需要简单的修改一个 CSS 样式就可以了。\n\n如果所有网页是用 Photoshop 切图实现的，一个简单的改动都会带来毁灭性的打击，因为我们可能需要重新画图、切图，一切都需从头再来。两者相比，孰优孰劣显而易见了。\n拓展阅读\n评价一个网页设计的好坏，也许没有一个统一的标准。但是，建立在一个良好结构基础上的网页代码，肯定也是组容易维护和扩展的。\n\n表格布局与 DIV+CSS 布局本身没有优劣之分，只要坚持最基本的网页设计原则即可：\n对于设计者来说容易实现；\n对于编程者来说容易开发；\n对于管理者来说容易维护；\n对于浏览者来说容易阅读和交互。\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);