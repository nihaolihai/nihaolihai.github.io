(window.webpackJsonp=window.webpackJsonp||[]).push([[463],{951:function(n,e,o){"use strict";o.r(e);var t=o(6),i=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"swing-文件选择器和颜色选择器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swing-文件选择器和颜色选择器"}},[this._v("#")]),this._v(" swing 文件选择器和颜色选择器")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('文件选择器\n文件选择器为用户能够操作系统文件提供了桥梁。swing 中使用 JFileChooser 类实现文件选择器，该类常用的构造方法如下。\nJFileChooser()：创建一个指向用户默认目录的 JFileChooser。\nJFileChooser(File currentDirectory)：使用指定 File 作为路径来创建 JFileChooser。\nJFileChooser(String currentDirectoryPath)：创建一个使用指定路径的 JFileChooser。\nJFileChooser(String currentDirectoryPath, FileSystemView fsv)：使用指定的当前目录路径和 FileSystem View 构造一个 JFileChooser。\n\nJFileChooser 类的常用方法如下所示。\nint showOpenDialog(Component parent)：弹出打开文件对话框。\nint showSaveDialog(Component parent)：弹出保存文件对话框。\n例 1\n编写一个程序允许用户从本地磁盘中选择一个文件，并将选中的文件显示到界面。实现代码如下：\npackage ch18;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JButton;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\npublic class JFileChooserDemo\n{\n    private JLabel label=new JLabel("所选文件路径：");\n    private JTextField jtf=new JTextField(25);\n    private JButton button=new JButton("浏览");\n    public JFileChooserDemo()\n    {\n        JFrame jf=new JFrame("文件选择器");\n        JPanel panel=new JPanel();\n        panel.add(label);\n        panel.add(jtf);\n        panel.add(button);\n        jf.add(panel);\n        jf.pack();    //自动调整大小\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        button.addActionListener(new MyActionListener());    //监听按钮事件\n    }\n    //Action事件处理\n    class MyActionListener implements ActionListener\n    {\n        @Override\n        public void actionPerformed(ActionEvent arg0)\n        {\n            JFileChooser fc=new JFileChooser("F:\\\\");\n            int val=fc.showOpenDialog(null);    //文件打开对话框\n            if(val==fc.APPROVE_OPTION)\n            {\n                //正常选择文件\n                jtf.setText(fc.getSelectedFile().toString());\n            }\n            else\n            {\n                //未正常选择文件，如选择取消按钮\n                jtf.setText("未选择文件");\n            }\n        }\n    }\n    public static void main(String[] args)\n    {\n        new JFileChooserDemo();\n    }\n}\n\n在上述程序中使用内部类的形式创建了一个名称为 MyActionListener 的类，该类实现了 ActionListener 接口。其中 showOpenDialog() 方法将返回一个整数，可能取值情况有 3 种：JFileChooser.CANCEL—OPTION、JFileChooser.APPROVE_OPTION 和 JFileChooser.ERROR_OPTION，分别用于表示单击“取消”按钮退出对话框，无文件选取、正常选取文件和发生错误或者对话框已被解除而退出对话框。因此在文本选择器交互结束后，应进行判断是否从对话框中选择了文件，然后根据返回值情况进行处理。\n\n运行程序，单击“浏览”按钮，会弹出选择文件的对话框，如果取消选择，此时会显示未选择文件；否则就会显示选择的文件路径及文件名称，如图 1 所示。\n\n \n文件保存对话框\n图1 文件选择对话框\n\n使用 JFileChooser 对象调用 showSaveDialog() 方法会显示保存文件对话框，即将“int val=fc.showOpenDialog(null);”语句换成“int val=fc.showSaveDialog(null);”。在保存文件对话框中“保存”按钮对应的常量值是 JFileChooser.APPROVE_OPTION，“取消”按钮对应的常量值是JFileChooser.CANCEL_ OPTION。图 2 所示为文件保存对话框效果。\n\n\n文件选择对话框\n图2 文件保存对话框\n颜色选择器\nJColorChooser 类提供一个用于允许用户操作和选择颜色的控制器窗格。该类提供三个级别的 API：\n显示有模式颜色选取器对话框并返回用户所选颜色的静态便捷方法。\n创建颜色选取器对话框的静态方法，可以指定当用户单击其中一个对话框按钮时要调用的 ActionListener。\n能直接创建 JColorChooser 窗格的实例（在任何容器中），可以添加 PropertyChange 作为监听器以检测当前“颜色”属性的更改。\n\n颜色选择器的常用构造方法如下。\nJColorChooser()：创建初始颜色为白色的颜色选取器窗格。\nJColorChooser(Color initialColor)：创建具有指定初始颜色的颜色选取器窗格。\nJColorChooser(ColorSelectionModel model)：创建具有指定 ColorSelectionModel 颜色选取器窗格。\n\n一般使用 JColorChooser 类的静态方法 showDialog(Component component,String title,Color initialColor) 创建一个颜色对话框，在隐藏对话框之前一直堵塞进程。其中 component 参数指定对话框所依赖的组件，title 参数指定对话框的标题，initialColor 参数指定对话框返回的初始颜色，即对话框消失后返回的默认值。\n\nJColorChooser 类的其他常用方法如表 1 所示。\n\n表1 JColorChooser类的常用方法\n方法名称\t说明\ngetColor()\t获取颜色选取器的当前颜色值\ngetDragEnabled()\t获取dragEnabled 属性的值\nsetColor(Color color)\t将颜色选取器的当前颜色设置为指定颜色\nsetColor(int c)\t将颜色选取器的当前颜色设置为指定颜色\nsetColor(int r,int g,int b)\t将颜色选取器的当前颜色设置为指定的 RGB 颜色\nsetDragEnabled(boolean b)\t设置 dragEnabled 属性，该属性必须为 true 才能启用对\n此组件的自动拖动处理（拖放操作的第一部分）\n例 2\n创建一个示例演示如何使用 JColorChooser 类显示颜色选择器。示例代码非常简单，如下所示。\npackage ch18;\nimport java.awt.Color;\nimport javax.swing.JColorChooser;\nimport javax.swing.JFrame;\npublic class JColorChooserDemo\n{\n    public static void main(String[] args)\n    {\n        JFrame frame=new JFrame("颜色选择器");\n        JColorChooser cc=new JColorChooser();\n        cc.showDialog(frame,"颜色选择器",Color.white);\n        //JColorChooser.showDialog(frame,"颜色选择器",Color.white);\n        //设置窗口的关闭动作、标题、大小位置以及可见性等\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setBounds(100,100,400,200);\n        frame.setVisible(true);\n    }\n}\n\n使用 JFrame 作为容器，在该容器内显示一个标题是“颜色选择器”、使用白色作为默认色的颜色选择器。运行后的颜色选择器窗口如图 3 所示。\n\n')])])]),e("p",[e("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/181106/3-1Q1061HA64Q.gif",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);e.default=i.exports}}]);