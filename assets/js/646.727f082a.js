(window.webpackJsonp=window.webpackJsonp||[]).push([[646],{1137:function(e,n,t){"use strict";t.r(n);var i=t(6),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"springbootrabitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springbootrabitmq"}},[e._v("#")]),e._v(" springbootrabitmq")]),e._v(" "),t("p",[e._v("rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。")]),e._v(" "),t("p",[e._v("1、安装Erlang\n"),t("a",{attrs:{href:"https://www.erlang.org/downloads",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载地址"),t("OutboundLink")],1),e._v("，")]),e._v(" "),t("p",[e._v("本文选择OTP 21.0.1 Windows 64-bit Binary File (91707927)\n设置环境变量，新建ERLANG_HOME")]),e._v(" "),t("p",[e._v("修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\\bin;\n打开cmd命令框，输入erl")]),e._v(" "),t("p",[e._v("至此，Erlang 安装完成\n2、安装rabbitmq\n"),t("a",{attrs:{href:"http://www.rabbitmq.com/download.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"http://www.rabbitmq.com/install-windows.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("exe安装地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"http://www.rabbitmq.com/install-windows-manual.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("解压缩安装地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("本文选择解压缩安装rabbitmq-server-windows-3.7.7.zip")]),e._v(" "),t("p",[e._v("将rabbitmq-server-windows-3.7.7.zip解压缩至D:\\Program Files目录下")]),e._v(" "),t("p",[e._v("设置环境变量，新建RABBITMQ_SERVER")]),e._v(" "),t("p",[e._v("修改环境变量path，增加rabbitmq变量至path，%RABBITMQ_SERVER%\\sbin;\n打开cmd命令框，切换至D:\\Program Files\\rabbitmq_server-3.7.7\\sbin目录下，输入rabbitmqctl status")]),e._v(" "),t("p",[e._v("说明rabbmitmq未启动，继续下面操作。\n安装插件，命令：rabbitmq-plugins.bat enable rabbitmq_management,出现：")]),e._v(" "),t("p",[e._v("解决方法： 将 C:\\Users\\Administrator.erlang.cookie 同步至C:\\Windows\\System32\\config\\systemprofile.erlang.cookie\n同时删除：C:\\Users\\Administrator\\AppData\\Roaming\\RabbitMQ目录\n输入命令：rabbitmq-plugins.bat enable rabbitmq_management ，出现下面信息表示插件安装成功：")]),e._v(" "),t("p",[e._v("输入命令：rabbitmq-server.bat")]),e._v(" "),t("p",[e._v("rabbitmq启动成功，浏览器中http://localhost:15672，")]),e._v(" "),t("p",[e._v("输入guest,guest进入rabbitMQ管理控制台：")]),e._v(" "),t("p",[e._v("打开cmd，再次输入命令：rabbitmqctl status")]),e._v(" "),t("p",[e._v("至此，rabbitMQ安装部署完成。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('（1）配置 pom 包，主要是添加 spring-boot-starter-amqp 的支持\n<dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-amqp</artifactId></dependency>\n\n（2）配置文件\n\nspring.application.name=Spring-boot-rabbitmqspring.rabbitmq.host=192.168.0.1spring.rabbitmq.port=5672spring.rabbitmq.username=adminspring.rabbitmq.password=123456\n\n（3）定义队列\n\n@Configurationpublic class RabbitConfig {@Beanpublic Queue Queue() {return new Queue("hello");}}\n\n（4）发送者\npublic class HelloSender {@Autowiredprivate AmqpTemplate rabbitTemplate;public void send() {String context = "hello " + new Date();System.out.println("Sender : " + context);this.rabbitTemplate.convertAndSend("hello", context);}}\n\n（5）接收者\n@Component@RabbitListener(queues = "hello")public class HelloReceiver {@RabbitHandlerpublic void process(String hello) {System.out.println("Receiver : " + hello);}}\n\n（6）测试\n@RunWith(SpringRunner.class)@Spring BootTestpublic class RabbitMqHelloTest {@Autowiredprivate HelloSender helloSender;@Testpublic void hello() throws Exception {helloSender.send();Thread.sleep(1000l);}}\n\nTopic ExchangeTopic 是 RabbitMQ 中最灵活的一种方式，可以根据 routing_key 自由的绑定不同的队列。@Configurationpublic class TopicRabbitConfig {final static String message = "topic.message";final static String messages = "topic.messages";//定义队列@Beanpublic Queue queueMessage() {return new Queue(TopicRabbitConfig.message);}@Beanpublic Queue queueMessages() {return new Queue(TopicRabbitConfig.messages);}//交换机@BeanTopicExchange exchange() {return new TopicExchange("exchange");}//将队列和交换机绑定@BeanBinding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) {return BindingBuilder.bind(queueMessage).to(exchange).with("topic.message");}@BeanBinding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) {return BindingBuilder.bind(queueMessages).to(exchange).with("topic.#");}}\n发送者代码如下：\npublic void send1() {String context = "hi, i am message 1";System.out.println("Sender : " + context);this.rabbitTemplate.convertAndSend("exchange", "topic.message", context);}public void send2() {String context = "hi, i am messages 2";System.out.println("Sender : " + context);this.rabbitTemplate.convertAndSend("exchange", "topic.messages", context);}\n接收者1代码如下：\n@Component@RabbitListener(queues = "topic.message")public class TopicReceiver {@RabbitHandlerpublic void process(String message) {System.out.println("Topic Receiver1 : " + message);}}\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);