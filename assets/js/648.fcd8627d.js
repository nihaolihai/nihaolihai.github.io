(window.webpackJsonp=window.webpackJsonp||[]).push([[648],{1142:function(n,e,s){"use strict";s.r(e);var t=s(6),a=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"sqlserver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sqlserver"}},[this._v("#")]),this._v(" sqlserver")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\n复制表结构\n\nSELECT * INOT t1 FROM titles WHERE 1=2;\n\n--字符串函数\n\nselect ASCII(0) --48\n\nselect CHAR(48) --0\n\nselect lower('asMNddAD') --asmnddad\n\nselect upper('asMNddAD') --ASMNDDAD\n\nselect str(1245,9,3) -- 1245.000(数值1245转换为字符串，长度为9，小数点后有三位.小数点占一位，如果不够前边增加空格[自动四舍五入,默认值为10。小数点后最多保留16 位。默认不保留小数点后面的数字])\n\nselect ltrim(' asd mn ') --asd mn (左边空格去掉)\n\nselect rtrim(' asd mn ') -- asd mn(右边空格去掉)\n\nselect left('1234sddffgdsg',4) --1234(返回左边开始4个长度的字符串)\n\nselect right('1234sddffgdsg',3) --dsg(返回右边开始3个长度的字符串)\n\nselect substring('abcdefgmnp',2,3) --bcd(返回从左边第2个开始，长度是3的字符串)\n\nselect charindex('cd','abcdefgmnp') --3(返回左边字符串在右边出现的位置)\n\nselect charindex('ab','sabcdabmn',4) --6， 有参数4，则从第四个位置开始\n\nselect difference('xiaoming','123') --相似度匹配<这个是搜索高级用法>\n\nselect len('abcde ') --5，长度(只包含开头和中间的空格，不包含尾部空格)\n\nselect patindex('%ab%','mndabpabq') --4,从左边开始第一次匹配到的字符串位置,%:任意长度字符串\n\nselect patindex('ab%','mnab') --0\n\nselect patindex('%_a__b_%','0001a23bc45') --4,从左边开始第一次匹配到的字符串位置，_：一个长度的字符\n\nselect reverse('abcd') --dcba 反转\n\nselect 'a'+space(3)+'b' --a b,增加空格数\n\nselect stuff('abcde',2,3,'123') --a123e,从字符串abcde中的第2个位置删除3个增加123\n\nselect replace('abcmmabcnnabc','abc','123') --123mm123nn123,替换\n\n\n类型 P----\x3e存储过程\n\n                                FN---\x3e函数\n\n                                V---\x3e视图\n\n                                TR--\x3e触发器\n\nSELECT\nName,--存储过程名字\nDefinition --存储过程内容\nFROM sys.sql_modules AS m \nINNER JOIN sys.all_objects AS o ON m.object_id = o.object_id\nWHERE o.[type] = 'P'\n\n--日期时间函数\n\nselect GETDATE() --当前时间\n\nselect GETUTCDATE() --世界标准时间\n\nselect dateadd(YEAR,2,GETDATE()) --当前时间加2年,QUARTER/qq,MONTH/mm,DAY/dd,HOUR/hh,MINUTE/mi,SECOND/ss\n\nselect datediff(year,'2017-01-10',getdate()) --当前时间减去2000年获取年份,QUARTER/qq,MONTH/mm,DAY/dd,HOUR/hh,MINUTE/mi,SECOND/ss\n\nselect datename(YEAR,GETDATE()) --当前年份(字符串),QUARTER/qq,MONTH/mm,DAY/dd,HOUR/hh,MINUTE/mi,SECOND/ss,dw(星期五),dy(一年中的第几天),wk(一年的第46个星期)\n\nselect datepart(YEAR,GETDATE()) --当前年份(数字),QUARTER/qq,MONTH/mm,DAY/dd,HOUR/hh,MINUTE/mi,SECOND/ss,dw(一周中的第几天[周日：1，周一：2]),dy(一年中的第几天),wk(一年的第46个星期)\n\nselect YEAR(GETDATE()) --当前年份(数字),和datepart相似,例如：day(),month()\n\n--数学函数\n\nselect abs(-4) --绝对值\n\nselect PI() --pai\n\nselect COS(PI()/3) --0.5,相当于cos(60度)\n\nselect SIN(PI()/6) --0.5,相当于sin(30度)\n\nselect TAN(PI()/4) --1,相当于tan(45度)\n\nselect cot(PI()/4) --1,相当于cot(45度)\n\nselect aCOS(0.5) --返回0.5对应的弧度值，例如：pi()/3,即60度\n\nselect aSIN(0.5) --30度\n\nselect aTAN(1) --45度\n\nselect degrees(PI()/3) --60,即60度,返回弧度\n\nselect radians(60.0) --返回60度对应的弧度值\n\nselect EXP(2) --返回以自然常数e为底的指数函数\n\nselect LOG(EXP(2)) --返回以e为底的对数函数\n\nselect log10(10) --返回以10为底的对数函数\n\nselect ceiling(1.23) --向上取整(数值变大，-1.2变为-1，1.2变为2)\n\nselect floor(1.89) --向下取整(数值变小，-1.8变为-2，1.8变为1)\n\nselect power(2,10) --1024,指数运算\n\nselect sqrt(9) --3，开平方运算\n\nselect rand(2.3) --随机数（0-1）,随机数种子可以不填，如果种子相同，产生的随机数则相同\n\n--select ROUND(1) --\n\n--convert()转换时间格式\n\nselect convert(nvarchar(1000),GETDATE()) --11 16 2018 4:52PM\n\nselect convert(nvarchar(1000),GETDATE(),101) --11/16/2018\n\nselect convert(nvarchar(1000),GETDATE(),102) --2018.11.16，常用\n\nselect convert(nvarchar(1000),GETDATE(),103) --16/11/2018\n\nselect convert(nvarchar(1000),GETDATE(),104) --16.11.2018\n\nselect convert(nvarchar(1000),GETDATE(),105) --16-11-2018\n\nselect convert(nvarchar(1000),GETDATE(),106) --16 11 2018\n\nselect convert(nvarchar(1000),GETDATE(),107) --11 16, 2018\n\nselect convert(nvarchar(1000),GETDATE(),108) --16:56:13，常用\n\nselect convert(nvarchar(1000),GETDATE(),109) --11 16 2018 4:57:02:030PM\n\nselect convert(nvarchar(1000),GETDATE(),110) --11-16-2018\n\nselect convert(nvarchar(1000),GETDATE(),111) --2018/11/16，常用\n\nselect convert(nvarchar(1000),GETDATE(),112) --20181116，常用\n\nselect convert(nvarchar(1000),GETDATE(),113) --16 11 2018 16:57:02:030\n\nselect convert(nvarchar(1000),GETDATE(),114) --16:57:02:030\n\nselect convert(nvarchar(1000),GETDATE(),120) --2018-11-16 16:57:37，常用\n\nselect convert(nvarchar(1000),GETDATE(),121) --2018-11-16 16:57:37.893，常用\n\nselect convert(nvarchar(1000),GETDATE(),126) --2018-11-16T16:57:37.893\n\nselect convert(nvarchar(1000),GETDATE(),130) -- 8 ???? ????? 1440 4:57:37:893PM\n\n\nselect convert(nvarchar(1000),GETDATE(),131) -- 8/03/1440 4:57:37:893PM\n\nselect cast(GETDATE() as nvarchar(10)) --11 18 2018,类型转换\n\nselect N'年龄：'+CAST(123 as nvarchar) --年龄：123，类型转换，[N 是为了使数据库识别Unicode 字符]\n\nselect NEWID() --生成guid\n\nselect isnumeric(2) --1，是否是数字，不是数字返回0\n\nselect ISNULL(null,'asdsd') --asdsd,前边为null，返回后边\n\nselect ISNULL('aaa','asdsd') --aaa，前边不是null，返回前边\n\nselect ISDATE('20180112') --1，判断能否转换成日期格式，如果能返回1，不能返回0\n\n\nselect ID,Name,ROW_NUMBER() over(order by Name) as rank from [ChinaArea].[dbo].[Region] --ROW_NUMBER()必须和 over(order by Name) as rank一起使用，增加一列rank\n\nselect ID,Name,CityCode,rank() over(order by Name) as rank from [ChinaArea].[dbo].[Region] --rank()排名，如果有两个第一名并列，则不会有第二名，下一个直接从3开始。即显示1，1，3[没有2，不连续]\n\nselect ID,Name,CityCode,dense_rank() over(order by Name) as rank from [ChinaArea].[dbo].[Region] --dense_rank()排名，如果有两个第一名并列，下一个从2开始。即显示1，1，2[连续数字]\n\n--聚合函数，聚合函数经常与 SELECT 语句的 GROUP BY 子句一起使用\n\n--count(),min(),max(),avg(),sum()\n\n--distinct使用方法：根据distinct后边的字段去处重复.如果是distinct(name),则去除name相同的;如果是distinct name,sex，则去除name和sex相同的数据\n\n库是否存在\n\nif exists(select * from master..sysdatabases where name=N'库名')\n\n\n-- 判断要创建的表名是否存在\n\nif exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[表名]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)\n\n-- 删除表\n\ndrop table [dbo].[表名]\n\n\n-列是否存在\n\n IF COL_LENGTH( '表名','列名') IS NULL\n\n    PRINT 'not exists'\n\nELSE\n\n PRINT 'exists'\n\nalter table 表名 drop constraint 默认值名称\n\ngo\n\nalter table 表名 drop column 列名\n\ngo\n\n\n--判断要创建临时表是否存在\n\nIf Object_Id('Tempdb.dbo.#Test') Is Not Null\n\nBegin\n\nprint '存在'\n\nEnd\n\nElse\n\nBegin\n\nprint '不存在'\n\nEnd\n\n-- 判断要创建的存储过程名是否存在\n\nif exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[存储过程名]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)\n\n-- 删除存储过程\n\ndrop procedure [dbo].[存储过程名]\n\nGO\n\n-- 判断要创建的视图名是否存在\n\nif exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[视图名]') and OBJECTPROPERTY(id, N'IsView') = 1)\n\n-- 删除视图\n\ndrop view [dbo].[视图名]\n\nGO\n\n\n-- 判断要创建的函数名是否存在\n\nif exists (select * from sysobjects where xtype='fn' and name='函数名')\n\nif exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[函数名]') and xtype in (N'FN', N'IF', N'TF'))\n\n-- 删除函数\n\ndrop function [dbo].[函数名]\n\nGO\n\nif col_length('表名', '列名') is null\n\nprint '不存在'\n\nselect 1 from sysobjects where id in (select id from syscolumns where name='列名') and name='表名'\n\n新增列\n\nALTER TABLE Student ADD S_entrance DATETIME;向基本表Student中增加“入学时间”属性列。\n \n新增约束\n\nALTER TABLE Course ADD UNIQUE(Cname);对Course表，增加课程名称必须取唯一值的约束条件。\n \n\n修改某字段的数据类\n\nALTER TABLE Student ALTER COLUMN Sage SMALLINT;\n\n复制表结构数据\n\n目标表存在：INSERT INTO 目标表 SELECT * FROM 原表;\n\n目标表不存在：SELECT * INTO 目标表 FROM 原表;\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);