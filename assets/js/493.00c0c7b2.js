(window.webpackJsonp=window.webpackJsonp||[]).push([[493],{982:function(n,e,t){"use strict";t.r(e);var o=t(6),a=Object(o.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"mongodb的文档存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mongodb的文档存储结构"}},[this._v("#")]),this._v(" MongoDB的文档存储结构")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('MongoDB 文档数据库的存储结构分为四个层次，从小到大依次是：键值对、文档（document）、集合（collection）、数据库（database）。\n\n键值对\n文档数据库存储结构的基本单位是键值对，具体包含数据和类型。键值对的数据包含键和值，键的格式一般为字符串，值的格式可以包含字符串、数值、数组、文档等类型。\n\n按照键值对的复杂程度，可以将键值对分为基本键值对和嵌套键值对。\n图 2 中的键值对中的键为字符串，值为基本类型，这种键值对就称为基本键值。\n嵌套键值对类型如图 3 所示，从图中可以看岀， contact 的键对应的值为一个文档，文档中又包含了相关的键值对，这种类型的键值对称为嵌套键值对。\n\n键（Key）起唯一索引的作用，确保一个键值结构里数据记录的唯一性，同时也具有信息记录的作用。例如，country:"China"，用:实现了对一条地址的分割记录，“country”起到了 “China”的唯一地址作用，另外，“country”作为键的内容说明了所对应内容的一些信息。\n\n值（Value）是键所对应的数据，其内容通过键来获取，可存储任何类型的数据，甚至可以为空。\n\n键和值的组成就构成了键值对（Key-Value Pair）。它们之间的关系是一一对应的，如定义了 “country:China”键值对，"country”就只能对应“China”，而不能对应“USA”。\n\n文档中键的命名规则如下。\nUTF-8 格式字符串。\n不用有\\0的字符串，习惯上不用.和$。\n以开头的多为保留键，自定义时一般不以开头。\n文档键值对是有序的，MongoDB 中严格区分大小写。\n文档\n文档是 MongoDB 的核心概念，是数据的基本单元，与关系数据库中的行十分类似，但是比行要复杂。文档是一组有序的键值对集合。文档的数据结构与 JSON 基本相同，所有存储在集合中的数据都是 BSON 格式。\n\nBSON 是一种类 JSON 的二进制存储格式，是 Binary JSON 的简称。 一个简单的文档例子如下：\n{"country" : "China", "city": "BeiJing"}\n\nMongoDB 中的数据具有灵活的架构，集合不强制要求文档结构。但数据建模的不同可能会影响程序性能和数据库容量。文档之间的关系是数据建模需要考虑的重要因素。文档与文档之间 的关系包括嵌入和引用两种。\n\n下面举一个关于顾客 patron 和地址 address 之间的例子，来说明在某些情况下，嵌入优于引用。\n{\n    _id: "joe",\n    name: "Joe Bookreader"\n}\n{\n    patron_id: "joe",\n    street: "123 Fake Street",\n    city: "Faketon",\n    state: "MA",\n    zip: "2345"\n}\n关系数据库的数据模型在设计时，将 patron 和 address 分到两个表中，在查询时进行关联， 这就是引用的使用方式。如果在实际查询中，需要频繁地通过 _id 获得 address 信息，那么就需要频繁地通过关联引用来返回查询结果。在这种情况下，一个更合适的数据模型就是嵌入。\n\n将 address 信息嵌入 patron 信息中，这样通过一次查询就可获得完整的 patron 和 address 信息，如下所示：\n{\n    _id: "joe",\n    name: "Joe Bookreader",\n    address: {\n        street: "123 Fake Street",\n        city: "Faketon”，\n        state: nMAnz\n        zip: T2345”\n    }\n}\n\n如果具有多个 address，可以将其嵌入 patron 中，通过一次查询就可获得完整的 patron 和多个 address 信息，如下所示：\n{\n    _id: "joe",\n    name: "Joe Bookreader",\n    addresses:[\n        {\n            street: "123 Fake Streetn,\n            city: "Faketon",\n            state: "MA",\n            zip: "12345"\n        },\n        {\n            street: "l Some Other Street",\n            city: "Boston",\n            state: "MA",\n            zip: "12345"\n        }\n    ]\n}\n但在某种情况下，引用用比嵌入更有优势。下面举一个图书出版商与图书信息的例子，代码如下:\n{\n    title: "MongoDB: The Definitive Guide",\n    author: [ "Kristina Chodorow", "Mike Dirolfn"],\n    published_date: ISODate("2010-09-24"),\n    pages: 216,\n    language: "English",\n    publisher: {\n        name: "O\'Reilly Media",\n        founded: 1980,\n        location: "CA"\n    }\n}\n{\n    title: "50 Tips and Tricks for MongoDB Developer",\n    author: "Kristina Chodorow",\n    published_date: ISODate("2011-05-06"),\n    pages: 68,\n    language: "English",\n    publisher: {\n        name: "O\'Reilly Media",\n        founded: 1980,\n        location: "CA"\n    }\n}\n从上边例子可以看出，嵌入式的关系导致出版商的信息重复发布，这时可采用引用的方式描述集合之间的关系。使用引用时，关系的增长速度决定了引用的存储位置。如果每个出版商的图书数量很少且增长有限，那么将图书信息存储在出版商文档中是可行的。\n\n通过 books 存储每本图书的 id 信息，就可以查询到指定图书出版商的指定图书信息，但如果图书出版商的图书数量很多, 则此数据模型将导致可变的、不断增长的数组 books，如下所示：\n{\n    name: "O\'Reilly Media",\n    founded: 1980,\n    location: "CA",\n    books: [123456789, 234567890, …]\n}\n{\n    _id: 123456789,\n    title: "MongoDE: The Definitive Guide",\n    author: ["Kristina Chodorow", "Mike Dirolf"],\n    published_date: ISODate("2010-09-24"),\n    pages: 216,\n    language: "English"\n}\n{\n    _id: 234567890,\n    title: "50 Tips and Tricks for MongoDB Developer",\n    author: "Kristina Chodorow",\n    published_date: ISODate("2011-05-06"),\n    pages: 68,\n    language: "English"\n} \n\n为了避免可变的、不断增长的数组，可以将出版商引用存放到图书文档中，如下所示：\n{\n    _id: "oreilly",\n    name: "O\'Reilly Media",\n    founded: 1980,\n    location: "CA"\n}\n{\n    _id: 123456789,\n    title: "MongoDB: The Definitive Guiden,\n    author: [ "Kristina Chodorow", "Mike Dirolf"],\n    published_date: ISODate("2010-09-24"),\n    pages: 216,\n    language: "English",\n    publisher_id: "oreilly"\n}\n{\n    _id: 234567890,\n    title: "50 Tips and Tricks for MongoDB Developer",\n    author: "Kristina Chodorow",\n    published date: ISODate("2011-05-06")，\n    pages: 68,\n    language: "English",\n    publisher_id: "oreilly"\n}\n集合\nMongoDB 将文档存储在集合中，一个集合是一些文档构成的对象。如果说 MongoDB 中的文档类似于关系型数据库中的“行”，那么集合就如同“表”。\n\n集合存在于数据库中，没有固定的结构，这意味着用户对集合可以插入不同格式和类型的数据。但通常情况下插入集合的数据都会有一定的关联性，即一个集合中的文档应该具有相关性。\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);