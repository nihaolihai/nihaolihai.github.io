(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{717:function(n,e,a){"use strict";a.r(e);var t=a(6),i=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"maven基于m2eclipse生成站点和报告"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven基于m2eclipse生成站点和报告"}},[this._v("#")]),this._v(" Maven基于M2Eclipse生成站点和报告")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('前面介绍了基于 MyEclipse+M2Eclipse 完成工程的基本构建，接下来介绍怎样生成相关的文档和报告。\n\n之前用的是 mvn 命令，后面指定插件的坐标（没有自定，mvn 自动找仓库中最新的）告知 mvn 做什么事。那么在 MyEclipse+M2Eclipse 环境下，是通过什么方式告诉 Maven 使用哪些插件做哪些事情呢？\n\n靠的是 pom.xml 骨架文件。要做的就是在 pom.xml 文件中，按它的语法要求指定相关的插件坐标，Maven 在运行的时候，自动调用插件完成对应的任务。\n\n这里要先了解一下常用的插件有哪些，以及怎样确定它们的坐标，这样才好在 pom.xml 中描述，如表 1 所示。\n\n表 1 常用的插件\n插件名称\t用途\t来源\nmaven-clean-plugin\t清理项目\tApache\nmaven-compile-plugin\t编译项目\tApache\nmaven-deploy-pligin\t发布项目\tApache\nmaven-site-plugin\t生成站点\tApache\nmaven-surefire-plugin\t运行测试\tApache\nmaven-jar-plugin\t构建 jar 项目\tApache\nmaven-javadoc-plugin\t生成 javadoc 文件\tApache\nmaven-surefire-report-plugin\t生成测试报告\tApache\n接下来在工程里面体验运行测试、生成 javadoc、生成站点和测试报告插件的使用。\n运行测试\n在 Maven Repository（仓库）中找到 surefire 插件的坐标。\n\n用浏览器打开 http://mvnrepository.com/，在 Search 输入框中输入“surefire-plugin”\n\n单击 maven-surefire-plugin，查看它的所有版本信息。单击想使用的版本（这里使用 2.19.1），会显示该版本的 groupId、artifactId 等坐标信息，\n\n在 pom.xml 中添加 surefire 插件描述。\n\n在 MyEclipse 中打开 pom.xml 文件，在 pom.xml 后面添加一个 build 标签，里面添加 surefire 插件的描述信息，具体内容如下所示，被粗体显示的为新添加的内容。\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.mengma.demo</groupId>\n    <artifactId>HelloWorld</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>HelloWorld</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.19.1</version>\n                <configuration>\n                    \x3c!-- 设置包含的测试类 --\x3e\n                    <includes>\n                        <include>****</include>\n                    </includes>\n                    \x3c!-- 设置不进行测试类 --\x3e\n                    <excludes>\n                        <exclude>Test *</exclude>\n                    </excludes>\n                    \x3c!-- 跳过测试阶段，测试类写的有问题也会出错，一般不推荐 --\x3e\n                    \x3c!-- <skip>true</skip> --\x3e\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n上面内容 26-46 行就是 surefire-plugin 的描述。具体的描述方式和说明上面有注释。\n\n启动 Maven，运行 test。\n\n右击“工程”，选择 Run As→Maven test 命令，Maven 会自动启动插件进行编译和测试。如果是第一次运行测试，在控制台会发现如下下载信息，说明 Maven 将用到之前配置的 surefire-plugin 运行测试。\n[INFO]---maven-surefire-plugin:2.19.1:test (default-test) @MvnBookTP02 ---\n[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/\nsurefire/maven-surefire-common/2.19.1/maven-surefire-common-2.19.1.pom\n\n生成 javadoc API 帮助文档\n查找合适版本的坐标。\n\n在 mvnrepository.com 中，类似查找 surefire-plugin 的方式，输入“javadoc-plugin”查询，找到自己需要的版本坐标信息。\n\n将 javadoc-plugin 添加到 pom.xml。\n\n在 pom.xml 的 plugins 标签之间添加如下内容。\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-javadoc-plugin</artifactId>\n    <version>2.7</version>\n    <configuration>\n        <aggregate>true</aggregate>\n    </configuration>\n    <executions>\n        <execution>\n            <id>attach-javadocs</id>\n            <glals>\n                <gola>jar</gola>\n            </glals>\n            \x3c!-- 执行maven test的时候运行插件 --\x3e\n            <phase>test</phase>\n        </execution>\n    </executions>\n</plugin>\n\n这里面除了 javadoc-plugin 的坐标信息外，还有其他配置信息。中间被粗体显示的信息的意思是：当选择 Run As→Maven test 命令时，执行 javadoc 插件，生成 doc 帮助文档。\n\n运行 javadoc-plugin 插件，查看 doc ap 文档。\n\n右击“工程”，选择 Run As→Maven test 命令，Maven 会自动调用插件生成 API 文档。在工程的 target 目录下会自动产生一个 apidocs 目录，里面就是生成的 API 文档。\n\n前面介绍了 2 个插件的坐标查找和配置方法，接下来是生成站点和测试报告。\n生成站点\n\x3c!-- 构建项目站点报告插件 --\x3e\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-site-plugin</artifactId>\n    <version>3.0-beta-3</version>\n    <configuration>\n        \x3c!-- 配置站点国际化 --\x3e\n        <locales>zh_CN</locales>\n        \x3c!-- 输出编码 --\x3e\n        <outputEncoding>GBK</outputEncoding>\n    </configuration>\n</plugin>\n测试报告\n纯文本复制\n\x3c!-- 单元测试报告html --\x3e\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-report-plugin</artifactId>\n    <version>2.12.2</version>\n    <configuration>\n        <showSuccess>true</showSuccess>\n    </configuration>\n    <executions>\n        <execution>\n            <id> test-report</id>\n            <phase>test</phase>\n        </execution>\n    </executions>\n</plugin>\n\x3c!--测试覆盖率的报告 --\x3e\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>cobertura-maven-plugin</artifactId>\n    <version>2.5.1</version>\n    <configuration>\n        <formats>\n            <format>html</format>\n            <format>xml</format>\n        </formats>\n    </configuration>\n    <executions>\n        <execution>\n            <id>cobertura-report</id>\n            <goals>\n                <goal>cobertura</goal>\n            </goals>\n            <phase>test</phase>\n        </execution>\n    </executions>\n</plugin>\n\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);