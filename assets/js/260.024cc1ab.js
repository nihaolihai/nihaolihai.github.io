(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{749:function(n,e,t){"use strict";t.r(e);var a=t(6),s=Object(a.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"mybatis-sqlsessionfactory及其常见创建方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-sqlsessionfactory及其常见创建方式"}},[this._v("#")]),this._v(" MyBatis SqlSessionFactory及其常见创建方式")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('使用 MyBatis 首先是使用配置或者代码去生产 SqlSessionFactory，而 MyBatis 提供了构造器 SqlSessionFactoryBuilder。\n\n它提供了一个类 org.apache.ibatis.session.Configuration 作为引导，采用的是 Builder 模式。具体的分步则是在 Configuration 类里面完成的，当然会有很多内容，包括你很感兴趣的插件。\n\n在 MyBatis 中，既可以通过读取配置的 XML 文件的形式生成 SqlSessionFactory，也可以通过 Java 代码的形式去生成 SqlSessionFactory。\n\n笔者强烈推荐采用 XML 的形式，因为代码的方式在需要修改的时候会比较麻烦。当配置了 XML 或者提供代码后，MyBatis 会读取配置文件，通过 Configuration 类对象构建整个 MyBatis 的上下文。\n\n注意，SqlSessionFactory 是一个接口，在 MyBatis 中它存在两个实现类：SqlSessionManager 和 DefaultSqlSessionFactory。\n\n一般而言，具体是由 DefaultSqlSessionFactory 去实现的，而 SqlSessionManager 使用在多线程的环境中，它的具体实现依靠 DefaultSqlSessionFactory，它们之间的关系如图 1 所示。\nSqlSessionFactory的生成\n图 1  SqlSessionFactory 的生成\n\n每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为中心的，而 SqlSessionFactory 唯一的作用就是生产 MyBatis 的核心接口对象 SqlSession，所以它的责任是唯一的。我们往往会采用单例模式处理它，下面讨论使用配置文件和 Java 代码两种形式去生成 SqlSessionFactory 的方法。\n使用 XML 构建 SqlSessionFactory\n首先，在 MyBatis 中的 XML 分为两类，一类是基础配置文件，通常只有一个，主要是配置一些最基本的上下文参数和运行环境；另一类是映射文件，它可以配置映射关系、SQL、参数等信息。\n\n先看一份简易的基础配置文件，我们把它命名为 mybatis-config.xml，放在工程类路径下，其内容如下所示。\n<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    <typeAliases>\x3c!--别名--\x3e\n        <typeAliases alias="user" type="com.mybatis.po.User"/>\n    </typeAliases>\n    \x3c!-- 数据库环境 --\x3e\n    <environments default="development">\n        <environment id="development">\n            \x3c!-- 使用JDBC的事务管理 --\x3e\n            <transactionManager type="JDBC" />\n            <dataSource type="POOLED">\n                \x3c!-- MySQL数据库驱动 --\x3e\n                <property name="driver" value="com.mysql.jdbc.Driver" />\n                \x3c!-- 连接数据库的URL --\x3e\n                <property name="url"\n                    value="jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8" />\n                <property name="username" value="root" />\n                <property name="password" value="1128" />\n            </dataSource>\n        </environment>\n    </environments>\n    \x3c!-- 将mapper文件加入到配置文件中 --\x3e\n    <mappers>\n        <mapper resource="com/mybatis/mapper/UserMapper.xml" />\n    </mappers>\n</configuration>\n我们描述一下 MyBatis 的基础配置文件：\n<typeAlias> 元素定义了一个别名 user，它代表着 com.mybatis.po.User 这个类。这样定义后，在 MyBatis 上下文中就可以使用别名去代替全限定名了。\n<environment> 元素的定义，这里描述的是数据库。它里面的 <transactionManager> 元素是配置事务管理器，这里采用的是 MyBatis 的 JDBC 管理器方式。\n<dataSource> 元素配置数据库，其中属性 type="POOLED" 代表采用 MyBatis 内部提供的连接池方式，最后定义一些关于 JDBC 的属性信息。\n<mapper> 元素代表引入的那些映射器，在谈到映射器时会详细讨论它。\n\n有了基础配置文件，就可以用一段很简短的代码来生成 SqlSessionFactory 了，如下所示。\nSqlSessionFactory factory = null;\nString resource = "mybatis-config.xml";\nInputStream is;\ntry {\n    InputStream is = Resources.getResourceAsStream(resource);\n    factory = new SqlSessionFactoryBuilder().build(is);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n首先读取 mybatis-config.xml，然后通过 SqlSessionFactoryBuilder 的 Builder 方法去创建 SqlSessionFactory。整个过程比较简单，而里面的步骤还是比较烦琐的，只是 MyBatis 采用了 Builder 模式为开发者隐藏了这些细节。这样一个 SqlSessionFactory 就被创建出来了。\n\n采用 XML 创建的形式，信息在配置文件中，有利于我们日后的维护和修改，避免了重新编译代码，因此笔者推荐这种方式。\n使用代码创建 SqlSessionFactory\n虽然笔者不推荐使用这种方式，但是我们还是谈谈如何使用它。通过代码来实现与使用 XML 构建 SqlSessionFactory 一样的功能——创建 SqlSessionFactory，代码如下所示。\n// 数据库连接池信息\nPooledDataSource dataSource = new PooledDataSource();\ndataSource.setDriver("com.mysql.jdbc.Driver");\ndataSource.setUsername("root");\ndataSource.setPassword ("1128");\ndataSource.setUrl("jdbc:mysql://localhost:3306/mybatis");\ndataSource.setDefeultAutoCommit(false);\n// 采用 MyBatis 的 JDBC 事务方式\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment ("development", transactionFactory, dataSource);\n// 创建 Configuration 对象\nConfiguration configuration = new Configuration(environment);\n// 注册一个 MyBatis 上下文别名\nconfiguration.getTypeAliasRegistry().registerAlias("role", Role.class);\n// 加入一个映射器\nconfiguration.addMapper(RoleMapper.class);\n//使用 SqlSessionFactoryBuilder 构建 SqlSessionFactory\nSqlSessionFactory SqlSessionFactory =\nnew SqlSessionFactoryBuilder().build(configuration);\nreturn SqlSessionFactory;\n注意代码中的注释，它和 XML 方式实现的功能是一致的，只是方式不太一样而已。但是代码冗长，如果发生系统修改，那么有可能需要重新编译代码才能继续，所以这不是一个很好的方式。\n\n除非有特殊的需要，比如在配置文件中，需要配置加密过的数据库用户名和密码，需要我们在生成 SqlSessionFactory 前解密为明文的时候，才会考虑使用这样的方式。\n\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);