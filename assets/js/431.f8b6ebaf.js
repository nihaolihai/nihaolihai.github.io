(window.webpackJsonp=window.webpackJsonp||[]).push([[431],{919:function(e,n,t){"use strict";t.r(n);var o=t(6),i=Object(o.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-mvc统一异常处理的3种方式-附带实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc统一异常处理的3种方式-附带实例"}},[this._v("#")]),this._v(" Spring MVC统一异常处理的3种方式（附带实例）")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('在 Spring MVC 应用的开发中，不管是对底层数据库操作，还是业务层或控制层操作，都会不可避免地遇到各种可预知的、不可预知的异常需要处理。\n\n如果每个过程都单独处理异常，那么系统的代码耦合度高，工作量大且不好统一，以后维护的工作量也很大。\n\n如果能将所有类型的异常处理从各层中解耦出来，这样既保证了相关处理过程的功能单一，又实现了异常信息的统一处理和维护。\n\n幸运的是，Spring MVC 框架支持这样的实现。Spring MVC 统一异常处理有以下 3 种方式：\n使用 Spring MVC 提供的简单异常处理器 SimpleMappingExceptionResolver。\n实现 Spring 的异常处理接口 HandlerExceptionResolver 自定义自己的异常处理器。\n使用 @ExceptionHandler 注解实现异常处理\n\n本节主要根据这 3 种处理方式讲解 Spring MVC 应用的异常统一处理。\n\n为了验证 Spring MVC 框架的 3 种异常处理方式的实际效果，需要开发一个测试应用 springMVCDemo10，从 Dao 层、Service 层、Controller 层分别抛出不同的异常（SQLException、自定义异常和未知异常），然后分别集成 3 种方式进行异常处理，进而比较其优缺点。springMVCDemo10 应用的结构如图 1 所示。\n\nspringMVCDemo10应用的结构\n图 1  springMVCDemo10应用的结构\n\n3 种异常处理方式的相似部分有 Dao 层、Service 层、View 层、MyException、TestException Controller 以及 web.xml，下面分别介绍这些相似部分。\n1）创建应用 springMVCDemo10\n创建应用 springMVCDemo10，并导入 Spring MVC 相关的 JAR 包。\n2）创建自定义异常类\n在 src 目录下创建 exception 包，并在该包中创建自定义异常类 MyException。具体代码如下：\npackage exception;\npublic class MyException extends Exception {\n    private static final long serialVersionUID = 1L;\n    public MyException() {\n        super();\n    }\n    public MyException(String message) {\n        super(message);\n    }\n}\n3）创建 Dao 层\n在 src 目录下创建 dao 包，并在该包中创建 TestExceptionDao 类，在该类中定义 3 个方法，分别抛出“数据库异常”“自定义异常”和“未知异常”。具体代码如下：\npackage dao;\nimport java.sql.SQLException;\nimport org.springframework.stereotype.Repository;\n@Repository("TestExceptionDao")\npublic class TestExceptionDao {\n    public void daodb() throws Exception {\n        throw new SQLException("Dao中数据库异常");\n    }\n    public void daomy() throws Exception {\n        throw new SQLException("Dao中自定义异常");\n    }\n    public void daono() throws Exception {\n        throw new SQLException("Dao中未知异常");\n    }\n}\n4）创建 Service 层\n在 src 目录下创建 service 包，并在该包中创建 TestExceptionService 接口和 TestExceptionServiceImpl 实现类，在该接口中定义 6 个方法，其中有 3 个方法调用 Dao 层中的方法，有 3 个是 Service 层的方法。\n\nService 层的方法是为演示 Service 层的“数据库异常”“自定义异常”和“未知异常”而定义的。\n\nTestExceptionService 接口的代码如下：\npackage service;\npublic interface TestExceptionService {\n    public void servicemy() throws Exception;\n    public void servicedb() throws Exception;\n    public void daomy() throws Exception;\n    public void daodb() throws Exception;\n    public void serviceno() throws Exception;\n    public void daono() throws Exception;\n}\nTestExceptionServiceImpl 实现类的代码如下：\npackage service;\nimport java.sql.SQLException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport dao.TestExceptionDao;\nimport exception.MyException;\n@Service("testExceptionService")\npublic class TestExceptionServiceImpl implements TestExceptionService {\n    @Autowired\n    private TestExceptionDao testExceptionDao;\n    @Override\n    public void servicemy() throws Exception {\n        throw new MyException("Service中自定义异常");\n    }\n    @Override\n    public void servicedb() throws Exception {\n        throw new SQLException("Service中数据库异常");\n    }\n    @Override\n    public void daomy() throws Exception {\n        testExceptionDao.daomy();\n    }\n    @Override\n    public void daodb() throws Exception {\n        testExceptionDao.daodb();\n    }\n    @Override\n    public void serviceno() throws Exception {\n        throw new SQLException("Service中未知异常");\n    }\n    @Override\n    public void daono() throws Exception {\n        testExceptionDao.daono();\n    }\n}\n5）创建控制器类\n在 src 目录下创建 controller 包，并在该包中创建 TestExceptionController 控制器类，代码如下：\npackage controller;\nimport java.sql.SQLException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport service.TestExceptionService;\nimport exception.MyException;\n@Controller\npublic class TestExceptionController {\n    @Autowired\n    private TestExceptionService testExceptionService;\n    @RequestMapping("/db")\n    public void db() throws Exception {\n        throw new SQLException("控制器中数据库异常");\n    }\n    @RequestMapping("/my")\n    public void my() throws Exception {\n        throw new MyException("控制器中自定义异常");\n    }\n    @RequestMapping("/no")\n    public void no() throws Exception {\n        throw new Exception("控制器中未知异常");\n    }\n    @RequestMapping("/servicedb")\n    public void servicedb() throws Exception {\n        testExceptionService.servicedb();\n    }\n    @RequestMapping("/servicemy")\n    public void servicemy() throws Exception {\n        testExceptionService.servicemy();\n    }\n    @RequestMapping("/serviceno")\n    public void serviceno() throws Exception {\n        testExceptionService.serviceno();\n    }\n    @RequestMapping("/daodb")\n    public void daodb() throws Exception {\n        testExceptionService.daodb();\n    }\n    @RequestMapping("/daomy")\n    public void daomy() throws Exception {\n        testExceptionService.daomy();\n    }\n    @RequestMapping("/daono")\n    public void daono() throws Exception {\n        testExceptionService.daono();\n    }\n}\n6）创建 View 层\nView 层中共有 5 个 JSP 页面，下面分别介绍。\n\n测试应用首页面 index.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<%@taglib prefix="spring" uri="http://www.springframework.org/tags"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <h1>所有的演示例子</h1>\n    <h3><a href="${pageContext.request.contextPath }/daodb"> 处理dao中数据库异常</a></h3>\n    <h3><a href="${pageContext.request.contextPath }/daomy"> 处理dao中自定义异常</a></h3>\n    <h3><a href="${pageContext.request.contextPath }/daono"> 处理dao未知错误 </a></h3>\n    <hr>\n    <h3><a href="${pageContext.request.contextPath }/servicedb">处理 service中数据库异常</a></h3>\n    <h3><a href="${pageContext.request.contextPath }/servicemy">处理 service中自定义异常</a></h3>\n    <h3><a href="${pageContext.request.contextPath }/serviceno">处理 service未知错误</a></h3>\n    <hr>\n    <h3><a href="${pageContext.request.contextPath }/db">处理 controller中数据库异常</a></h3>\n    <h3><a href="${pageContext.request.contextPath }/my">处理 controller中自定义异常</a></h3>\n    <h3><a href="${pageContext.request.contextPath }/no">处理 controller未知错误</a></h3>\n    <hr>\n    \x3c!-- 在 web.xml中配置404 --\x3e\n    <h3>\n        <a href="${pageContext.request.contextPath }/404">404 错误</a>\n    </h3>\n</body>\n</html>\n404 错误对应页面 404.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<%@taglib prefix="spring" uri="http://www.springframework.org/tags"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    资源已不在。\n</body>\n</html>\n未知异常对应页面 error.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8" isErrorPage="true"%>\n<%@taglib prefix="spring" uri="http://www.springframework.org/tags"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <H1>未知错误：</H1><%=exception %>\n    <H2>错误内容：</H2>\n    <%\n        exception.printStackTrace(response.getWriter());\n    %>\n</body>\n</html>\n自定义异常对应页面 my-error.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8" isErrorPage="true"%>\n<%@taglib prefix="spring" uri="http://www.springframework.org/tags"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <H1>自定义异常错误：</H1><%=exception %>\n    <H2>错误内容：</H2>\n    <%\n        exception.printStackTrace(response.getWriter());\n    %>\n</body>\n</html>\nSQL 异常对应页面 sql-error.jsp 的代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8" isErrorPage="true"%>\n<%@taglib prefix="spring" uri="http://www.springframework.org/tags"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <H1>数据库异常错误：</H1><%=exception %>\n    <H2>错误内容：</H2>\n    <%\n        exception.printStackTrace(response.getWriter());\n    %>\n</body>\n</html>\n7）web.xml\n对于 Unchecked Exception 而言，由于代码不强制捕获，往往被忽略，如果运行期产生了 Unchecked Exception，而代码中又没有进行相应的捕获和处理，则可能不得不面对 404、500 等服务器内部错误提示页面，所以在 web.xml 文件中添加了全局异常 404 处理。具体代码如下：\n<error-page>\n    <error-code>404</error-code>\n    <location>/WEB-INF/jsp/404.jsp</location>\n</error-page>\n从上述 Dao 层、Service 层以及 Controller 层的代码中可以看出，它们只管通过 throw 和 throws 语句抛出异常，并不处理。下面分别从 3 种方式统一处理这些异常。\n\n由于篇幅有限，分成 3 节对这 3 种方式进行详细讲解，点击下面链接进行阅读：\nSpring MVC使用SimpleMappingExceptionResolver类异常处理\nSpring MVC使用HandlerExceptionResolver接口异常处理\nSpring MVC使用@ExceptionHandler注解异常处理\n\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);