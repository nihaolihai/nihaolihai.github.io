(window.webpackJsonp=window.webpackJsonp||[]).push([[629],{1117:function(n,e,a){"use strict";a.r(e);var s=a(6),t=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-bean的配置及常用属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean的配置及常用属性"}},[this._v("#")]),this._v(" Spring Bean的配置及常用属性")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('作为 Spring 核心机制的依赖注入，改变了传统的编程习惯，对组件的实例化不再由应用程序完成，转而交由 Spring 容器完成，在需要时注入应用程序中，从而对组件之间依赖关系进行了解耦。这一切都离不开 Spring 配置文件中使用的 <bean> 元素。\n\nSpring 容器可以被看作一个大工厂，而 Spring 容器中的 Bean 就相当于该工厂的产品。如果希望这个大工厂能够生产和管理 Bean，这时则需要告诉容器需要哪些 Bean，以及需要以何种方式将这些 Bean 装配到一起。\n\nSpring 配置文件支持两种不同的格式，分别是 XML 文件格式和 Properties 文件格式。\n\n通常情况下，Spring 会以 XML 文件格式作为 Spring 的配置文件，这种配置方式通过 XML 文件注册并管理 Bean 之间的依赖关系。\n\nXML 格式配置文件的根元素是 <beans>，该元素包含了多个 <bean> 子元素，每一个 <bean> 子元素定义了一个 Bean，并描述了该 Bean 如何被装配到 Spring 容器中。\n\n定义 Bean 的示例代码如下所示：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">\n    \x3c!-- 使用id属性定义person1，其对应的实现类为com.mengma.person1 --\x3e\n    <bean id="person1" class="com.mengma.damain.Person1" />\n    \x3c!--使用name属性定义person2，其对应的实现类为com.mengma.domain.Person2--\x3e\n    <bean name="Person2" class="com.mengma.domain.Person2"/>\n</beans>\n在上述代码中，分别使用 id 和 name 属性定义了两个 Bean，并使用 class 元素指定了 Bean 对应的实现类。\n\n<bean> 元素中包含很多属性，其常用属性如表 1 所示。\n\n表 1 <bean>元素的常用属性\n属性名称\t描述\nid\t是一个 Bean 的唯一标识符，Spring 容器对 Bean 的配置和管理都通过该属性完成\nname\tSpring 容器同样可以通过此属性对容器中的 Bean 进行配置和管理，name 属性中可以为 Bean 指定多个名称，每个名称之间用逗号或分号隔开\nclass\t该属性指定了 Bean 的具体实现类，它必须是一个完整的类名，使用类的全限定名\nscope \t用于设定 Bean 实例的作用域，其属性值有 singleton（单例）、prototype（原型）、request、session 和 global Session。其默认值是 singleton\nconstructor-arg\t<bean>元素的子元素，可以使用此元素传入构造参数进行实例化。该元素的 index 属性指定构造参数的序号（从 0 开始），type 属性指定构造参数的类型\nproperty\t<bean>元素的子元素，用于调用 Bean 实例中的 Set 方法完成属性赋值，从而完成依赖注入。该元素的 name 属性指定 Bean 实例中的相应属性名\nref\t<property> 和 <constructor-arg> 等元素的子元索，该元素中的 bean 属性用于指定对 Bean 工厂中某个 Bean 实例的引用\nvalue\t<property> 和 <constractor-arg> 等元素的子元素，用于直接指定一个常量值\nlist\t用于封装 List 或数组类型的依赖注入\nset\t用于封装 Set 类型属性的依赖注入\nmap\t用于封装 Map 类型属性的依赖注入\nentry\t<map> 元素的子元素，用于设置一个键值对。其 key 属性指定字符串类型的键值，ref 或 value 子元素指定其值\n\n')])])])])}),[],!1,null,null,null);e.default=t.exports}}]);