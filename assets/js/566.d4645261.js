(window.webpackJsonp=window.webpackJsonp||[]).push([[566],{1053:function(e,t,r){"use strict";r.r(t);var l=r(6),i=Object(l.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"servlet-第一个filter程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet-第一个filter程序"}},[this._v("#")]),this._v(" servlet 第一个Filter程序")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('1）创建 Servlet\n在 MyEclipse 中创建一个名为 filterDemo01 的 Web 项目，并在项目的 src 下创建一个名为 com.mengma.filter 的包，在该包中创建一个名为 MyServlet 的 Servlet 类，该类用于访问时在浏览器中输出“Hello MyServlet”。MyServlet 类的实现代码如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class MyServlet extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.getWriter().write("Hello MyServlet");\n    }\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doGet(request, response);\n    }\n}\n2）创建 Filter 类\n右击 com.mengma.filter 包，然后选择 New→Other...，在弹出窗口中的 Web 文件夹下找到 Filter，单击 Next 按钮，在新窗口的 Class name 文本框中填写所创建的 Filter，单击 Next 按钮进入 Filter 映射信息的配置窗口，如图 1 所示。\n创建一个Filter\n图 1  创建一个 Filter\n\n在图 1 中，单击 Filter Mappings 窗口中的 /MyFilter，然后单击右侧的 Edit 按钮，在弹出窗口中的 Pattern 文本框中将 /MyFilter 更改为 /MyServlet（/MyFilter 是默认拦截的 URL，/MyServlet 是需要拦截的 URL，这里指 MyServlet 类）。\n\n依次单击 OK 和 Finish 按钮即可完成 Filter 类的创建。创建后的 MyFilter 类的主要代码如下所示。\npackage com.mengma.filter;\nimport java.io.IOException;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.annotation.WebFilter;\n@WebFilter("/MyServlet")\npublic class MyFilter implements Filter {\n    public MyFilter() {\n    }\n    public void destroy() {\n    }\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n        chain.doFilter(request, response);\n    }\n    public void init(FilterConfig fConfig) throws ServletException {\n    }\n}\n在上述代码中，MyFilter() 是 MyFilter 类默认的构造方法，其他三个方法是 Filter 接口中的方法。在 doFilter() 方法中，chain.doFilter（request，response）用于过滤处理，表示将请求向下传递。\n\n使用 MyEclipse 创建过滤器类后，需在 web.xml 中创建过滤器信息，代码如下：\n<filter>\n    <filter-name>MyFilter</filter-name>\n    <filter-class>com.mengma.filter.MyFilter</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>MyFilter</filter-name>\n    <url-pattern>/MyServlet</url-pattern>\n</filter-mapping>\n在上述代码中，设置了过滤器对 /MyServlet 请求资源进行拦截，将在请求到达 MyServlet 程序前执行 MyFilter 程序。过滤器的配置信息中包含多个元素，这些元素分别具有不同的作用。\n<filter> 根元素用于注册一个 Filter。\n<filter-name> 子元素用于设置 Filter 名称。\n<filter-class> 子元素用于设置 Filter 类的完整名称。\n<filter-mapping> 根元素用于设置一个过滤器所拦截的资源。\n<filter-name> 子元素必须与 <filter> 中的 <filter-name> 子元素相同。\n<url-pattern> 子元素用于匹配用户请求的 URL，例如 /MyServlet，这个 URL 还可以使用通配符*表示，例如 *.do 适用于所有以 .do 结尾的 Servlet 路径。\n3）修改 Filter\n为了演示 Filter 的拦截效果，对 MyFilter 类中的 doFilter() 方法进行修改，修改后的代码如下：\npublic void doFilter(ServletRequest request, ServletResponse response,\n        FilterChain chain) throws IOException, ServletException {\n    PrintWriter out = response.getWriter();\n    out.write("Hello MyFilter");\n}\n4）运行项目并查看结果\n启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/filterDemo01/MyServlet 访问 MyServlet\n\n')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);