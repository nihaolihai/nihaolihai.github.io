(window.webpackJsonp=window.webpackJsonp||[]).push([[621],{1116:function(n,a,t){"use strict";t.r(a);var r=t(6),o=Object(r.a)({},(function(){var n=this.$createElement,a=this._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[a("h2",{attrs:{id:"spring声明式事务管理-基于annotation注解方式实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring声明式事务管理-基于annotation注解方式实现"}},[this._v("#")]),this._v(" Spring声明式事务管理（基于Annotation注解方式实现）")]),this._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[this._v('在 Spring 中，除了使用基于 XML 的方式可以实现声明式事务管理以外，还可以通过 Annotation 注解的方式实现声明式事务管理。\n\n使用 Annotation 的方式非常简单，只需要在项目中做两件事，具体如下。\n1）在 Spring 容器中注册驱动，代码如下所示：\n<tx:annotation-driven transaction-manager="txManager"/>\n\n2）在需要使用事务的业务类或者方法中添加注解 @Transactional，并配置 @Transactional 的参数\n\n1. 注册驱动\n修改 Spring 配置文件 applicationContext.xml，修改后如下所示。\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xmlns:tx="http://www.springframework.org/schema/tx"\n    xmlns:aop="http://www.springframework.org/schema/aop"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/tx\n            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n            http://www.springframework.org/schema/aop\n            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">\n    \x3c!-- 加载properties文件 --\x3e\n    <context:property-placeholder location="classpath:c3p0-db.properties" />\n    \x3c!-- 配置数据源，读取properties文件信息 --\x3e\n    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">\n        <property name="driverClass" value="${jdbc.driverClass}" />\n        <property name="jdbcUrl" value="${jdbc.jdbcUrl}" />\n        <property name="user" value="${jdbc.user}" />\n        <property name="password" value="${jdbc.password}" />\n    </bean>\n    \x3c!-- 配置jdbc模板 --\x3e\n    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">\n        <property name="dataSource" ref="dataSource" />\n    </bean>\n    \x3c!-- 配置dao --\x3e\n    <bean id="accountDao" class="com.mengma.dao.impl.AccountDaoImpl">\n        <property name="jdbcTemplate" ref="jdbcTemplate" />\n    </bean>\n    \x3c!-- 配置service --\x3e\n    <bean id="accountService" class="com.mengma.service.impl.AccountServiceImpl">\n        <property name="accountDao" ref="accountDao" />\n    </bean>\n    \x3c!-- 事务管理器，依赖于数据源 --\x3e\n    <bean id="txManager"\n        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\n        <property name="dataSource" ref="dataSource" />\n    </bean>\n    \x3c!-- 注册事务管理驱动 --\x3e\n    <tx:annotation-driven transaction-manager="txManager"/>\n</beans>\n\n上述代码中可以看出，与原来的配置文件相比，这里只修改了事务管理器部分，新添加并注册了事务管理器的驱动。\n\n需要注意的是，在学习 AOP 注解方式开发时，需要在配置文件中开启注解处理器，指定扫描哪些包下的注解，这里没有开启注解处理器是因为在第 33～35 行手动配置了 AccountServiceImpl，而 @Transactional 注解就配置在该类中，所以会直接生效。\n2. 添加 @Transactional 注解\n修改 AccountServiceImpl，在文件中添加 @Transactional 注解及参数，添加后如下所示。\n纯文本复制\npackage com.mengma.service.impl;\nimport org.springframework.transaction.annotation.Isolation;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\nimport com.mengma.dao.AccountDao;\n@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, readOnly = false)\npublic class AccountServiceImpl {\n    private AccountDao accountDao;\n    public void setAccountDao(AccountDao accountDao) {\n        this.accountDao = accountDao;\n    }\n    public void transfer(String outUser, String inUser, int money) {\n        this.accountDao.out(outUser, money);\n        // 模拟断电\n        int i = 1 / 0;\n        this.accountDao.in(inUser, money);\n    }\n}\n需要注意的是，在使用 @Transactional 注解时，参数之间用“，”进行分隔。\n\n')])])])])}),[],!1,null,null,null);a.default=o.exports}}]);