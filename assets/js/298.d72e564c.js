(window.webpackJsonp=window.webpackJsonp||[]).push([[298],{787:function(e,n,r){"use strict";r.r(n);var t=r(6),o=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"使用springboot快速构建web-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用springboot快速构建web-api"}},[this._v("#")]),this._v(" 使用SpringBoot快速构建Web API")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('Dubbo 框架现在在国内的中小企业当中已经成为 Java 生态下服务化的事实标准，出现这种状态的原因很多，比如 Dubbo 框架设计优秀、文档和资料丰富、配置灵活、特性丰富等，但最主要的，我认为是 Java 开发人员对速度这一因素的痴迷。\n\n不可否认，Dubbo 框架设计和实现之初就将其自身定位为一款基于 TCP 长连接通信的高性能服务治理框架，但是，对于很多中小企业来说，不管从速度还是并发度，根本就没有到非要使用像 Dubbo 这样基于 TCP 长连接服务框架的程度。\n\n笔者认为，不分场景和现状盲目选型 Dubbo 框架，或许就是 Dubbo 框架成为 java 生态下服务治理框架事实标准的原因。\n\nDubbo 框架虽然有很多优点，也确实面向高强度的互联网应用场景，且在多家知名的互联网企业的生产环境得到验证，但也并非没有缺点：\n只限于 Java 应用之间的服务调用。\n服务访问方需要依赖 API 以及关联依赖，在很多场景下导致依赖管理混乱的问题。\n核心项目人员转岗或者离职之后，项目不再有人专职投入维护和升级，虽然功能够用，但任何一个开源项目无推动者，无活跃社区的情况下，其生命走向只有一个，而这几乎是国内开源项目的共同宿命。\n\n作为一名理性的研发人员，在项目技术选型的时候，需要综合考虑多种方案的优缺点，并根据现状进行权衡，实际上，对于大部分项目来说，性能可能并非技术选型的核心因素，开放和互通或许才是。\n\n是要以互通性作为核心因素进行技术选型并构建一套开放繁荣的生态体系，还是以性能为核心因素进行技术选型构建一套封闭高效的生态体系，需要大家灵活把握，而本节我们将更多以 Web API 的形式，向大家展示如何基于 SpringBoot 构建一套开放、互通、稳定的 Web API 微服务体系。\n\n使用 SpringBoot 构建 Web API 有几种选择，要么使用 spring-boot-starter-jersey 构建 RESTful 风格的 Web API，要么选择 spring-boot-starter-hateoas 构建更加有关联性和相对“智能”的 Web API，但笔者认为这些都有点儿“阳春白雪”。\n\n对于大部分开发人员来说，HTTP 协议的 GET 和 POST 是直觉上最自然的选择，所以，我们选择使用最“下里巴人”的方式来构建 Web API。\n\nWeb API 强调统一和互通，所以，首先我们需要定义一套内外认知一致的 Web API 开发和访问规范，在 JSON 盛行、社群庞大的背景下，我们的 Web API 方案采用 JSON 作为数据交互格式并定义统一的协议格式，然后通过 HTTP 以及周边支持完成微服务的对外服务和开放访问。\n1. 定义 Web API 规范\n首先从服务访问的交互上来说，我们可以选择较为纯粹的 JSON RPC Over HTTP 的方式，如图 1 所示。\nJSON RPC Over HTTP示意图\n图 1  JSON RPC Over HTTP 示意图\n\n也可以选择约束相对松一些的 RPC Over HTTP 方式，如图 2 所示。\n一般意义上基于HTTP的RPC交互示意图\n图 2  一般意义上基于HTTP的RPC交互示意图\n\n相对于纯粹的 JSON RPC Over HTTP 方案，后者对请求格式不做任何限制（所以也同样支持纯粹 JSON 形式的请求格式），只对响应（Response）做 JSON 格式上的统一规定。\n\n好处是，客户端各种工具都能够很好的支持，服务器端 SpringMVC 也可以少做 HttpMessage 转换，给服务的开发者和访问者都提供了比较灵活的操作余地，至于请求的类型差异，我们可以通过配套生成的 API 文档进行补足。\n\n不管怎么样，我们选择基于后一种方案进行说明，现在剩下的主要工作就是定义服务响应格式，只有规范和统一了服务的响应格式，才能让内部和外部的服务访问者形成统一的认知。\n\n以上面同样的方式“复制”对我们提供的任何 Web API 的访问行为，减少用户的接入成本，所以，姑且我们简单规定一个服务的响应格式如下：\n{ "code" : 1, "error" : "XXXXX", "data" : { ... }}\n\n其中，code 表示调用结果的状态，0 表示成功，非 0 表示失败，并且失败情况下 error 字段将提供对应的错误信息描述，data 字段用于规范定义特定于 Web API 的响应内容。\n\n有了这样的规范定义，不同的开发者就可以根据情况选择打造对应的工具或者 SDK 了。而 Web API 的服务提供者也同样可以根据该规范考虑如何简化 Web API 的开发，或者通过约束减少规范认知不足可能导致的问题。\n\n既然是使用 SpringBoot 构建 Web API，那么显然我们现在更加关注后者。\n2. 根据规范构建 Web API\n针对同样的汇率查询服务，这回我们采用 Web API 的形式对外提供服务。\n\n使用 http://start.spring.io 构建新的 SpringBoot 项目，使其依赖 spring-boot-starter-web 模块：\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.keevol.springboot.chapter4</groupId>\n    <artifactId>currency-webapi</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>currency-webapi</name>\n    <description>Demo project for Spring Boot</description>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.3.1.RELEASE</version>\n        <relativePath /> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.keevol.springboot</groupId>\n            <artifactId>currency-rates-service</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n因为我们已经实现了 CurrencyRateService，所以，可以直接将其作为项目依赖的一部分（当然，这样也让我们的 Web API 看起来更像一个适配网关了）。\n\n我们直接使用 SpringMVC 构建对应的 Controller 对外提供 Web API 的访问如下：\n@Controller\npublic class CurrencyRateQueryController {\n    @Autowired\n    private CurrencyRateService currencyRateService;\n    @RequestMapping(value = "/", method = RequestMethod.GET)\n    @ResponseBody\n    public ExchangeRate quote(String symbol) throws IOException {\n        return currencyRateService.quote(CurrencyPair.from(symbol));\n    }\n}\nspring-boot-starter-web 默认会提供一系列的 HttpMessageConverter 用于对请求参数和响应结果做类型转换。所以，ExchangeRate 类型将通过默认 HttpMessageConverter 序列中的 MappingJackson2HttpMessageConverter 转换成对应的 JSON 响应结果，类似于：\n{ currencyPair: { symbol: “USD/CNY” }, bidPrice: 6.67, askPrice: 6.56} \n\n整个 Web API 的功能流程算是跑通了，但跟我们之前定义的 Web API 规范却没有关系，所以，下一步我们要做的事情就是在此基础上规范 HTTP 响应格式，使其遵循我们之前定义的 Web API 规范，从而任何访问我们提供的 Web API 访问者都可以相同的认知使用这些 Web API，进而也可以打造和沉淀相应的工具或者类库。\n\n我们定义的 Web API 规范并非最优，也并非必要，如果团队成员的认知差不多，那么直接使用 HTTP Status Code 结合直接的值类型响应就可以了，我们给出的 Web API 规范考虑了更多因素后做出的一个折中方案，但任何方案设计是否完美并非最主要的，执行才是。\n\n要开发符合我们的 Web API 规范的 Web API，最少有两种方案可以选择：\n显式的强类型封装方式（explicit type wrapper）\n隐式的自动转换方式（implicit conversion）\n\n显式的强类型封装方式的出发点是说，既然 spring-boot-starter-web 已经提供了 MappingJackson2HttpMessageConverter 用于对象类型到 JSON 的类型转换，那么，我们只要提供针对 Web API 规范的 Java 对象类型作为所有 Web API 处理方法的返回值就可以了，比如：\npublic class WebApiResponse<T> {\n    public static final int SUCCESS_CODE = 0;\n    public static final int ERROR_CODE = 1;\n    private int code;\n    private String error;\n    private T data;\n    // getters, setters, toString(), etc.\n}\n然后，所有的 Web API 的处理方法统一定义为返回 WebApiResponse 作为结果类型：\n@RequestMapping(value = "/", method = RequestMethod.GET)\n@ResponseBody\npublic WebApiResponse<ExchangeRate> quote(String symbol) throws IOException {\n    WebApiResponse<ExchangeRate> response = new WebApiResponse<>();\n    response.setCode(WebApiResponse.SUCCESS_CODE);\n    response.setData(currencyRateService.quote(CurrencyPair.from(symbol)));\n    return response;\n}\n不过，这种模式过于强调规范的管控，对开发者来说不是太友好，即使我们通过 Builder 模式来简化 WebApiResponse 的构造过程，比如：\npublic class WebApiResponse<T> {\n    public static final int SUCCESS_CODE = 0;\n    public static final int ERROR_CODE = 1;\n    private int code;\n    private String error;\n    private T data;\n    public static <T> WebApiResponse<T> success(T data) {\n        WebApiResponse<T> response = new WebApiResponse<>();\n        response.setCode(SUCCESS_CODE);\n        response.setData(data);\n        return response;\n    }\n    public static <T> WebApiResponse<T> error(String errorMessage) {\n        return WebApiResponse.<T>error(errorMessage, ERROR_CODE);\n    }\n    // ...\n    @RequestMapping(value = "/", method = RequestMethod.GET)\n    @ResponseBody\n    public WebApiResponse<ExchangeRate> quote(String symbol) throws IOException {\n        return WebApiResponse.success(currencyRateService.quote(CurrencyPair.from(symbol)));\n    }\n}\n但从 API 的使用者角度来看，这种设计并非最优，最好的方式其实应该是隐式的自动转换方式。在隐式的自动转换方式下，用户的 Web API 处理方法定义保持不变，直接返回最原始的值类型（比如 ExchangeRate）：\n@RequestMapping(value = "/", method = RequestMethod.GET)\n@ResponseBody\npublic ExchangeRate quote(String symbol) throws IOException {\n    return currencyRateService.quote(CurrencyPair.from(symbol));\n}\n通过在框架层面对原始的值类型进行符合规范行为的封装，最终返回给用户的响应结果“自动”的或者说以“不打扰 API 开发者”的形式变成了符合我们 Web API 规范的响应结果形式。\n\n要达到隐式的自动转换方式的效果，最简单粗暴的做法就是完全覆盖 Web 应用的配置，只配置一个自定义处理 JSON 转换的 HttpMessageConverter 实现，比如：\npublic class JsonHttpMessageConverter extends AbstractHttpMessage-Converter<Object> {\n    @Override\n    protected boolean supports(Class<?> clazz) {\n        return !clazz.isPrimitive();\n    }\n    @Override\n    protected Object readInternal(Class<?> aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException {\n        return null;\n    }\n    @Override\n    protected void writeInternal(Object o, HttpOutputMessage httpOutputMessage) throws IOException, HttpMessageNotWritableException {\n        httpOutputMessage.getHeaders().add("Content-Type", "application/json");\n        // 其他header设置\n        // toJson()方法中可以使用jackson或者fastjson等类库完成对象到json的转换\n        httpOutputMessage.getBody().write(toJson(o));\n        httpOutputMessage.getBody().flush();\n    }\n}\n但是，这会导致一些问题或者不便：\n1）打破了 SpringBoot 对 SpringMVC 的完备支持，对于大部分已经很熟悉 SpringMVC 框架中各种功能和类库使用的读者来说，这些可能不再有效；\n\n2）SpringBoot 提供的 spring-boot-starter-web 模块的默认配置项都不再有效，比如 SpringBoot 参考文档中的 spring.jackson.serialization.indent_output=true 之类的配置项，这显然是在舍弃已有的良好文档和功能支持；\n\n3）因为现在只有一个 HttpMessageConverter 处理单一类型的 Web 请求和响应，如果同一项目中有类似视图渲染的需求，则无法满足需求。\n\n所以，为了能够不打破开发者对 SpringMVC 框架以及 SpringBoot 提供的 Web 应用各项功能支持的认知，最稳妥的做法是，在 SpringBoot 原有 Web 应用默认配置的基础上增加新的 HttpMessageConverter，专门处理 Web API 响应结果使其符合我们的 Web API 规范形式。\n\n要达到这个目的，我们可以提供自定义的配置：\n@Configuration\npublic class WebApiConfiguration extends WebMvcConfigurerAdapter {\n    @Override\n    public void extendMessageConverters(List<HttpMessageConvert-er<?>> converters) {\n        // 添加或者插入我们自定义的HttpMessageConverter实现类\n        // converters.add(converter)或者converters.add(0, converter)\n    }\n}\nextendMessageConverters 属于已经添加过默认 HttpMessageConverter 序列的参数（比如针对 String 的 HttpMessageConverter，或者针对 byte[] 的 Http-MessageConverter 等），所以，我们只要在其基础上添加或者插入我们的 HttpMessageConverter 实现类就可以了。\n\n不过，这里有一个比较尴尬的地方，这可能也是 Spring 框架多处设计中都存在的尴尬，即循环条件判断应用哪个类的时候，条件判断 API 开放不足：\nfor(HttpMessageConverter converter: converters){\n    if(converter.canWrite(clazz, media)) {\n        converter.write(..);\n    }\n}\n在 HttpMessageConverter 的场景中就是，我们只能根据目标对象的类型以及 mediaType 来判断是否应该使用当前这个 HttpMessageConverter，如果需要在这两种判断条件都相同的情况下，还要根据其他条件来判定是否应该使用当前 HttpMessageConverter，此时这种设计显然就无法满足需求了。尴尬之处就在于此。\n\n对于我们的 Web API 规范这个实现场景来说，如果想继续享受原有的 MappingJackson2HttpMessageConverter 提供的功能和配置，就不得不继承并覆写（Override）相应方法，而不是略过 MappingJackson2HttpMessageConverter，然后在另一个 HttpMessageConverter 中只是必要的时候引用它（组合优于继承）。\n\n不管怎么样，我们推荐使用隐式的自动转换方式为用户提供透明的 Web API 规范行为。\n3. Web API 的短板和补足\n相对于 Dubbo 这种强类型的服务框架，Web API 有强类型支持（Not Typesafe），在开发过程中，自然也无法享受到像 IDE 自动提示之类的功能，所以，对于 Web API 的使用者来说，需要与 Web API 的提供者沟通之后才能知道如何访问 Web API 的详细信息，比如应该传哪些参数，返回的响应结果又应该是什么格式的。\n\n为了缓解这个问题，我们可以使用自动根据代码元信息生成 API 文档的方式来补足这块短板，像 Swagger 这样的项目，已经是比较成熟的 API 文档方案了。\n\n不过，让每一个 Web API 项目都自己去初始化 API 文档相关的设置显然并不是很好的用户体验，为了服务到位，我们可以遵循 SpringBoot 的行事风格，新建一个 spring-boot-starter-webapi 这样的自动配置模块，其提供的主要特性包括但不限于：\n提供针对我们 Web API 规范的功能支持，即提供显式的强类型封装方式或者隐式的自动转换方式的功能实现。\n提供 API 文档相关功能的配置和设置。\n提供统一的 Web API 访问错误处理逻辑。\n\n这样，任何 Web API 的开发者和提供者只要新建 SpringBoot 应用，然后依赖 spring-boot-starter-webapi，就可以自动享有以上所有特性支持了。\n\n以下是一个 spring-boot-starter-webapi 原型项目的 pom.xml 定义：\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starters</artifactId>\n        <version>1.2.5.RELEASE</version>\n    </parent>\n    <groupId>com.keevol.springboot</groupId>\n    <artifactId>spring-boot-starter-webapi</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>spring-boot-starter-webapi</name>\n    <url></url>\n    <properties>\n        <java.version>1.8</java.version>\n        <file.encoding>UTF-8</file.encoding>\n    </properties>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.2</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>${file.encoding}</encoding>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>${servlet-api.version}</version>\n        </dependency>\n    </dependencies>\n</project>\n以及对应的 JavaConfig 配置类示例：\n@Configuration\n@EnableSwagger2\n@ComponentScan("com.wacai.springboot.webapi.errors")\n@AutoConfigureAfter(WebMvcAutoConfiguration.class)\npublic class WebApiAutoConfiguration extends WebMvcConfigurerAdapter {\n    protected Logger logger = LoggerFactory.getLogger(WebApiAuto - Configuration.class);\n    @Value("${springfox.api.group:[your api group name]}")\n    private String apiGroupName;\n    @Value("${springfox.api.title:[set a api title via \'springfox.api.title\']}")\n    private String title;\n    @Value("${springfox.api.description:[add your api description via \'springfox.api.description\'}]")\n    private String desc;\n    @Value("${springfox.api.version:[set specific api version via \'springfox.api.version\'}]")\n    private String version;\n    @Value("${springfox.api.termsOfServiceUrl:[set termsOf-ServiceUrl via \'springfox.api.termsOfServiceUrl\']}")\n    private String termsOfServiceUrl;\n    @Value("${springfox.api.contact:[set contact via \'springfox.api.contact\'}]")\n    private String contact;\n    @Value("${springfox.api.license:Your WebAPI License}")\n    private String license;\n    @Value("${springfox.api.licenseUrl:http://keevol.com}")\n    private String licenseUrl;\n    @Autowired\n    private TypeResolver typeResolver;\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2).groupName(apiGroupName)\n                .apiInfo(new ApiInfo(title, desc, version, termsOf - ServiceUrl, contact, license, licenseUrl)).select()\n                .apis(RequestHandlerSelectors.any()).paths(excludedPathSelector()).build().pathMapping("/")\n                .directModelSubstitute(Date.class, String.class).genericModelSubstitutes(ResponseEntity.class)\n                .alternateTypeRules(newRule(\n                        typeResolver.resolve(DeferredResult.class,\n                                typeResolver.resolve(ResponseEntity.class, WildcardType.class)),\n                        typeResolver.resolve(WildcardType.class)))\n                .useDefaultResponseMessages(false)\n                .globalResponseMessage(RequestMethod.GET, newArrayList(new ResponseMessageBuilder().code(500)\n                        .message("服务出错啦~").responseModel(new ModelRef("Error")).build()))\n                .forCodeGeneration(true);\n    }\n    // ...\n}\n关于如何将 WebApiAutoConfiguration 配置到 META-INF/spring.factories 并发布项目则不再赘述。有了 spring-boot-starter-webapi 之后，Web API 形式的微服务开发者所要做的仅仅是把它加为项目依赖：\n<dependency>\n    <groupId>com.keevol.springboot</groupId>\n    <artifactId>spring-boot-starter-webapi</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n</dependency>\n然后像往常那样写 SpringMVC 的 @Controller 或者 @RestController 就可以了，现在，我们可以直接享受 API 文档的自动生成。\n\n')])])])])}),[],!1,null,null,null);n.default=o.exports}}]);