(window.webpackJsonp=window.webpackJsonp||[]).push([[461],{949:function(n,t,e){"use strict";e.r(t);var o=e(6),a=Object(o.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"swing-工具栏组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swing-工具栏组件"}},[this._v("#")]),this._v(" swing 工具栏组件")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\n工具栏提供了一个用来显示常用按钮和操作的组件。它可以把任意类型的组件附加到工具条上，但是通常是增加按钮。工具栏 JToolBar 类的常用构造方法如表 1 所示。\n表1 JToolBar类的常用构造方法\n构造方法\t说明\nJToolBar()\t创建新的工具栏，默认的方向为 HORIZONTAL\nJToolBar(int orientation)\t创建具有指定 orientation 的新工具栏\nJToolBar(String name)\t创建一个具有指定 name 的新工具栏\nJToolBar(String name,int orientation)\t创建一个具有指定 name 和 orientation 的新工具栏\n与 JMenuBar 不一样，JToolBar 对象可以直接被添加到容器中。JTodBar 类的常用方法如表 2 所示。\n\n表2 JToolBar类的常用方法\n方法名称\t说明\nadd(Action a)\t添加一个指派动作的新的 JButton\naddSeparator()\t将默认大小的分隔符添加到工具栏的末尾\naddSeparator(Dimension size)\t将指定大小的分隔符添加到工具栏的末尾\ngetComponentAtIndex(int i)\t返回指定索引位置的组件\ngetComponentIndex(Component c)\t返回指定组件的索引\ngetMargin()\t返回工具栏边框和它的按钮之间的空白\ngetOrientation()\t返回工具栏的当前方向\nisFloatable()\t获取 floatable 属性\nisRollover()\t返回 rollover 状态\nsetBorderPainted(boolean b)\t设置 borderPainted 属性，如果需要绘制边框，则此属性为 true\nsetFloatable(boolean b)\t设置 floatable 属性，如果要移动工具栏，此属性必须设置为 true\nsetLayout(LayoutManager mgr)\t设置此容器的布局管理器\nsetMargin(Insets m)\t设置工具栏边框和它的按钮之间的空白\nsetOrientation(int o)\t设置工具栏的方向\nsetRollover(boolean rollover)\t设置此工具栏的 rollover 状态\n例 1\n下面通过实例来说明如何使用 JToolBar 创建工具栏，在该实例中给工具栏上的按钮添加了图片，当图片不存在时使用文字代替。主要实现步骤如下所示。\n\n(1) 创建一个 ToolBarDemo 类，继承 JPanel 父类并实现 ActionListener 接口。\npackage ch18;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JToolBar;\npublic class ToolBarDemo extends JPanel implements ActionListener\n{\n    protected JTextArea textArea;\n    protected String newline="\\n";\n    static final private String OPEN="OPEN";\n    static final private String SAVE="SAVE";\n    static final private String NEW="NEW";   \n    //事件监听器部分的代码省略，请查阅源文件\n    protected void displayResult(String actionDescription)\n    {\n        textArea.append(actionDescription+newline);\n    }\n    public static void main(String[] args)\n    {\n        JFrame.setDefaultLookAndFeelDecorated(true);\n        //定义窗体\n        JFrame frame=new JFrame("工具栏");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        //定义面板\n        ToolBarDemo newContentPane=new ToolBarDemo();\n        newContentPane.setOpaque(true);\n        frame.setContentPane(newContentPane);\n        //显示窗体\n        frame.pack();\n        frame.setVisible(true);\n    }\n    @Override\n    public void actionPerformed(ActionEvent e)\n    {\n        // TODO 自动生成的方法存根\n    }\n}\n\n(2) 在构造方法中对工具栏进行设置，主要代码如下所示。\npublic ToolBarDemo()\n{\n    super(new BorderLayout());\n    //创建工具栏\n    JToolBar toolBar=new JToolBar();\n    addButtons(toolBar);\n    //创建一个文本域，用来输出一些信息\n    textArea=new JTextArea(15, 30);\n    textArea.setEditable(false);\n    JScrollPane scrollPane=new JScrollPane(textArea);\n    //把组件添加到面板中\n    setPreferredSize(new Dimension(450, 110));\n    add(toolBar,BorderLayout.PAGE_START);\n    add(scrollPane,BorderLayout.CENTER);\n}\n\n(3) 构造方法中创建了一个工具栏 toolBar，然后调用 addButtons() 方法为工具栏设置按钮。addButtons() 方法的代码如下：\nprotected void addButtons(JToolBar toolBar)\n{\n    JButton button=null;\n    button=makeNavigationButton("new1",NEW,"新建一个文件","新建");\n    toolBar.add(button);\n    button=makeNavigationButton("open1",OPEN,"打开一个文件","打开");\n    toolBar.add(button);\n    button=makeNavigationButton("save1",SAVE,"保存当前文件","保存");\n    toolBar.add(button);\n}\n\n(4) 在 addButtons() 方法中调用 makeNavigationButton() 方法，实现对工具栏上的按钮指定图片、动作指令、提示信息和无图片时的文本。具体实现代码如下：\n纯文本复制\nprotected JButton makeNavigationButton(String imageName,String actionCommand,String toolTipText,String altText)\n{\n    //搜索图片\n    String imgLocation=imageName+".jpg";\n    URL imageURL=ToolBarDemo.class.getResource(imgLocation);\n    //初始化工具按钮\n    JButton button=new JButton();\n    //设置按钮的命令\n    button.setActionCommand(actionCommand);\n    //设置提示信息\n    button.setToolTipText(toolTipText);\n    button.addActionListener(this);\n    if(imageURL!=null)\n    {\n        //找到图像\n        button.setIcon(new ImageIcon(imageURL));\n    }\n    else\n    {\n        //没有图像\n        button.setText(altText);\n        System.err.println("Resource not found: "+imgLocation);\n    }\n    return button;\n}\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);