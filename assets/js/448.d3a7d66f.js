(window.webpackJsonp=window.webpackJsonp||[]).push([[448],{936:function(e,r,n){"use strict";n.r(r);var s=n(6),t=Object(s.a)({},(function(){var e=this.$createElement,r=this._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[r("h2",{attrs:{id:"spring-mvc应用-autowired和-service进行依赖注入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc应用-autowired和-service进行依赖注入"}},[this._v("#")]),this._v(" Spring MVC应用@Autowired和@Service进行依赖注入")]),this._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('在前面学习的控制器中并没有体现 MVC 的 M 层，这是因为控制器既充当 C 层又充当 M 层。这样设计程序的系统结构很不合理，应该将 M 层从控制器中分离出来。\n\nSpring MVC 框架本身就是一个非常优秀的 MVC 框架，它具有依赖注入的优点，可以通过 org.springframework.beans.factory. annotation.Autowired 注解类型将依赖注入到一个属性（成员变量）或方法，例如：\n@Autowired\npublic UserService userService;\n\n在 Spring MVC 中，为了能被作为依赖注入，类必须使用 org.springframework.stereotype.Service 注解类型注明为 @Service（一个服务）。另外，还需要在配置文件中使用 <context：component-scan base-package=“基本包”/> 元素来扫描依赖基本包。\n\n下面《Spring MVC获取参数的几种常见方式》中“登录”和“注册”的业务逻辑处理分离出来，使用 Service 层实现。\n\n首先创建 service 包，在该包中创建 UserService 接口和 UserServiceImpl 实现类。\n\nUserService 接口的具体代码如下：\npackage service;\nimport pojo.UserForm;\npublic interface UserService {\n    boolean login(UserForm user);\n    boolean register(UserForm user);\n}\nUserServiceImpl 实现类的具体代码如下：\npackage service;\nimport org.springframework.stereotype.Service;\nimport pojo.UserForm;\n//注解为一个服务\n@Service\npublic class UserServiceImpl implements UserService {\n    public boolean login(UserForm user) {\n        if ("zhangsan".equals(user.getUname())\n                && "123456".equals(user.getUpass())) {\n            return true;\n        }\n        return false;\n    }\n    public boolean register(UserForm user) {\n        if ("zhangsan".equals(user.getUname())\n                && "123456".equals(user.getUpass())) {\n            return true;\n        }\n        return false;\n    }\n}\n然后在配置文件中添加一个 <context：component-scan base-package=“基本包”/>元素，具体代码如下：\n<context:component-scan base-package="service" />\n\n最后修改控制器类 UserController，具体代码如下：\n纯文本复制\npackage controller;\nimport javax.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport pojo.UserForm;\nimport service.UserService;\nimport com.sun.org.apache.commons.logging.Log;\nimport com.sun.org.apache.commons.logging.LogFactory;\n@Controller\n@RequestMapping("/user")\npublic class UserController {\n    // 得到一个用来记录日志的对象，这样在打印信息的时候能够标记打印的是哪个类的信息\n    private static final Log logger = LogFactory.getLog(UserController.class);\n    // 将服务依赖注入到属性userService\n    @Autowired\n    public UserService userService;\n    /**\n     * 处理登录\n     */\n    @RequestMapping("/login")\n    public String login(UserForm user, HttpSession session, Model model) {\n        if (userService.login(user)) {\n            session.setAttribute("u", user);\n            logger.info("成功");\n            return "main"; // 登录成功，跳转到 main.jsp\n        } else {\n            logger.info("失败");\n            model.addAttribute("messageError", "用户名或密码错误");\n            return "login";\n        }\n    }\n    /**\n     * 处理注册\n     */\n    @RequestMapping("/register")\n    public String register(@ModelAttribute("user") UserForm user) {\n        if (userService.register(user)) {\n            logger.info("成功");\n            return "login"; // 注册成功，跳转到 login.jsp\n        } else {\n            logger.info("失败");\n            // 使用@ModelAttribute("user")与model.addAttribute("user",user)的功能相同\n            // 在register.jsp页面上可以使用EL表达式${user.uname}取出ModelAttribute的uname值\n            return "register"; // 返回register.jsp\n        }\n    }\n}\n\n')])])])])}),[],!1,null,null,null);r.default=t.exports}}]);