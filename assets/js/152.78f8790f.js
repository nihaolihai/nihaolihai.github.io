(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{641:function(n,o,e){"use strict";e.r(o);var t=e(6),s=Object(t.a)({},(function(){var n=this,o=n.$createElement,e=n._self._c||o;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"java-object-clone-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-object-clone-方法"}},[n._v("#")]),n._v(" Java Object clone() 方法")]),n._v(" "),e("p",[n._v("Object clone() 方法用于创建并返回一个对象的拷贝。")]),n._v(" "),e("p",[n._v("clone 方法是浅拷贝，对象内属性引用的对象只会拷贝引用地址，而不会将引用的对象重新分配内存，相对应的深拷贝则会连引用的对象也重新创建。")]),n._v(" "),e("p",[n._v("语法\nobject.clone()\n参数\n无 。")]),n._v(" "),e("p",[n._v("返回值\n返回一个对象的拷贝。")]),n._v(" "),e("p",[n._v("由于 Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。")]),n._v(" "),e("p",[n._v("实例\n以下实例创建了 obj1 对象，然后拷贝 obj1 给 obj2，通过 obj2 输出变量的值：")]),n._v(" "),e("p",[n._v("实例\nclass RunoobTest implements Cloneable {")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('// 声明变量\nString name;\nint likes;\n\npublic static void main(String[] args) {\n\n    // 创建对象\n    RunoobTest obj1 = new RunoobTest();\n\n    // 初始化变量\n    obj1.name = "Runoob";\n    obj1.likes = 111;\n\n    // 打印输出\n    System.out.println(obj1.name); // Runoob\n    System.out.println(obj1.likes); // 111\n\n    try {\n\n        // 创建 obj1 的拷贝\n        RunoobTest obj2 = (RunoobTest) obj1.clone();\n\n        // 使用 obj2 输出变量\n        System.out.println(obj2.name); // Runoob\n        System.out.println(obj2.likes); // 111\n    } catch (Exception e) {\n        System.out.println(e);\n    }\n\n}\n')])])]),e("p",[n._v("}\n以上程序执行结果为：")]),n._v(" "),e("p",[n._v("Runoob\n111\nRunoob\n111")])])}),[],!1,null,null,null);o.default=s.exports}}]);