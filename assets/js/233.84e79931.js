(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{727:function(t,n,e){"use strict";e.r(n);var s=e(6),a=Object(s.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"mybatis配置文件详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis配置文件详解"}},[this._v("#")]),this._v(" MyBatis配置文件详解")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('MyBatis 配置文件并不复杂，它所有的元素如下所示。\n<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\x3c!-- 配置 --\x3e\n    <properties />\x3c!-- 属性 --\x3e\n    <settings />\x3c!-- 设置 --\x3e\n    <typeAliases />\x3c!-- 类型命名 --\x3e\n    <typeHandlers />\x3c!-- 类型处理器 --\x3e\n    <objectFactory />\x3c!-- 对象工厂 --\x3e\n    <plugins />\x3c!-- 插件 --\x3e\n    <environments>\x3c!-- 配置环境 --\x3e\n        <environment>\x3c!-- 环境变量 --\x3e\n            <transactionManager />\x3c!-- 事务管理器 --\x3e\n            <dataSource />\x3c!-- 数据源 --\x3e\n        </environment>\n    </environments>\n    <databaseIdProvider />\x3c!-- 数据库厂商标识 --\x3e\n    <mappers />\x3c!-- 映射器 --\x3e\n</configuration>\n但是需要注意的是，MyBatis 配置项的顺序不能颠倒。如果颠倒了它们的顺序，那么在 MyBatis 启动阶段就会发生异常，导致程序无法运行。\n\n本节的任务是了解 MyBatis 配置项的作用，其中 properties、settings、typeAliases、typeHandler、plugin、environments、mappers 是常用的内容。\n\n本章不讨论 plugin（插件）元素的使用，在进一步学习 MyBatis 的许多底层内容和设计后我们才会学习它。MyBatis 中 objectFactory 和 databaseIdProvider 不常用。\n\n由于在一篇文章中详细讲解 MyBatis 的配置项会导致篇幅过长，所以我们分成以下几节，请大家猛击下面的链接进行阅读：\nMyBatis核心配置文件properties元素\nMyBatis中settings属性配置详解\nMyBatis配置typeAliases（别名）详解\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);