(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{713:function(e,n,t){"use strict";t.r(n);var a=t(6),r=Object(a.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"maven自定义插件的mojo标记和参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven自定义插件的mojo标记和参数"}},[this._v("#")]),this._v(" Maven自定义插件的Mojo标记和参数")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('Mojo 标记\n自定义 Maven 插件的常用标记如下所示。\n1）@goal<name>\n这是自定义 Maven 插件 Mojo 代码中唯一必须声明的标记，用来声明该 Mojo 的目标名称。\n2）@phase<name>\n声明默认将该目标绑定到 default 生命周期的某个阶段。这样在配置使用该插件目标时就可以不声明 phase。\n3）@requiresDependecyResolution<scope>\n声明运行该 Mojo 之前必须解析哪些范围的依赖。比如 maven-surefire-plugin 的 test 目标中，就用 @requireDependecyResolution test 标注必须解析完测试访问的所有依赖（compile、test 和 runtime）。该标记的默认值是 runtime。\n4）@requiresProject<true/false>\n声明该目标是不是必须在一个 Maven 项目中运行，默认值是true。\n\n大部分 Maven 插件的目标都需要依赖一个项目才能执行。但有例外，比如 maven-help-plugin 插件中的 system 目标，是用来显示系统属性和环境变量属性信息的，就不必要强制依赖一个项目才能运行，所以就用 @requiresProject false 声明。\n5）@requiresDirectInvoction<true/false>\n声明该目标是否只能使用命令行调用，默认值是 false，既可以在命令行中调用，也可以在 pom 中配置绑定生命周期阶段。如果是 true 的话，就只支持在命令行中执行；如果在 pom 中进行配置绑定生命周期阶段的话，Maven 就会异常。\n6）@requiresOnline<true/false>\n声明 Maven 是不是必须是在线状态，默认值是 false。\n7）@requiresReport<true/false>\n声明是否要求项目报告已经生成，默认值是 false。\n8）@aggregator\n在多模块的 Maven 项目中，声明该目标是否只在顶层模块构建的时候执行。如 maven-javadoc-plugin 的 aggregator-jar 就使用 @aggregator 标记，它只会在顶层项目生成一个已经聚合的 JavaDoc 文档。\n9）@execute goal＝＂<goal>＂\n声明执行该目标之前，先执行指定的目标。\n\n如果该目标是自己插件的另外一个目标，直接 goal＝＂目标名＂。\n\n如果该目标是另外一个插件的目标，就需要写成 goal＝＂目标前缀：目标名＂。\n10）@execute phase＝＂<phase>＂\n声明在执行该目标之前，Maven 先运行到当前生命周期的指定阶段。\n11）@execute lifecycle＝＂<lifecycle>＂phase＝＂<phase>＂\n声明在执行该目标之前，Maven 运行到指定生命周期的指定阶段。\nMojo 参数\n在 Mojo 中，一般都会有一个或多个 Mojo 参数需要配置，会用 @parameter 标记。\n\nMaven 执行 Boolean、Int、Float、String、Date、File 和 URL 等单值类型的参数，多值类型的参数包括数组、Collection、Map、Properties 等。下面分别介绍它们的配置。\n1. Boolean（boolean、Boolean）\n标记形式：\n/**\n*@parameter\n*/\nprivate boolean testBoolean;\n\npom 中的配置：\n<testBoolean>value</testBoolean>\n\n2. Int（Integer、long、Long、short、Short、byte、Byte）\n标记形式：\n/**\n*@parameter\n*/\nprivate int testInt;\n\npom 中的配置：\n<testInt>value</testInt>\n\n3. Float（Float、double、Double）\n标记形式：\n/**\n*@parameter\n*/\nprivate double testDouble;\n\npom 中的配置：\n<testDouble>value</testDouble>\n\n4. String（StringBuffer、char、Character）\n标记形式：\n/**\n*@parameter\n*/\nprivate String testString;\n\npom 中的配置：\n<testString>value</testString>\n\n5. Date（yyyy-MM-dd hh:mm:ssa）\n标记形式：\n/**\n*@parameter\n*/\nprivate Date testDate;\n\npom 中的配置：\n<testDate>value</testDate>\n\n6. File\n标记形式：\n/**\n*@parameter\n*/\nprivate File testFile;\n\npom 中的配置：\n<testFile>value</testFile>\n\n7. URL\n标记形式：\n/**\n*@parameter\n*/\nprivate URL testUrl;\n\nPom 中的配置\n<testUrl>value</testUrl>\n\n8. 数组\n标记形式：\n/**\n*@parameter\n*/\nPrivate String[] test\n\npom 中的配置\n<includes>\n    <include>abc</include>\n    <include>efg</include>\n</includes>\n\n9. Collection\n标记形式：\n/**\n*@parameter\n*/\nPrivate String[] tests\n\npom 中的配置\n<tests>\n    <test>abc</test>\n    <test>efg</test>\n</tests>\n\n10. Map\n标记形式：\n/**\n*@parameter\n*/\nPrivate Map test\n\npom 中的配置\n<test>\n    <key1>value1</key1>\n    <key2>value2</key2>\n</test>\n\n11. Properties\n标记形式：\n/**\n*@parameter\n*/\nPrivate Properties tests;\n\nPom 中的配置：\n<tests>\n    <property>\n        <name>name1</name>\n        <value>value1</value>\n    </property>\n    <property>\n        <name>name2</name>\n        <value>value2</value>\n    </property>\n</tests>\n\n除了直接使用 @parameter 标记配置的 Mojo 属性外，我们还可以使用 @parameter 的其它属性，进行进一步的详细声明：\n@parameter alias="<aliasName>"\n\n通过 alias 指定 Mojo 参数的别名。\n/**\n*@parameter alias="username"\n*/\nPrivate String testUserName;\n\nPom 中的配置：\n<username>value</username>\n@parameter expression="${attributeName}"\n\n读取属性的值给参数赋值。如：\n/**\n*@parameter expression="${userName}"\n*/\nPrivate String testUserName\n\n我们可以通过在 pom 中配置 userName 参数赋值，也可以在命令行中使用 -DuserName=value 进行赋值。\n@parameter default-value="value/${attributeName}"\n\n支持对 Mojo 属性赋予初始值\n\n除了 @parameter 标记外，我们还可以使用 @required 和 @readonly 配合标记属性\n1）@required 表示 Mojo 参数是必须的，如果使用了该标记，则必须配置 Mojo 值，否则会报错\n2）@readonly 表示 Mojo 参数是只读的，用户不能通过配置修改。\nMaven插件中的错误处理和日志\n在 Mojo 的执行方法后面，支持 MojoExecutationException 和 MojoFailureException 两种异常。\n\n如果运行抛出 MojoFailureException 异常，会显示“Build Failure”错误信息，表示可以预期的错误。\n\n如果运行抛出 MojoExecutationException 异常，会显示“Build Error”错误信息，表示未预期的错误。\n\n除了前面的两个异常定义外，Mojo 中还提供了相关方法可以输出不同等级的日志。用户可以通过这些日志输出，更详细地把握执行状况。\n\n这里可以调用父类 AbstractMojo 的 getLog() 方法获取 Log 对象，输入四个等级的日志信息。从低到高分别是：\nDebug：调试日志。\nInfo：消息日志。\nWarn：警告日志。\nError：错误日志。\n\n为了输出上面各个级别的信息，分别提供了三种方法。\nVoid debug（CharSequence ch）。\nVoid debug（CharSequence ch,Throwable error）。\nVoid debug（Throwable error）。\n\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);