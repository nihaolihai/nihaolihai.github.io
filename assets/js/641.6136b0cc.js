(window.webpackJsonp=window.webpackJsonp||[]).push([[641],{1132:function(t,n,e){"use strict";e.r(n);var r=e(6),i=Object(r.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"springbootelasticsearch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springbootelasticsearch"}},[this._v("#")]),this._v(" springbootelasticsearch")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('pom.xml\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n\txsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>top.lrshuai.es</groupId>\n\t<artifactId>springboot-elasticsearch</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>springboot-elasticsearch</name>\n\t<description>springboot-elasticsearch project for Spring Boot</description>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>1.5.9.RELEASE</version>\n\t\t<relativePath/> \x3c!-- lookup parent from repository --\x3e\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t\t<elasticsearch.version>5.6.4</elasticsearch.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t\n\t\t\x3c!-- 接口注解需要用到 --\x3e\n\t\t <dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t\t\t<groupId>org.elasticsearch.client</groupId>\n\t\t\t<artifactId>transport</artifactId>\n\t\t\t<version>${elasticsearch.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.logging.log4j</groupId>\n\t\t\t<artifactId>log4j-core</artifactId>\n\t\t</dependency>\n\t\t\n\t\t\x3c!-- 测试 --\x3e\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n\n</project>\n\ntest.class\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class ApplicationTests {\n\n\t@Autowired\n\tprivate PersonService personService;\n\t\n\t@Test\n\tpublic void testSavePerson() {\n\t\tString name = "大帅哥";\n\t\tString introduce = "加一个超级大帅哥";\n\t\tPerson person = new Person(name, 23, "男", new Date(), introduce);\n\t\tSystem.out.println(personService.savePerson(person));\n\t}\n\t\n\t@Test\n\tpublic void testUpdatePerson() {\n\t\tString name = "靓女";\n\t\tint age = 24;\n\t\tString sex = "女";\n\t\tString introduce = "这是一个非常非常非常非常漂亮的女孩。";\n\t\tDate birthday = new Date();\n\t\tPerson person = new Person(name, age, sex, birthday, introduce);\n\t\tperson.setId("mjupFmABhhkOZSWoch9i");\n\t\tpersonService.updatePerson(person);\n\t}\n\t\n\t@Test\n\tpublic void testFindPerson() {\n\t\tString id = "mjupFmABhhkOZSWoch9i";\n\t\tSystem.out.println(personService.findPerson(id));\n\t}\n\t\n\t@Test\n\tpublic void testDelPerson() {\n\t\tString id = "mjupFmABhhkOZSWoch9i";\n\t\tSystem.out.println(personService.delPerson(id));\n\t}\n\t\n\t@Test\n\tpublic void testQueryPerson() {\n\t\tPerson person = new Person();\n\t\tperson.setName("帅");\n\t\tperson.setIntroduce("人");\n//\t\tperson.setAge(27);\n\t\tObject obj  = personService.queryPerson(person);\n\t\tSystem.out.println(obj);\n\t}\n\n}\n\nresource下\n1）application.properties\nserver.port=8888\nelasticsearch.cluster.name=robot\nelasticsearch.host=127.0.0.1:9300,127.0.0.1:9301\n\n2）logback-spring.xml\n<?xml version="1.0" encoding="UTF-8"?>\n<configuration>\n  \x3c!-- 控制台打印日志的相关配置 --\x3e \n  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"> \n    \x3c!-- 日志格式 --\x3e\n    <encoder>\n        <pattern>%d{yyyy-MM-dd HH:mm:ss} [%level] - %m%n</pattern>\n    </encoder>\n    \x3c!-- 日志级别过滤器 --\x3e\n    <filter class="ch.qos.logback.classic.filter.LevelFilter">\n      \x3c!-- 过滤的级别 --\x3e\n      <level>info</level>\n      \x3c!-- 匹配时的操作：接收 （记录） --\x3e\n      <onMatch>ACCEPT</onMatch>\n      \x3c!-- 不匹配时的操作：拒绝DENY（不记录）接受：ACCEPT（记录） --\x3e\n      <onMismatch>ACCEPT</onMismatch>\n    </filter>\n  </appender>\n\n  \x3c!-- 文件保存日志的相关配置 --\x3e \n  <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">\n     \x3c!-- 保存日志文件的路径 \n    <file>e:/logs/admin_info.log</file>\n     --\x3e\n     \n    \x3c!-- linux 路径 \n    --\x3e\n    <file>/var/logs/es_info.log</file>\n    \x3c!-- 日志格式 --\x3e\n    <encoder>\n        <pattern>%d{yyyy-MM-dd HH:mm:ss} [%class:%line] - %m%n</pattern>\n    </encoder>\n    \x3c!-- 日志级别过滤器 --\x3e\n    <filter class="ch.qos.logback.classic.filter.LevelFilter">\n      \x3c!-- 过滤的级别 --\x3e\n      <level>INFO</level>\n      \x3c!-- 匹配时的操作：接收（记录） --\x3e\n      <onMatch>ACCEPT</onMatch>\n      \x3c!-- 不匹配时的操作：拒绝（不记录） --\x3e\n      <onMismatch>DENY</onMismatch>\n    </filter>\n    \x3c!-- 循环政策：基于时间创建日志文件 --\x3e\n    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n      \x3c!-- 日志文件名格式 \n      <fileNamePattern>e:/logs/admin_info.%d{yyyy-MM-dd}.log</fileNamePattern>\n      --\x3e\n      \x3c!-- linux --\x3e\n      <fileNamePattern>/var/logs/es_info.%d{yyyy-MM-dd}.log</fileNamePattern>\n      \n      \x3c!-- 最大保存时间：30天--\x3e\n      <maxHistory>30</maxHistory>\n    </rollingPolicy>\n  </appender>\n  \n  \n  <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">\n     \x3c!-- 保存日志文件的路径 \n    <file>e:/logs/admin_error.log</file>\n     --\x3e\n    \x3c!-- linux路径\n     --\x3e\n    <file>/var/logs/es_error.log</file>\n    \x3c!-- 日志格式 --\x3e\n    <encoder>\n        <pattern>%d{yyyy-MM-dd HH:mm:ss} [%class:%line] - %m%n</pattern>\n    </encoder>\n    \x3c!-- 日志级别过滤器 --\x3e\n    <filter class="ch.qos.logback.classic.filter.LevelFilter">\n      \x3c!-- 过滤的级别 --\x3e\n      <level>ERROR</level>\n      \x3c!-- 匹配时的操作：接收（记录） --\x3e\n      <onMatch>ACCEPT</onMatch>\n      \x3c!-- 不匹配时的操作：拒绝（不记录） --\x3e\n      <onMismatch>DENY</onMismatch>\n    </filter>\n    \x3c!-- 循环政策：基于时间创建日志文件 --\x3e\n    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n      \x3c!-- 日志文件名格式 \n      <fileNamePattern>e:/logs/admin_error.%d{yyyy-MM-dd}.log</fileNamePattern>\n      --\x3e\n      \x3c!-- linux \n       --\x3e\n      <fileNamePattern>/var/logs/es_error.%d{yyyy-MM-dd}.log</fileNamePattern>\n      \x3c!-- 最大保存时间：30天--\x3e\n      <maxHistory>30</maxHistory>\n    </rollingPolicy>\n  </appender>\n\n  \x3c!-- 基于dubug处理日志：具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置 --\x3e\n  <root level="info">\n    <appender-ref ref="STDOUT" />\n    <appender-ref ref="file" />\n    <appender-ref ref="error" />\n  </root>\n</configuration>\n\n\n启动类Application。class\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n\nutil类\npublic class Utils {\n\n\tpublic static String getUUID() {\n\t\tString str = UUID.randomUUID().toString();\n\t\treturn str.substring(0, 8) + str.substring(9, 13) + str.substring(14, 18) + str.substring(19, 23)\n\t\t\t\t+ str.substring(24);\n\t}\n}\n\nElasticsearchConfig.java\n\n@Configuration\npublic class ElasticsearchConfig {\n\n\t@Value("${elasticsearch.cluster.name}")\n\tprivate String clusterName;\n\n\t@Value("${elasticsearch.host}")\n\tprivate String host;\n\n\t@Bean\n\tpublic TransportClient transportClient() throws UnknownHostException {\n\t\t// 设置集群名称\n\t\tSettings settings = Settings.builder().put("cluster.name", clusterName)\n\t\t\t\t.build();\n\t\tTransportClient transportClient = new PreBuiltTransportClient(settings);\n\t\tString[] nodes = host.split(",");\n\t\tfor (String node : nodes) {\n\t\t\tif (node.length() > 0) {\n\t\t\t\tString[] hostPort = node.split(":");\n\t\t\t\ttransportClient.addTransportAddress(\n\t\t\t\t\t\tnew InetSocketTransportAddress(\n\t\t\t\t\t\tInetAddress.getByName(hostPort[0]),\n\t\t\t\t\t\tInteger.parseInt(hostPort[1])));\n\t\t\t}\n\t\t}\n\t\treturn transportClient;\n\t}\n\n}\n\n\nPersonController.java\n@RestController\npublic class PersonController {\n\t\n\t@Autowired\n\tprivate PersonService personservice;\n\t\n\t/**\n\t * 新增\n\t * @param person\n\t * @return\n\t */\n\t@PostMapping("/save/person")\n\tpublic Object savePerson(@RequestParam(name = "name") String name,\n\t\t\t@RequestParam(name = "sex") String sex,\n\t\t\t@RequestParam(name = "age") Integer age,\n\t\t\t@RequestParam(name = "introduce") String introduce,\n\t\t\t@RequestParam(name = "birthday")@DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")Date birthday\n\t\t\t) {\n\t\tSystem.out.println("name="+name);\n\t\tSystem.out.println("sex="+sex);\n\t\tSystem.out.println("age="+age);\n\t\tSystem.out.println("introduce="+introduce);\n\t\tSystem.out.println("birthday="+birthday);\n\t\tPerson person = new Person(name, age, sex, birthday, introduce);\n\t\treturn personservice.savePerson(person);\n\t}\n\t\n\t\n\t\n\t/**\n\t * 更新\n\t * @param id 更新的数据id\n\t * @param person 更新对象\n\t * @return\n\t */\n\t@PostMapping("/update/person/{id}")\n\tpublic Object updatePerson(@PathVariable("id") String id\n\t\t\t,@RequestParam(name="name") String name\n\t\t\t,@RequestParam(name="sex") String sex\n\t\t\t,@RequestParam(name="age") int age\n\t\t\t,@RequestParam(name="introduce") String introduce\n\t\t\t,@RequestParam(name="birthday") @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")Date birthday\n\t\t\t) {\n\t\tPerson person = new Person(name, age, sex, birthday, introduce);\n\t\tperson.setId(id);\n\t\treturn personservice.updatePerson(person);\n\t}\n\t\n\t/**\n\t * 删除\n\t * @param id 删除的数据id\n\t * @return\n\t */\n\t@PostMapping("/del/person/{id}")\n\tpublic Object delPerson(@PathVariable("id") String id) {\n\t\treturn personservice.delPerson(id);\n\t}\n\t\n\t/**\n\t * 获取数据\n\t * @param id 想要获取的数据\n\t * @return\n\t */\n\t@GetMapping("/person/{id}")\n\tpublic Object getPerson(@PathVariable("id") String id) {\n\t\treturn personservice.findPerson(id);\n\t}\n\t\n\t/**\n\t * 聚合查询\n\t * @param person \n\t * @return\n\t */\n\t@PostMapping("/query/person/_search")\n\tpublic Object queryPerson(@RequestParam(name="name",required=false) String name\n\t\t\t,@RequestParam(name="age",required=false,defaultValue="0") Integer age\n\t\t\t,@RequestParam(name="introduce",required=false) String introduce) {\n\t\tPerson person = new Person(name, age, null, null, introduce);\n\t\treturn personservice.queryPerson(person);\n\t}\n\t\n}\nPersonService .class\npublic interface PersonService {\n\tpublic Map<String, Object> savePerson(Person p);\n\tpublic Map<String, Object> updatePerson(Person p);\n\tpublic Map<String, Object> delPerson(String id);\n\tpublic Map<String, Object> findPerson(String id);\n\tpublic Map<String, Object> queryPerson(Person p);\n}\n\nPersonServiceImpl.class\n\n \n@Service\n\nPersonServiceImpl  extends ServiceImpl<PersonMapper, Person> implements PersonService \n或\npublic class PersonServiceImpl implements PersonService{\n\n\tprivate Logger log = Logger.getLogger(getClass());\n\t\n\t@Autowired\n\tprivate PersonDao personDao;\n\t\n\t@Override\n\tpublic Map<String, Object> savePerson(Person p) {\n\t\tString id =null;\n\t\ttry {\n\t\t\tid = personDao.save(p);\n\t\t\tSystem.out.println("save Person="+p);\n\t\t\tSystem.out.println("id="+id);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error("save error", e);\n\t\t\treturn RespnseModel.getErrorModel();\n\t\t}\n\t\treturn RespnseModel.getModel("ok", 200, id);\n\t}\n\n\t@Override\n\tpublic Map<String, Object> updatePerson(Person p) {\n\t\tString id =null;\n\t\ttry {\n\t\t\tSystem.out.println("update Person="+p);\n\t\t\tid = personDao.update(p);\n\t\t\tSystem.out.println("id="+id);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error("save error", e);\n\t\t\treturn RespnseModel.getErrorModel();\n\t\t}\n\t\treturn RespnseModel.getModel("ok", 200, id);\n\t}\n\n\t@Override\n\tpublic Map<String, Object> delPerson(String id) {\n\t\ttry {\n\t\t\tid = personDao.deltele(id);\n\t\t\tSystem.out.println("id="+id);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error("save error", e);\n\t\t\treturn RespnseModel.getErrorModel();\n\t\t}\n\t\treturn RespnseModel.getModel("ok", 200, id);\n\t}\n\n\t@Override\n\tpublic Map<String, Object> findPerson(String id) {\n\t\tObject obj = null;\n\t\ttry {\n\t\t\tobj = personDao.find(id);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error("save error", e);\n\t\t\treturn RespnseModel.getErrorModel();\n\t\t}\n\t\treturn RespnseModel.getModel("ok", 200, obj);\n\t}\n\n\t@Override\n\tpublic Map<String, Object> queryPerson(Person p) {\n\t\tObject obj = null;\n\t\ttry {\n\t\t\tSystem.out.println("query Person="+p);\n\t\t\tobj = personDao.query(p);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error("save error", e);\n\t\t\treturn RespnseModel.getErrorModel();\n\t\t}\n\t\treturn RespnseModel.getModel("ok", 200, obj);\n\t}\n\t\n\t\n\t\n}\n\nPerson .class\npublic class Person {\n\tprivate String id;\n\tprivate String name;\n\tprivate int age;\n\tprivate String sex;\n\tprivate Date birthday;\n\tprivate String introduce;\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getSex() {\n\t\treturn sex;\n\t}\n\tpublic void setSex(String sex) {\n\t\tthis.sex = sex;\n\t}\n\tpublic Date getBirthday() {\n\t\treturn birthday;\n\t}\n\tpublic void setBirthday(Date birthday) {\n\t\tthis.birthday = birthday;\n\t}\n\tpublic String getIntroduce() {\n\t\treturn introduce;\n\t}\n\tpublic void setIntroduce(String introduce) {\n\t\tthis.introduce = introduce;\n\t}\n\tpublic Person() {\n\t\tsuper();\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\tpublic Person( String name, int age, String sex, Date birthday, String introduce) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.sex = sex;\n\t\tthis.birthday = birthday;\n\t\tthis.introduce = introduce;\n\t}\n\tpublic Person(String id, String name, int age, String sex, Date birthday, String introduce) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.sex = sex;\n\t\tthis.birthday = birthday;\n\t\tthis.introduce = introduce;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn "Person [id=" + id + ", name=" + name + ", age=" + age + ", sex=" + sex + ", birthday=" + birthday\n\t\t\t\t+ ", introduce=" + introduce + "]";\n\t}\n\t\n\t\n}\n\n\nRespnseModel.java\npublic class RespnseModel{\n\n\tprivate static HashMap<String,Object> model=null;\n\t\n\tprivate RespnseModel() {}\n\t\n\tpublic static HashMap<String, Object> getModel(String msg,String status,Object data){\n\t\tif(model == null){\n\t\t\tsynchronized (HashMap.class) {\n                if(model==null)\n                model = new HashMap<>();\n            }\n\t\t}\n\t\tif(!msg.isEmpty()){\n\t\t\tmodel.put("msg", msg);\n\t\t}\n\t\tif(!status.isEmpty()){\n\t\t\tmodel.put("status", status);\n\t\t}\n\t\tif(data != null){\n\t\t\tmodel.put("data", data);\n\t\t}\n\t\treturn model;\n\t}\n\t\n\tpublic static HashMap<String, Object> getModel(String msg,int code,Object data){\n\t\tif(model == null){\n\t\t\tsynchronized (HashMap.class) {\n\t\t\t\tif(model==null)\n\t\t\t\t\tmodel = new HashMap<>();\n\t\t\t}\n\t\t}\n\t\tmodel.put("status", code);\n\t\tif(!msg.isEmpty()){\n\t\t\tmodel.put("msg", msg);\n\t\t}\n\t\tif(data != null){\n\t\t\tmodel.put("data", data);\n\t\t}\n\t\treturn model;\n\t}\n\n\t\n\tpublic static HashMap<String, Object> getErrorModel(){\n\t\tif(model == null){\n\t\t\tsynchronized (HashMap.class) {\n                if(model==null)\n                model = new HashMap<>();\n            }\n\t\t}\n\t\tmodel.put("status", 500);\n\t\tmodel.put("msg", "请求错误");\n\t\treturn model;\n\t}\n\t\n\tpublic static HashMap<String, Object> getNotAuthModel(){\n\t\tif(model == null){\n\t\t\tsynchronized (HashMap.class) {\n                if(model==null)\n                model = new HashMap<>();\n            }\n\t\t}\n\t\tmodel.put("status", 403);\n\t\tmodel.put("msg", "你权限不足");\n\t\treturn model;\n\t}\n}\nPersonDao .clss\npublic interface PersonDao {\n\tpublic String save(Person person);\n\tpublic String update(Person person);\n\tpublic String deltele(String id);\n\tpublic Object find(String id);\n\tpublic Object query(Person person);\n}\n\nPersonDaoImpl .class\n@Component\n\npublic class PersonMapper extends BaseMapper<Person> {}\n或者\npublic class PersonDaoImpl implements PersonDao{\n\n\t@Autowired\n    private TransportClient transportClient;\n\t\n\tprivate Logger log = Logger.getLogger(getClass());\n\t//索引名称（数据库名）\n\tprivate String index = "test";\n\t\n\t//类型名称（表名）\n\tprivate String type = "person";\n\t\n\t/**\n\t * 保存\n\t */\n\t@Override\n\tpublic String save(Person person) {\n\t\t try {\n\t\t\t XContentBuilder builder = XContentFactory.jsonBuilder().startObject();\n\t\t\tbuilder.field("name", person.getName());\n\t\t\tbuilder.field("age", person.getAge());\n\t\t\tbuilder.field("sex", person.getSex());\n\t\t\tbuilder.field("birthday", person.getBirthday());\n\t\t\tbuilder.field("introduce", person.getIntroduce());\n\t\t\tbuilder.endObject();\n\t\t\tIndexResponse response = this.transportClient.prepareIndex(index, type)\n\t\t\t\t\t.setSource(builder).get();\n\t\t\treturn response.getId();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * 更新\n\t */\n\t@Override\n\tpublic String update(Person person) {\n\t\tUpdateRequest request = new UpdateRequest(index, type, person.getId());\n        try {\n            XContentBuilder builder = XContentFactory.jsonBuilder().startObject();\n            if (person.getName() != null) {\n                builder.field("name", person.getName());\n            }\n            if (person.getSex() != null) {\n            \tbuilder.field("sex", person.getSex());\n            }\n            if (person.getIntroduce() != null) {\n            \tbuilder.field("introduce", person.getIntroduce());\n            }\n            if (person.getBirthday() != null) {\n            \tbuilder.field("birthday", person.getBirthday());\n            }\n            if (person.getAge() > 0) {\n            \tbuilder.field("age", person.getAge());\n            }\n            builder.endObject();\n            request.doc(builder);\n            UpdateResponse response = transportClient.update(request).get();\n            return response.getId();\n        } catch (IOException | InterruptedException | ExecutionException e) {\n            log.error(e.getMessage(), e);\n        }\n        return null;\n\t}\n\t\n\t@Override\n\tpublic String deltele(String id) {\n\t\tDeleteResponse response = transportClient.prepareDelete(index, type, id).get();\n\t\treturn response.getId();\n\t}\n\t\n\t@Override\n\tpublic Object find(String id) {\n\t\tGetResponse response =transportClient.prepareGet(index, type, id).get();\n\t\tSystem.out.println("response="+response);\n\t\tMap<String, Object> result = response.getSource();\n\t\tif(result != null) {\n\t\t\tresult.put("_id", response.getId());\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic Object query(Person person) {\n\t\tList<Map<String,Object>> result =  new ArrayList<>();;\n\t\ttry {\n\t\t\t BoolQueryBuilder boolBuilder = QueryBuilders.boolQuery();\n\t        if (person.getName() != null) {\n//\t            boolBuilder.must(QueryBuilders.matchQuery("name", person.getName()));\n\t            boolBuilder.should(QueryBuilders.matchQuery("name", person.getName()));\n\t        }\n\t        if (person.getIntroduce() != null) {\n//\t            boolBuilder.must(QueryBuilders.matchQuery("introduce", person.getIntroduce()));\n\t            boolBuilder.should(QueryBuilders.matchQuery("introduce", person.getIntroduce()));\n\t        }\n\t        \n\t        //大于age,小于age+10\n\t        if(person.getAge() > 0) {\n\t        \tRangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery("age");\n\t        \trangeQuery.from(person.getAge());\n\t        \trangeQuery.to(person.getAge()+10);\n\t        \tboolBuilder.filter(rangeQuery);\n\t        }\n\t        SearchRequestBuilder builder = transportClient.prepareSearch(index)\n\t                    .setTypes(type)\n\t                    .setSearchType(SearchType.QUERY_THEN_FETCH)\n\t                    .setQuery(boolBuilder)\n\t                    .setFrom(0)\n\t                    .setSize(10);\n\t        log.info(String.valueOf(builder));\n\t        SearchResponse response = builder.get();\n\t        response.getHits().forEach((s)->result.add(s.getSource()));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn result;\n\t}\n\t\n}\n\n\n\n\n分页\n @Override\n    public Object getList(TestDTO dto) {\n        QueryWrapper queryWrapper = new QueryWrapper();\n        if(StringUtils.isNotEmpty(dto.getOrderName())){\n            queryWrapper.eq("order_number",dto.getOrderName());\n        }\n        return shipmentMapper.selectList(queryWrapper);\n    }\n\n    @Override\n    public IPage<Shipment> getListByPage(ListDTO dto) {\n        // 不进行 count sql 优化，解决 MP 无法自动优化 SQL 问题，这时候你需要自己查询 count 部分\n        // page.setOptimizeCountSql(false);\n        // 当 total 为非 0 时(默认为 0),分页插件不会进行 count 查询\n        // 要点!! 分页返回的对象与传入的对象是同一个\n        Page<Shipment> page = new Page<>();\n        page.setSize(dto.getPageSize());\n        page.setPages(dto.getPageNo());\n        return shipmentMapper.getListByPage(page,dto.getStatus());\n    }\n\n\n@Component\npublic interface ShipmentMapper extends BaseMapper<Shipment> {\n\n    IPage<Shipment> getListByPage(Page page, @Param("status") Integer status);\n}\n\n\n\n@EnableTransactionManagement\n@Configuration\n@MapperScan("top.lrshuai.plus.springbootmybatisplus.test.service.*.mapper*")\npublic class MybatisPlusConfig {\n    /**\n     * 分页插件\n     */\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        return new PaginationInterceptor();\n    }\n}\n\n\n\napplication.yml\n\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/demo?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC\n    password: root\n    username: root\n    driver-class-name: com.mysql.jdbc.Driver\n\nmybatis-plus:\n  mapper-locations: classpath*:mapper/*.xml\n\n\n# 打印sql 语句\nlogging:\n  level:\n    top.lrshuai.plus.springbootmybatisplus.test.mapper.ShipmentMapper: debug\n\n<?xml version="1.0" encoding="UTF-8"?>\n<configuration>\n\t\x3c!-- 控制台打印日志的相关配置 --\x3e\n\t<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss} [%level] - %m%n</pattern>\n\t\t</encoder>\n\t\t<filter class="ch.qos.logback.classic.filter.LevelFilter">\n\t\t\t<level>DEBUG</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>ACCEPT</onMismatch>\n\t\t</filter>\n\t</appender>\n\n\t<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\t\t<file>log/mybatisplus_info.log</file>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss} [%class:%line] - %m%n</pattern>\n\t\t</encoder>\n\t\t<filter class="ch.qos.logback.classic.filter.LevelFilter">\n\t\t\t<level>INFO</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t\t<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n\t\t\t<fileNamePattern>log/mybatisplus_info.%d{yyyy-MM-dd}.log</fileNamePattern>\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t</appender>\n\n\t<appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\t\t<file>log/mybatisplus_error.log</file>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss} [%class:%line] - %m%n</pattern>\n\t\t</encoder>\n\t\t<filter class="ch.qos.logback.classic.filter.LevelFilter">\n\t\t\t<level>ERROR</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t\t<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n\t\t\t<fileNamePattern>log/mybatisplus_error.%d{yyyy-MM-dd}.log</fileNamePattern>\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t</appender>\n\n\t<root level="info">\n\t\t<appender-ref ref="STDOUT" />\n\t\t<appender-ref ref="file" />\n\t\t<appender-ref ref="error" />\n\t</root>\n</configuration>\n\n\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>top.lrshuai.plus</groupId>\n    <artifactId>springboot-mybatisplus</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot-mybatisplus</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.0.RELEASE</version>\n        <relativePath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.0.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);