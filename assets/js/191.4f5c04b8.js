(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{680:function(n,e,r){"use strict";r.r(e);var t=r(6),s=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"maven搭建ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven搭建ssh"}},[this._v("#")]),this._v(" Maven搭建SSH")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('前面介绍了基于 Archiva 的私服搭建工作，现在全项目组就可以在私服下共用 Maven 开发环境了。\n\n接下来在 Maven 环境下，基于 Struts2+Spring4.2+Hibernate4.1 框架，体验 Web 应用的开发过程。\n\n为了展现 Maven 开发的优势，将按如下步骤进行。\n创建三个 POM 工程，定义好 Hibernate、Spring 和 Struts 的基本依赖。\n创建 Service 和 DAO 层的接口模块。\n创建 Service 和 DAO 层的实现模块。\n创建基于 Struts 的 Web 模块。\n整合前面的所有模块，形成一个完整的 SSH 项目。\n完善相关的文档插件的配置，进行安装和测试。\n创建公共 POM 模块\n1. 创建 Hibernate 的公共 POM 模块\n基于 MyEclipse 的 maven-archetype-quickstart 创建 Maven 工程（同前面创建基本的 Maven 工程一样）。因为用的是公共 POM 模块，这里不需要写代码，只需将 Hibernate 和相关的依赖配置在 pom.xml 中，并且在 pom.xml 中将 packaging 方式设置成 pom，表示是一个公共的父 pom。代码如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.ssh.pom</groupId>\n    <artifactId>Hibernate4MySQLPOM</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>Hibernate4MySQLPOM</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n        \x3c!--hibernate --\x3e\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-core</artifactId>\n            <version>${project.build.hibernate.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-ehcache</artifactId>\n            <version>${project.build.hibernate.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate.javax.persistence</groupId>\n            <artifactId>hibernate-jpa-2.0-api</artifactId>\n            <version>1.0.0.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.34</version>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n注意 pom.xml 中的第 9 行，＜packaging＞pom＜/packaging＞表示当前的 pom 是一个独立的 pom 父模块，可以独立安装到仓库中，被其他工程继承使用。\n\n同时注意最后的 distributionManagement 配置，该配置可以让工程以构件的形式发布到指定的私服。\n\n右击“工程”，选择 Run As→Maven install 命令，就可以把当前 pom 安装到前面搭建好 Archiva 私服。安装后，可以在 Archiva 管理界面的 Browse 导航页中，看到 Hibernate4MySQLPOM 构件。\n2. 创建 Spring 的公共 POM 模块\n同前面 Hibernate 的 POM 创建一样，可以创建基于 Spring 的 POM 公共构件模块。具体工程创建就不演示了，直接复制到 pom.xml 中。\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.pom</groupId>\n    <artifactId>SpringPOM</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>SpringPOM</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        \x3c!-- 3.2.16.RELEASE,3.1.4.RELEASE --\x3e\n        <project.build.spring.version>4.2.7.RELEASE\n        </project.build.spring.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n        \x3c!-- spring --\x3e\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        \x3c!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --\x3e\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aspects</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>${project.build.spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>5.0.0.Final</version>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n同样注意粗体提示部分。右击“工程”，选择 Run As→Maven install 命令，安装 POM 构件。\n3. 创建 Struts 的公共 POM 模块\n重复前面的流程，直接复制 pom.xml 代码和安装 pom 后的管理界面。需要注意，在 pom.xml 中，除了 Struts 的依赖之外，还有 jsp/servlet 的依赖和 Struts 同 Spring 集成的插件依赖。\n\npom.xml 内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.pom</groupId>\n    <artifactId>StrutsPOM</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>StrutsPOM</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        \x3c!-- jsp servlet --\x3e\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>2.5</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.1</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.2</version>\n        </dependency>\n        \x3c!-- struts2 --\x3e\n        \x3c!-- https://mvnrepository.com/artifact/org.apache.struts/struts2-core --\x3e\n        <dependency>\n            <groupId>org.apache.struts</groupId>\n            <artifactId>struts2-core</artifactId>\n            <version>2.3.16</version>\n        </dependency>\n        \x3c!-- https://mvnrepository.com/artifact/org.apache.struts/struts2-spring-plugin --\x3e\n        <dependency>\n            <groupId>org.apache.struts</groupId>\n            <artifactId>struts2-spring-plugin</artifactId>\n            <version>2.3.4.1</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n实现 Hibernate DAO 模块\n在实际项目中，一般会使用面向接口编程，从而实现调用者和被调用者的完全解耦，方便项目的团队开发和后期的扩展。鉴于这样的考虑，Hibernate 持久层的实现分两步进行：第 1 步定义公共 DAO 接口和类；第 2 步基于 Hibernate 完成 DAO 接口的实现。详细介绍如下。\n1. 定义公共 DAO 接口和类\n创建一个普通的 Maven 工程：MvnSSHDemo.DAO。目录结构如图 1 所示。\n\n\n图 1  DAO项目结构\n\npom.xml 内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.ssh.demo</groupId>\n    <artifactId>MvnSSHDemo.DAO</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>MvnSSHDemo.DAO</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n这里有两类代码：一类是实体类（MvnUser），另一类是实体 DAO 接口（IMvnUserDAO）。因为 MvnUser 里面有个状态（status）属性，定义了一个枚举状态类（Status）。具体内容如下。\n\n1）Status.java 代码如下所示：\npackage cn.com.mvn.ssh.demo.entity;\npublic enum Status {\n    ACTIVE("Active"), INACTIVE("Inactive"), DELETED("Deleted"), LOCKED("Locked");\n    private String status;\n    private Status(final String status) {\n        this.status = status;\n    }\n    public String getStatus() {\n        return status;\n    }\n    public void setStatus(String status) {\n        this.status = status;\n    }\n    public String toString() {\n        return this.status;\n    }\n}\n2）MvnUser.java 如下所示：\npackage cn.com.mvn.ssh.demo.entity;\npublic class MvnUser {\n    private int urId;\n    private String urUserName;\n    private String urPassword;\n    private int urAge;\n    private String urStatus = Status.ACTIVE.getStatus();// Active\n    public int getUrId() {\n        return urId;\n    }\n    public void setUrId(int urId) {\n        this.urId = urId;\n    }\n    public String getUrUserName() {\n        return urUserName;\n    }\n    public void setUrUserName(String urUserName) {\n        this.urUserName = urUserName;\n    }\n    public String getUrPassword() {\n        return urPassword;\n    }\n    public void setUrPassword(String urPassword) {\n        this.urPassword = urPassword;\n    }\n    public int getUrAge() {\n        return urAge;\n    }\n    public void setUrAge(int urAge) {\n        this.urAge = urAge;\n    }\n    public String getUrStatus() {\n        return urStatus;\n    }\n    public void setUrStatus(String urStatus) {\n        this.urStatus = urStatus;\n    }\n}\n3）IMvnUserDAO.java 代码如下所示：\npackage cn.com.mvn.ssh.demo.dao;\nimport java.util.List;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\n/**\n* MvnUser实体对象的持久层代码，封装了对MvnUser实体对象的CRUD方法\n*\n* @author Noble\n* @version 1.0\n*/\npublic interface IMvnUserDAO {\n    /**\n     * 在数据库中，添加一个新的MvnUser对象\n     *\n     * @param user 需要添加的用户实体对象，该对象需要有用户名、密码、年龄和状态属性\n     *\n     * @return void\n     * @throws RuntimeException 添加失败或出现其它意外\n     */\n    public void addUser(MvnUser user);\n    /**\n     * 更新MvnUser对象。该对象中需要设置年龄、状态和id属性，属性和状态是要更新的新值，id为条件\n     *\n     * @param user 需要更新的MvnUser对象\n     *\n     * @return void\n     * @throws RuntimeException 更新失败或出现其它意外\n     */\n    public void update(MvnUser user);\n    /**\n     * 删除MvnUser对象，该对象中需要有要删除对象的id属性，id属性为删除条件\n     *\n     * @param user 要删除的MvnUser对象\n     *\n     * @return void\n     * @throws RuntimeException 删除失败或出现其它意外\n     */\n    public void deleteUser(MvnUser user);\n    /**\n     * 根据id查询对应的MvnUser对象\n     *\n     * @param id 要查询的MvnUser对象的id\n     * @return MvnUser id对应的MvnUser对象，如果没有对象，返回null\n     * @throws RuntimeException 出现意外情况\n     */\n    public MvnUser findUserById(int id);\n    /**\n     * 根据用户名查询对应的MvnUser对象\n     *\n     * @param userName 要查询的MvnUser对象的用户名\n     * @return MvnUser 用户对应的MvnUser对象，如果没有对象，返回null\n     * @throws RuntimeException 出现意外情况\n     */\n    public MvnUser findUserByUserName(String userName);\n    /**\n     * 查找数据库中所有的用户对象，以List集合的形式返回\n     *\n     * @return List<MvnUser> 所有用户对象的集合\n     * @throws RuntimeException 出现意外情况\n     */\n    public List<MvnUser> findUsers();\n}\n右击“工程”，选择 Run As→Maven install 命令，MyEclipse 会自动将工程代码编译打包。如果没有错误，最后会以构件的形式安装在本地仓库中。结果如图 5 所示。\n\n为了方便公司其他开发人员使用，接下来将该项目以构件的形式发布到前面搭建好的私服。为了使发布成功，请按前面的私服介绍搭建并启动私服，同时在当前工程的 pom.xml 中，添加 distributionManagement 配置，详细参考前面的 pom.xml。具体操作和效果图如下所示。\n\n右击“工程”，选择 Run As→Maven build… 命令。\n\n在 Goals 中输入 deploy，单击 Run 按钮。\n2. 基于 Hibernate 完成 DAO 接口的实现\n团队商量确定好接口，接下来就是对接口的实现和基于接口上的开发工作了。因为有共同的接口，所以这两个工作可以同步进行。这种现象同计算机配件一样（硬盘、内存、CPU、显卡等），事先定义好标准（插口），不同厂商就可以按同样的标准各自生产，然后顺利组装在一起，不用管是哪个厂家、在哪里、用哪条流水线生产的。\n\n接下来介绍 DAO 接口的实现，分以下 4 步进行。\n1）创建工程，添加相关依赖\n这个步骤比较简单，创建工程的方式同以前一样，具体创建过程不重复，项目结构如图 2 所示。\n\nHibernate DAO项目结构\n图 2  Hibernate DAO项目结构\n注意如下：\n\n① 因为前面创建了公共的 Hibernate POM 工程，里面有描述好了 Hibernate 相关的依赖（目的是让所有开发人员重用，不再重复编写），并且以构件的形式安装发布好了。这里要体现的是怎样继承前面定义好的 pom。\n\n② 同样地，因为新工程里面要实现 MvnSSHDemo.DAO 中定义的接口，并且用到里面定义的公共类，而且根据前面的介绍，MvnSSHDemo.DAO，也以构件的形式安装发布到私服中了。在这里，要介绍一下怎样在自己的工程里面设置团队内部发布的构件。\n\n这两点注意事项主要体现在 pom.xml 中，pom.xml 内容如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<project\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\n    xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>cn.com.mvn.pom</groupId>\n        <artifactId>Hibernate4MySQLPOM</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>cn.com.mvn.ssh.demo.dao.hibernate</groupId>\n    <artifactId>MvnSSHDemo.DAO.Hibernate</artifactId>\n    <name>MvnSSHDemo.DAO.Hibernate</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.DAO</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.com.mvn.pom</groupId>\n            <artifactId>SpringPOM</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n            <type>pom</type>\n        </dependency>\n    </dependencies>\n    <distributionManagement>\n        <repository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/internal</url>\n        </repository>\n        <snapshotRepository>\n            <id>archivaServer</id>\n            <url>http://localhost:8080/repository/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n</project>\n其中 7~11 行，它描述的是当前的 pom.xml，继承了 Hibernate4-MySQLPOM 构件中定义的 pom 内容，其中 groupId、artifactId 和 version 共同形成构件的坐标。\n\n当 pom 需要继承别人定义好的 pom 时，只需要使用如上 parent 配置指定就行。不过这里的继承同 Java 中继承一样，只能单继承，而且只能继承 packaging 类型为 pom 的构件（这点可以看 Hibernate4MySQLPOM 中的 pom.xml 文件，里面的 packaging 是 pom）。\n\n20~30 行，描述的是两个依赖。第 1 个依赖是前面定义的 DAO 接口和公共类的构件依赖。通过查看代码，其实同使用从网上找的其他依赖一样。\n\n第 2 个虽然也是使用前面定义的 Spring 的公共 pom 依赖，但是有点不同，里面包含了一个<type>pom</type>，这个元素指定的是依赖的 packaging 类型。\n\n依赖的 packaging 类型默认是 jar（前面所有 pom.xml 中没有指定 type 的情况），如果 pom 引用的依赖是 pom 类型，就需要在 dependency 中添加 type 元素，指定是类型 pom，形同这里用到的第 2 个依赖，否则构建的时候会报错。\n2）编写实现代码\n基于 Hibernate 的 DAO 实现代码主要有如下几个类。\n\n① MvnUser4Hibernate.java，该类继承了 MvnUser 类，里面用注解描述了实体信息，代码如下所示。\npackage cn.com.mvn.ssh.demo.entity.hibernate;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\n@Entity\n@Table(catalog = "mvn_db", name = "mvn_user")\npublic class MvnUser4Hibernate extends MvnUser {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = "ur_id")\n    public int getUrId() {\n        // TODO Auto-generated method stub\n        return super.getUrId();\n    }\n    @Column(name = "ur_user_name", length = 20, unique = true, nullable = false)\n    public String getUrUserName() {\n        // TODO Auto-generated method stub\n        return super.getUrUserName();\n    }\n    @Column(name = "ur_password", length = 10, nullable = false)\n    public String getUrPassword() {\n        // TODO Auto-generated method stub\n        return super.getUrPassword();\n    }\n    @Column(name = "ur_age")\n    public int getUrAge() {\n        // TODO Auto-generated method stub\n        return super.getUrAge();\n    }\n    @Column(name = "ur_status", length = 20, nullable = true)\n    public String getUrStatus() {\n        // TODO Auto-generated method stub\n        return super.getUrStatus();\n    }\n}\n② AbstractDAO.java，该类定义了实体的公共持久化方法，所有的 DAO 实现类就继承它，代码如下所示。\npackage cn.com.mvn.ssh.demo.dao.hibernate;\nimport java.io.Serializable;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.List;\nimport org.hibernate.Criteria;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.entity.hibernate.MvnUser4Hibernate;\npublic abstract class AbstractDAO<PK extends Serializable, T> {\n    private final Class<T> persistentClass;\n    @SuppressWarnings("unchecked")\n    public AbstractDAO() {\n        this.persistentClass = (Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass())\n                .getActualTypeArguments()[1];\n    }\n    @Autowired\n    private SessionFactory sessionFactory;\n    protected Session getSession() {\n        return sessionFactory.getCurrentSession();\n    }\n    @SuppressWarnings("unchecked")\n    public T getByKey(PK key) {\n        return (T) getSession().get(persistentClass, key);\n    }\n    public void persist(T entity) {\n        getSession().persist(entity);\n    }\n    public void delete(T entity) {\n        getSession().delete(entity);\n    }\n    public void update(T entity) {\n        getSession().merge(entity);\n    }\n    public List<T> findAll() {\n        Criteria cri = this.createEntityCriteria();\n        cri.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);// 消除重复对象\n        return cri.list();\n    }\n    protected Criteria createEntityCriteria() {\n        return getSession().createCriteria(persistentClass);\n    }\n}\n③ MvnUserDAOImpl.java，该类实现了 MvnUser 实体类的所有持久化方法，代码如下所示。\npackage cn.com.mvn.ssh.demo.dao.hibernate.impl;\nimport java.util.List;\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Restrictions;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport cn.com.mvn.ssh.demo.dao.IMvnUserDAO;\nimport cn.com.mvn.ssh.demo.dao.hibernate.AbstractDAO;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.entity.hibernate.MvnUser4Hibernate;\n@Repository("userDAO")\n@Transactional // 标记使用事务，为了方便DAO设置，是临时的，正式事务应该设置在服务层\npublic class MvnUserDAOImpl extends AbstractDAO<Integer, MvnUser4Hibernate> implements IMvnUserDAO {\n    public void addUser(MvnUser user) {\n        MvnUser4Hibernate u = this.convertToMvnUser4Hibernate(user);\n        super.persist(u);\n    }\n    public void update(MvnUser user) {\n        MvnUser4Hibernate u = this.convertToMvnUser4Hibernate(user);\n        super.update(u);\n    }\n    public void deleteUser(MvnUser user) {\n        MvnUser4Hibernate u = this.convertToMvnUser4Hibernate(user);\n        super.delete(u);\n    }\n    public MvnUser findUserById(int id) {\n        return super.getByKey(id);\n    }\n    public MvnUser findUserByUserName(String userName) {\n        Criteria criteria = super.createEntityCriteria();\n        criteria.add(Restrictions.eq("urUserName", userName));\n        return (MvnUser) criteria.uniqueResult();\n    }\n    public List<MvnUser> findUsers() {\n        Criteria criteria = super.createEntityCriteria();\n        return criteria.list();\n    }\n    private MvnUser4Hibernate convertToMvnUser4Hibernate(MvnUser user) {\n        MvnUser4Hibernate u = (MvnUser4Hibernate) this.findUserById(user.getUrId());\n        // 这里不要轻易new一个同已经存在的一样的对象，否则会抛\n        // org.hibernate.NonUniqueObjectException:\n        // a different object with the same identifier value was\n        // already associated withthe session异常\n        if (u == null) {\n            u = new MvnUser4Hibernate();\n            u.setUrId(user.getUrId());\n        }\n        u.setUrAge(user.getUrAge());\n        u.setUrPassword(user.getUrPassword());\n        u.setUrStatus(user.getUrStatus());\n        u.setUrUserName(user.getUrUserName());\n        return u;\n    }\n}\n④ HibernateConfiguration.java，Hibernate 的配置类，描述 Hibernate 的配置信息，代替 hibernate.cfg.xml，代码如下所示。\npackage cn.com.mvn.ssh.demo.dao.hibernate.config;\nimport java.util.Properties;\nimport javax.sql.DataSource;\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.hibernate4.HibernateTransactionManager;\nimport org.springframework.orm.hibernate4.LocalSessionFactoryBean;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n//配置类\n@Configuration\n@EnableTransactionManagement // 要支持事务管理\n@ComponentScan({ "cn.com.mvn.ssh.demo.dao.hibernate.config" })\n@PropertySource(value = { "classpath:db.properties" }) // 自动读入的属性文件\npublic class HibernateConfiguration {\n    // 自动注入 Spring的环境对象(上下文)\n    @Autowired\n    private Environment environment;\n    // 创建一个SessionFactory\n    @Bean(name = "sessionFactory")\n    public LocalSessionFactoryBean sessionFactory() {\n        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();\n        // 数据源\n        sessionFactory.setDataSource(dataSource());\n        // 指定数据实体类的包\n        sessionFactory.setPackagesToScan(new String[] { "cn.com.mvn.ssh.demo.entity.hibernate" });\n        // hibernate的属性信息\n        sessionFactory.setHibernateProperties(hibernateProperties());\n        return sessionFactory;\n    }\n    // 初始化数据源对象\n    @Bean(name = "dataSource") // 将当前方法返回的对象，当成普通Bean对象，放入IOC容器中\n    public DataSource dataSource() {\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        // 设置连接数据库的四要素\n        dataSource.setDriverClassName(environment.getRequiredProperty("jdbc.driverClassName"));\n        dataSource.setUrl(environment.getRequiredProperty("jdbc.url"));\n        dataSource.setUsername(environment.getRequiredProperty("jdbc.username"));\n        dataSource.setPassword(environment.getRequiredProperty("jdbc.password"));\n        return dataSource;\n    }\n    // 将Hibernate除连接数据库之外的配置，封装到Properties\n    private Properties hibernateProperties() {\n        Properties properties = new Properties();\n        properties.put("hibernate.dialect", environment.getRequiredProperty("hibernate.dialect"));\n        properties.put("hibernate.show_sql", environment.getRequiredProperty("hibernate.show_sql"));\n        properties.put("hibernate.format_sql", environment.getRequiredProperty("hibernate.format_sql"));\n        properties.put("hibernate.hbm2ddl.auto", environment.getRequiredProperty("hibernate.hbm2ddl.auto"));\n        return properties;\n    }\n    @Bean\n    @Autowired\n    public HibernateTransactionManager transactionManager(SessionFactory s) {\n        HibernateTransactionManager txManager = new HibernateTransactionManager();\n        txManager.setSessionFactory(s);\n        return txManager;\n    }\n}\n⑤ db.properties，描述数据库连接信息和 Hibernate 的一些配置信息，代码如下所示。\njdbc.username=root\njdbc.password=root\njdbc.url=jdbc:mysql://localhost:3306/mvn_db\njdbc.driverClassName=com.mysql.jdbc.Driver\nhibernate.dialect = org.hibernate.dialect.MySQLDialect\nhibernate.show_sql = true\nhibernate.format_sql = true\nhibernate.hbm2ddl.auto = update\n\n3）编写测试代码\n测试代码基于 JUnit，相对比较简单，只有一个类，针对 MvnUserDAOImpl.java 进行测试，另外还有一个 Spring 的配置文件 applicationContext.xml。\n\n需要注意的是，测试的所有代码和资源文件，都分别放在 src/test 目录下对应的子目录中。在 Maven 中具体文件的存放位置是固定的。测试代码和配置文件的内容如下所示。\n\n① TestMvnUserDAOImpl.java 代码如下所示：\npackage cn.com.mvn.ssh.demo.dao.hibernate.impl;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport cn.com.mvn.ssh.demo.dao.IMvnUserDAO;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.entity.Status;\nimport junit.framework.Assert;\npublic class TestMvnUserDAOImpl {\n    private IMvnUserDAO userDAO;\n    private ApplicationContext ctx = null;\n    @Before\n    public void init() {\n        ctx = new ClassPathXmlApplicationContext("applicationContext.xml");\n        userDAO = (IMvnUserDAO) this.ctx.getBean("userDAO");\n        // userDAO = (IMvnUserDAO) this.ctx.getBean(MvnUserDAOImpl.class);\n    }\n    @Test\n    public void testAddUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("userName11");\n        this.userDAO.addUser(user);\n        MvnUser u = this.userDAO.findUserByUserName("userName11");\n        Assert.assertTrue(u != null && u.getUrAge() == 11);\n        this.userDAO.deleteUser(u);\n    }\n    @Test\n    public void testFindUserById() {\n        MvnUser user = this.userDAO.findUserById(1);\n        Assert.assertEquals("zhangsan", user.getUrUserName());\n    }\n    @Test\n    public void testUpdate() {\n        MvnUser user = this.userDAO.findUserById(1);\n        user.setUrAge(99);\n        this.userDAO.update(user);\n        user = this.userDAO.findUserById(1);\n        Assert.assertEquals(99, user.getUrAge());\n    }\n    @After\n    public void destory() {\n        this.userDAO = null;\n        this.ctx = null;\n    }\n}\n② applicationContext.xml 代码如下所示。\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-4.0.xsd">\n    \x3c!--spring自动扫描组件类的包，包括子包和子子包等 --\x3e\n    <context:component-scan\n        base-package="cn.com.mvn.ssh.demo"></context:component-scan>\n</beans>\n4）测试安装发布\n右击“工程”，选择 Run As→Maven test 命令，Maven 会自动对 JUnit 写的测试代码进行测试，并且显示测试结果。\n\n右击“工程”，选择 Run As→Maven install 命令，Maven 会自动将工程代码编译，运行完测试代码，通过后，打包成构件，发布到本地仓库。\n\n右击“工程”，选择 Run As→Maven build… 命令，在弹出框的 Goals 输入框中输入 deploy，单击 Run 按钮，Maven 会自动将工程构件发布到指定的私服仓库。需要注意，一定要在 pom.xml 中配置 distributionManagement.\n实现 Service 模块\n同 DAO 层定义的接口类似，先将 Service 的接口定义好，并且发布成一个单独的构件，在自己的计算机上创建一个新的工程，继承 SpringPOM，集成 DAO 接口的依赖和 Service 接口的依赖，独立进行 Service 的实现代码编写和测试。\n\n因为要对 Service 实现方法进行测试，编码的时候可以面向接口编程。测试的时候，肯定要基于 DAO 的实现才能操作数据库。所以在测试的时候还需要额外添加前面 Hibernate 的 DAO 实现依赖，不过该依赖的 score 是 test，即只在测试的时候有效。详细情况请注意接下来介绍的工程 pom.xml 中的备注。\n\n下面按类似 Hibernate 的 DAO 实现的思路，介绍 Service 的实现模块。\n1）配置 pom.xml\n同之前一样，创建一个 Maven 工程，工程目录结构如图 3 所示。\n\nMaven Service项目结构\n图 3  Maven Service项目结构\n\n根据本节开始的介绍，需要在 pom.xml 中做如下设置。\n配置继承 SpringPOM 构件的信息（里面配置了 Spring 需要的依赖）。\n添加 DAO 接口构件和 Service 接口构件的依赖。\n添加 Hibernate DAO 实现构件的依赖，作用范围是 test。\n\n请查看如下 pom.xml，注意加粗部分内容和注释，细心的读者会发现里面没有添加 DAO 接口的构件依赖，只添加 Service 接口的构件依赖，同前面介绍的第 2 点要求不符合。\n\n原因是 Service 接口构件内部有配置好对应 DAO 接口构件的依赖，只要在这里配置 Service 接口构件的依赖，Maven 会在加载 Service 接口构件依赖的同时，自动地连带着将 Service 接口构件内部所需要的其他依赖加进来。\n\npom.xml 内容如下：\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    \x3c!--继承SpringPOM构件 --\x3e\n    <parent>\n        <groupId>cn.com.mvn.pom</groupId>\n        <artifactId>SpringPOM</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>cn.com.mvn.ssh.demo</groupId>\n    <artifactId>MvnSSHDemo.Service.impl</artifactId>\n    <packaging>jar</packaging>\n    <name>MvnSSHDemo.Service.impl</name>\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        \x3c!--Service接口构件依赖 --\x3e\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo</groupId>\n            <artifactId>MvnSSHDemo.Service</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n        \x3c!--Hibernate DAO实现构件依赖 --\x3e\n        <dependency>\n            <groupId>cn.com.mvn.ssh.demo.dao.hibernate</groupId>\n            <artifactId>MvnSSHDemo.DAO.Hibernate</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n            \x3c!--作用范围 --\x3e\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n2） 编写 Service 实现代码\nService 的实现代码相对比较简单，只是要有 Spring 容器管理相关的基础，因为里面用到 Spring 内部的组件注解、依赖注入注解和事务管理注解，详情请看代码和 Spring 相关的资料。\npackage cn.com.mvn.ssh.demo.service.impl;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\nimport cn.com.mvn.ssh.demo.dao.IMvnUserDAO;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.service.IUserService;\n@Service("userService") // 注册成服务组件\n@Transactional // 要求启动事务\npublic class UserServiceImpl implements IUserService {\n    @Autowired // 自动根据类型注入\n    @Qualifier("userDAO") // 根据name注入\n    private IMvnUserDAO userDAO;\n    @Transactional(propagation = Propagation.REQUIRED) // 需要進行事务管理\n    public void createUser(MvnUser user) {\n        // 验证输入的用户是否为null\n        if (user == null) {\n            throw new RuntimeException("创建的user不能为null");\n        }\n        // 验证用户名是否有存在\n        MvnUser u = this.userDAO.findUserByUserName(user.getUrUserName());\n        if (u != null) {\n            throw new RuntimeException(u.getUrUserName() + " 已经存在");\n        }\n        this.userDAO.addUser(user);\n    }\n    @Transactional(propagation = Propagation.REQUIRED) // 需要進行事务管理\n    public void editUser(int age, String status, int id) {\n        // 根据id找到以前的用户对象\n        MvnUser user = this.userDAO.findUserById(id);\n        // 判断用户是否存在，不存在抛异常，存在就更新\n        if (user == null) {\n            throw new RuntimeException("id为" + id + "用户不存在");\n        } else {\n            user.setUrAge(age);\n            user.setUrStatus(status);\n            this.userDAO.update(user);\n        }\n    }\n    @Transactional(propagation = Propagation.REQUIRED) // 需要進行事务管理\n    public void deleteUser(int id) {\n        // 根据id找到以前的用户对象\n        MvnUser user = this.userDAO.findUserById(id);\n        // 判断用户是否存在，不存在抛异常，存在就删除\n        if (user == null) {\n            throw new RuntimeException("id为" + id + "用户不存在");\n        } else {\n            this.userDAO.deleteUser(user);\n        }\n    }\n    @Transactional(readOnly = true) // 只读，不需要进行事务管理\n    public MvnUser searchUser(int id) {\n        MvnUser user = null;\n        user = this.userDAO.findUserById(id);\n        return user;\n    }\n    @Transactional(readOnly = true) // 只读，不需要进行事务管理\n    public MvnUser searchUser(String userName) {\n        MvnUser user = null;\n        user = this.userDAO.findUserByUserName(userName);\n        return user;\n    }\n    @Transactional(readOnly = true) // 只读，不需要进行事务管理\n    public List<MvnUser> searchUsers() {\n        List<MvnUser> userList = null;\n        userList = this.userDAO.findUsers();\n        return userList;\n    }\n}\n3）编写 Service 的测试案例代码和必需的配置资源文件\n因为测试代码的测试环境是依赖 Spring 容器的，所以测试部分的内容除了有针对 UserServiceImpl.java 的测试案例类之外，还需要配置一个 applicationContext.xml。而且还要注意，不管是测试类还是测试资源，都需要放在 src/test 的对应子目录下。\n\n① TestUserServiceImpl.java 代码如下所示：\npackage cn.com.mvn.ssh.demo.service.impl;\nimport java.util.List;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport cn.com.mvn.ssh.demo.entity.MvnUser;\nimport cn.com.mvn.ssh.demo.entity.Status;\nimport cn.com.mvn.ssh.demo.service.IUserService;\nimport junit.framework.Assert;\npublic class TestUserServiceImpl {\n    private IUserService userService;\n    private ApplicationContext ctx = null;\n    @Before\n    public void init() {\n        this.ctx = new ClassPathXmlApplicationContext("applicationContext.xml");\n        this.userService = (IUserService) ctx.getBean("userService");\n    }\n    @Test\n    public void testCreateUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("service1");\n        this.userService.createUser(user);\n        MvnUser u = this.userService.searchUser("service1");\n        boolean bool = u != null && u.getUrAge() == 11 && u.getUrStatus().equals(Status.ACTIVE.getStatus());\n        Assert.assertTrue(bool);\n        // 删除用户\n        this.userService.deleteUser(u.getUrId());\n    }\n    @Test\n    public void testEditUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("service1");\n        this.userService.createUser(user);\n        MvnUser u = this.userService.searchUser("service1");\n        this.userService.editUser(88, Status.INACTIVE.getStatus(), u.getUrId());\n        u = this.userService.searchUser("service1");\n        Assert.assertTrue(u.getUrAge() == 88 && u.getUrStatus().equals(Status.INACTIVE.getStatus()));\n        this.userService.deleteUser(u.getUrId());\n    }\n    @Test\n    public void testDeleteUser() {\n        MvnUser user = new MvnUser();\n        user.setUrAge(11);\n        user.setUrPassword("11");\n        user.setUrStatus(Status.ACTIVE.getStatus());\n        user.setUrUserName("service1");\n        this.userService.createUser(user);\n        MvnUser u = this.userService.searchUser("service1");\n        this.userService.deleteUser(u.getUrId());\n        MvnUser u2 = this.userService.searchUser(u.getUrId());\n        Assert.assertTrue(u != null && u2 == null);\n    }\n    @Test\n    public void testSearchUserById() {\n        MvnUser user = this.userService.searchUser(1);\n        Assert.assertNotNull(user);\n    }\n    @Test\n    public void testSearchUserByUserName() {\n        MvnUser user = this.userService.searchUser("zhangsan");\n        Assert.assertNotNull(user);\n    }\n    @Test\n    public void testSearchUsers() {\n        List<MvnUser> userList = this.userService.searchUsers();\n        Assert.assertTrue(userList != null && userList.size() > 0);\n    }\n    @After\n    public void destory() {\n        this.userService = null;\n        this.ctx = null;\n    }\n}\n2）applicationContext.xml 代码如下所示：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-4.0.xsd">\n    <context:component-scan base-package="cn.com.mvn.ssh.demo"/>\n</beans>\n4. 测试安装和发布\n这里的测试安装和发布同 Hibernate DAO 实现里面的一样。右击“工程”，选择 Run As→Maven test 命令。\n\n由于篇幅有限，请点击《Maven搭建SSH框架（二）》继续阅读。\n\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);