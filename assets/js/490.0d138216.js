(window.webpackJsonp=window.webpackJsonp||[]).push([[490],{979:function(n,o,e){"use strict";e.r(o);var t=e(6),a=Object(t.a)({},(function(){var n=this.$createElement,o=this._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[o("h2",{attrs:{id:"java操作mongodb数据库-简明版"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#java操作mongodb数据库-简明版"}},[this._v("#")]),this._v(" Java操作MongoDB数据库（简明版）")]),this._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[this._v('除了通过启动 mongo 进程进如 Shell 环境访问数据库外，MongoDB 还提供了其他基于编程语言的访问数据库方法。MongoDB 官方提供了 Java 和 Python 语言的驱动包，利用这些驱动包可使用多种编程方法来连接并操作 MongoDB 数据库。\n使用 Python 语言的读者请转到：Python操作MongoDB数据库\n\n本节将介绍如何设置和使用 MongoDB JDBC 驱动程序，通过 JDBC 实现与 MongoDB 服务端的通信功能，用户可以在此基础上进行各种 Java 程序的开发。\n安装 Java 语言驱动包\n1) Maven 方式\n推荐使用 Maven 的方式管理 MongoDB 的相关依赖包，Maven 项目中只需导入如下 pom 依赖包即可：\n<dependency>\n    <groupld>org.mongodb</groupld>\n    <artifactld>mongodb-driver</artifact1d>\n    <version>3.4</version>\n</dependency>\n<dependency>\n    <groupld>org.mongodb</groupld>\n    <artifactld>bson</artifactId>\n    <version>3.4</version>\n</dependency>\n<dependency>\n    <groupld>org.mongodb</groupId>\n    <artifactId>Mongodb-driver-core</artifactld>\n    <version>3.4</version>\n</dependency>\n2) 手动导入\n如果手动下载 mongodb-driver，还必须下载其依赖项 bson 和 mongodb-driver-core。在这里需要注意的是，这三个安装包需要配合使用，并且版本必须一致，否则运行时会报错。\n\n首先安装 MongoDB，本节实例为 MongoDB 3.4.2 版本；然后安装 Java 开发工具，本节采用 Eclipse 开发工具。通过 Github 网站下载驱动包，分别为 mongodb-driver-3.4.2.jar、mongodb-driver-core-3.4.2.jar、bson-3.4.2.jar。\n\n用 Eclipse 创建项目，然后导入需要的包，就可以在 Eclipse 中用代码实现 MongoDB 的简易连接。\n编程实现\n1) import 基础类库\n若要完成 MongoDB 的增、删、改、查等操作，则需要导入很多类库。这里介绍可能会用到的类库，如连接数据库和建立客户端的类库、数据库集合和文件操作的类库等。\nimport com.mongodb.MongoClient;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.dient.MongoCollection;\n可以根据编程需要添加必要的类库。\n2) 连接数据库\n若要连接数据库，则需要指定数据库名称。如果数据库不存在，则 MongoDB 会自动创建数据库。如下代码实现了简易的数据库连接：\npublic class App {\n    public static void main(String[] args) {\n        try {\n            //连接MongoDB服务器，端口号为27017\n            MongoClient mongoClient = new MongoClient("localhost", 27017);\n            //连接数据库\n            MongoDatabase mDatabase = mongoClient.getDatabase("test");  //test可选\n            System.out.printin("Connect to database successfully!");\n            System.out.printIn("MongoDatabase inof is : "+mDatabase.getName());\n        } catch (Exception e) {\n            System.err.printIn(e.getClass().getName() + ": " + e.getMessage());\n        }\n    }\n}\n3) 切换至集合\n连接至具体数据库以后，使用以下代码切换到集合，如果集合不存在，则使用如下代码新建集合：\nMongoCollection collection = database.getCollection("myTestCollection");\n4) 插入文档\n切换至集合后，就可以进行文档的增、删、改、查操作。首先定义文档，并使用 append。方法追加内容，代码如下：\nDocument document = new Document("_id", 1999)\n                    .append("title", "MongoDB Insert Demo")\n                    .append("description","database")\n                    .append("likes", 30)\n                    .append("by", "demo point")\n                    .append("url", "http://c.biancheng.net/mongodb/");\ndocument 为 BSON 类型的文档，实际上为一个列表，每项有两个元素，即字段名和值。\n\n文档定义完成后，再使用 insertOne 方法将此文档插入集合：\ncollection.insertOne(document);\n如果插入多条数据，需要先定义一个 Document 列表，然后用 add() 方法添加多个 Document 元素，最后用 insertMany() 方法插入，代码如下：\nList<Document> documents = new ArrayList<Document>();\ndocuments.add(document1);\ncollection.insertMany(documents);\n5) 删除文档\n使用 delete() 方法删除一个或多个文档，代码如下：\ncollection.deleteOne(document);\ncollection.deleteMany(new Document ("likes", 30));\n6) 更新数据\n使用 updataOne() 方法更新一条数据或多个数据，代码如下：\ncollection.updataOne (eq ("likes", 30), new Document ("$set", new Document ("likes", 50)));\nupdateOne() 方法中有两个参数，第一个参数表示更新的内容等于 ("likes",30) 的文档，第二个参数为要修改的内容，使用 $set 参数修改当前值，修改的内容为 ("likes", 50)。\n7) 查询数据\n利用游标类型实现数据的查询和遍历显示，使用游标前需要 import MongoCursor 类库。\nimport com.mongodb.client.MongoCursor;\ndocument Doc = (Document)collection.find(eq("likes", 30)).iterator();\nMongoCursor<Document> cursor =collection.find().iterator();\ntry{\n    while (cursor.hasNext()){\n        System.out.printin(cursor.next().toJson());\n    }\n} finally{\n    Cursor.close();\n}\n设置 find() 方法的参数为查询条件，参数为比较的 Document 元素。\n8) 其他方法\n删除数据库或集合，代码如下：\nmDatabase.drop();\ncollection.drop();\n\n关闭客户端连接，代码如下：\n纯文本复制\nmongoClient.close();\n\n')])])])])}),[],!1,null,null,null);o.default=a.exports}}]);