(window.webpackJsonp=window.webpackJsonp||[]).push([[393],{882:function(e,n,r){"use strict";r.r(n);var t=r(6),a=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"springcloud组件-搭建eureka服务注册中心"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springcloud组件-搭建eureka服务注册中心"}},[this._v("#")]),this._v(" SpringCloud组件:搭建Eureka服务注册中心")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("首先创建一个 Maven 项目，取名为 eureka-server，在 pom.xml 中配置 Eureka 的依赖信息，代码如下所示。\n\x3c!-- Spring Boot --\x3e\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.6.RELEASE</version>\n    <relativePath />\n</parent>\n<dependencies>\n    \x3c!-- eureka --\x3e\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n    </dependency>\n</dependencies>\n\x3c!-- Spring Cloud --\x3e\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>Finchley.SR2</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n创建一个启动类 EurekaServerApplication，代码如下所示。\n@EnableEurekaServer\n@SpringBootApplication\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaServer Application.class, args);\n    }\n}\n这里所说的启动类，跟我们之前讲的 Spring Boot 几乎完全一样，只是多了一个 @EnableEurekaServer 注解，表示开启 Eureka Server。\n\n接下来在 src/main/resources 下面创建一个 application.properties 属性文件，增加下面的配置：\nspring.application.name=eureka-server\nserver.port=8761\n# 由于该应用为注册中心, 所以设置为false, 代表不向注册中心注册自己\neureka.client.register-with-eureka=false\n# 由于注册中心的职责就是维护服务实例, 它并不需要去检索服务, 所以也设置为 false\neureka.client.fetch-registry=false\n\neureka.client.register-with-eureka 一定要配置为 false，不然启动时会把自己当作客户端向自己注册，会报错。\n\n接下来直接运行 EurekaServerApplication 就可以启动我们的注册中心服务了。我们在 application.properties 配置的端口是 8761，则可以直接通过 http://localhost：8761/ (http://localhost%EF%BC%9A8761/) 去浏览器中访问，然后便会看到 Eureka 提供的 Web 控制台。\n\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);