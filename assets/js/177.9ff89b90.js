(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{665:function(n,t,i){"use strict";i.r(t);var e=i(6),a=Object(e.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"java-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-集合"}},[this._v("#")]),this._v(" Java 集合")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('\n- 数组转集合\n\npublic class ArrayToCollection{\n   public static void main(String args[]) \n   throws IOException{\n      int n = 5;         // 5 个元素\n      String[] name = new String[n];\n      for(int i = 0; i < n; i++){\n         name[i] = String.valueOf(i);\n      }\n      List<String> list = Arrays.asList(name); \n      System.out.println();\n      for(String li: list){\n         String str = li;\n         System.out.print(str + " ");\n      }\n   }\n}\n\n- 集合比较\n\nclass Main {\n    public static void main(String[] args) {\n        String[] coins = { "Penny", "nickel", "dime", "Quarter", "dollar" };\n        Set<String> set = new TreeSet<String>();\n        for (int i = 0; i < coins.length; i++) {\n            set.add(coins[i]);\n        }\n        System.out.println(Collections.min(set));\n        System.out.println(Collections.min(set, String.CASE_INSENSITIVE_ORDER));\n        for (int i = 0; i <= 10; i++) {\n            System.out.print("-");\n        }\n        System.out.println("");\n        System.out.println(Collections.max(set));\n        System.out.println(Collections.max(set, String.CASE_INSENSITIVE_ORDER));\n    }\n}\n\n- HashMap遍历\n\npublic class Main {\n   public static void main(String[] args) {\n      HashMap< String, String> hMap = \n      new HashMap< String, String>();\n      hMap.put("1", "1st");\n      hMap.put("2", "2nd");\n      hMap.put("3", "3rd");\n      Collection cl = hMap.values();\n      Iterator itr = cl.iterator();\n      while (itr.hasNext()) {\n         System.out.println(itr.next());\n     }\n   }\n}\n\n - 集合长度\n\n public class Main {\n   public static void main(String [] args) {   \n      System.out.println( "集合实例!\\n" ); \n      int size;\n      HashSet collection = new HashSet ();\n      String str1 = "Yellow", str2 = "White", str3 = \n      "Green", str4 = "Blue";  \n      Iterator iterator;\n      collection.add(str1);    \n      collection.add(str2);   \n      collection.add(str3);   \n      collection.add(str4);\n      System.out.print("集合数据: ");  \n      iterator = collection.iterator();     \n      while (iterator.hasNext()){\n         System.out.print(iterator.next() + " ");  \n      }\n      System.out.println();\n      size = collection.size();\n      if (collection.isEmpty()){\n         System.out.println("集合是空的");\n      }\n      else{\n         System.out.println( "集合长度: " + size);\n      }\n      System.out.println();\n   }\n}\n\n- 集合打乱顺序\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 10; i++)\n            list.add(new Integer(i));\n        System.out.println("打乱前:");\n        System.out.println(list);\n \n        for (int i = 1; i < 6; i++) {\n            System.out.println("第" + i + "次打乱：");\n            Collections.shuffle(list);\n            System.out.println(list);\n        }\n    }\n}\n\n- 集合遍历\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n \npublic class Main {\n \n   public static void main(String[] args) {\n      // List集合的遍历\n      listTest();\n      // Set集合的遍历\n      setTest();\n   }\n \n   private static void setTest() {\n      Set<String> set = new HashSet<String>();\n      set.add("JAVA");\n      set.add("C");\n      set.add("C++");\n      // 重复数据添加失败\n      set.add("JAVA");\n      set.add("JAVASCRIPT");\n \n      // 使用iterator遍历set集合\n      Iterator<String> it = set.iterator();\n      while (it.hasNext()) {\n         String value = it.next();\n         System.out.println(value);\n      }\n      \n      // 使用增强for循环遍历set集合\n      for(String s: set){\n         System.out.println(s);\n      }\n   }\n \n   // 遍历list集合\n   private static void listTest() {\n      List<String> list = new ArrayList<String>();\n      list.add("菜");\n      list.add("鸟");\n      list.add("教");\n      list.add("程");\n      list.add("www.runoob.com");\n \n      // 使用iterator遍历\n      Iterator<String> it = list.iterator();\n      while (it.hasNext()) {\n         String value = it.next();\n         System.out.println(value);\n      }\n \n      // 使用传统for循环进行遍历\n      for (int i = 0, size = list.size(); i < size; i++) {\n         String value = list.get(i);\n         System.out.println(value);\n      }\n \n      // 使用增强for循环进行遍历\n      for (String value : list) {\n         System.out.println(value);\n      }\n   }\n}\n\n- 集合反转\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ListIterator;\n \nclass Main {\n   public static void main(String[] args) {\n      String[] coins = { "A", "B", "C", "D", "E" };\n      List l = new ArrayList();\n      for (int i = 0; i < coins.length; i++)\n         l.add(coins[i]);\n      ListIterator liter = l.listIterator();\n      System.out.println("反转前");\n      while (liter.hasNext())\n         System.out.println(liter.next());\n      Collections.reverse(l);\n      liter = l.listIterator();\n      System.out.println("反转后");\n      while (liter.hasNext())\n         System.out.println(liter.next());\n   }\n}\n\n- 删除集合中指定元素\n\nimport java.util.*;\n \npublic class Main {\n   public static void main(String [] args) {   \n      System.out.println( "集合实例!\\n" ); \n      int size;\n      HashSet collection = new HashSet ();\n      String str1 = "Yellow", str2 = "White", str3 = \n      "Green", str4 = "Blue";  \n      Iterator iterator;\n      collection.add(str1);    \n      collection.add(str2);   \n      collection.add(str3);   \n      collection.add(str4);\n      System.out.print("集合数据: ");  \n      iterator = collection.iterator();     \n      while (iterator.hasNext()){\n         System.out.print(iterator.next() + " ");  \n      }\n      System.out.println();\n      collection.remove(str2);\n      System.out.println("删除之后 [" + str2 + "]\\n");\n      System.out.print("现在集合的数据是: ");\n      iterator = collection.iterator();     \n      while (iterator.hasNext()){\n         System.out.print(iterator.next() + " ");  \n      }\n      System.out.println();\n      size = collection.size();\n      System.out.println("集合大小: " + size + "\\n");\n   }\n}\n\n- 只读集合\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n \npublic class Main {\n   public static void main(String[] argv) \n   throws Exception {\n      List stuff = Arrays.asList(new String[] { "a", "b" });\n      List list = new ArrayList(stuff);\n      list = Collections.unmodifiableList(list);\n      try {\n         list.set(0, "new value");\n      } \n        catch (UnsupportedOperationException e) {\n      }\n      Set set = new HashSet(stuff);\n      set = Collections.unmodifiableSet(set);\n      Map map = new HashMap();\n      map = Collections.unmodifiableMap(map);\n      System.out.println("集合现在是只读");\n   }\n}\n\n- 集合输出\n\nimport java.util.*;\n \npublic class Main{\n   public static void main(String[] args) {\n      System.out.println("TreeMap 实例！\\n");\n      TreeMap tMap = new TreeMap();\n      tMap.put(1, "Sunday");\n      tMap.put(2, "Monday");\n      tMap.put(3, "Tuesday");\n      tMap.put(4, "Wednesday");\n      tMap.put(5, "Thursday");\n      tMap.put(6, "Friday");\n      tMap.put(7, "Saturday");\n      System.out.println("TreeMap 键：" \n      + tMap.keySet());\n      System.out.println("TreeMap 值：" \n      + tMap.values());\n      System.out.println("键为 5 的值为: " + tMap.get(5)+ "\\n");\n      System.out.println("第一个键: " + tMap.firstKey() \n      + " Value: " \n      + tMap.get(tMap.firstKey()) + "\\n");\n      System.out.println("最后一个键: " + tMap.lastKey() \n      + " Value: "+ tMap.get(tMap.lastKey()) + "\\n");\n      System.out.println("移除第一个数据: " \n      + tMap.remove(tMap.firstKey()));\n      System.out.println("现在 TreeMap 键为: " \n      + tMap.keySet());\n      System.out.println("现在 TreeMap 包含: " \n      + tMap.values() + "\\n");\n      System.out.println("移除最后一个数据: " \n      + tMap.remove(tMap.lastKey()));\n      System.out.println("现在 TreeMap 键为: " \n      + tMap.keySet());\n      System.out.println("现在 TreeMap 包含: " \n      + tMap.values());\n   }\n}\n\n- 集合转数组\n\nimport java.util.*;\n \npublic class Main{\n   public static void main(String[] args){\n      List<String> list = new ArrayList<String>();\n      list.add("菜"); \n      list.add("鸟"); \n      list.add("教");\n      list.add("程");\n      list.add("www.runoob.com");\n      String[] s1 = list.toArray(new String[0]); \n      for(int i = 0; i < s1.length; ++i){\n         String contents = s1[i];\n         System.out.print(contents);\n     } \n   }\n}\n\n- List 循环移动元素\n\nimport java.util.*;\n \npublic class Main {\n   public static void main(String[] args) {\n      List list = Arrays.asList("one Two three Four five six".split(" "));\n      System.out.println("List :"+list);\n      Collections.rotate(list, 3);\n      System.out.println("rotate: " + list);\n   }\n}\n\n- 遍历 HashTable 的键值\nJava 实例 Java 实例\n\n以下实例演示了如何使用 Hashtable 类的 keys() 方法来遍历输出键值：\n\nMain.java 文件\nimport java.util.Enumeration;\nimport java.util.Hashtable;\n \npublic class Main {\n   public static void main(String[] args) {\n      Hashtable ht = new Hashtable();\n      ht.put("1", "One");\n      ht.put("2", "Two");\n      ht.put("3", "Three");\n      Enumeration e = ht.keys();\n      while (e.hasMoreElements()){\n         System.out.println(e.nextElement());\n      }\n   }\n}\n\n- 使用 Enumeration 遍历 HashTable\nJava 实例 Java 实例\n\n以下实例演示了如何使用 Enumeration 类的 hasMoreElements 和 nextElement 方法来遍历输出 HashTable 中的内容：\n\nMain.java 文件\nimport java.util.Enumeration;\nimport java.util.Hashtable;\n \npublic class Main {\n   public static void main(String[] args) {\n      Hashtable ht = new Hashtable();\n      ht.put("1", "One");\n      ht.put("2", "Two");\n      ht.put("3", "Three");\n      Enumeration e = ht.elements();\n      while(e.hasMoreElements()){\n         System.out.println(e.nextElement());\n      }\n   }\n}\n\n- 集合中添加不同类型元素\nJava 实例 Java 实例\n\n以下实例演示了在集合类中添加不同类型的元素：\n\nMain.java 文件\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n \nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\n \n \npublic class Main {\n   public static void main(String[] args) {\n      List lnkLst = new LinkedList();\n      lnkLst.add("element1");\n      lnkLst.add("element2");\n      lnkLst.add("element3");\n      lnkLst.add("element4");\n      displayAll(lnkLst);\n      List aryLst = new ArrayList();\n      aryLst.add("x");\n      aryLst.add("y");\n      aryLst.add("z");\n      aryLst.add("w");\n      displayAll(aryLst);\n      Set hashSet = new HashSet();\n      hashSet.add("set1");\n      hashSet.add("set2");\n      hashSet.add("set3");\n      hashSet.add("set4");\n      displayAll(hashSet);\n      SortedSet treeSet = new TreeSet();\n      treeSet.add("1");\n      treeSet.add("2");\n      treeSet.add("3");\n      treeSet.add("4");\n      displayAll(treeSet);\n      LinkedHashSet lnkHashset = new LinkedHashSet();\n      lnkHashset.add("one");\n      lnkHashset.add("two");\n      lnkHashset.add("three");\n      lnkHashset.add("four");\n      displayAll(lnkHashset);\n      Map map1 = new HashMap();\n      map1.put("key1", "J");\n      map1.put("key2", "K");\n      map1.put("key3", "L");\n      map1.put("key4", "M");\n      displayAll(map1.keySet());\n      displayAll(map1.values());\n      SortedMap map2 = new TreeMap();\n      map2.put("key1", "JJ");\n      map2.put("key2", "KK");\n      map2.put("key3", "LL");\n      map2.put("key4", "MM");\n      displayAll(map2.keySet());\n      displayAll(map2.values());\n      LinkedHashMap map3 = new LinkedHashMap();\n      map3.put("key1", "JJJ");\n      map3.put("key2", "KKK");\n      map3.put("key3", "LLL");\n      map3.put("key4", "MMM");\n      displayAll(map3.keySet());\n      displayAll(map3.values());\n   }\n   static void displayAll(Collection col) {\n      Iterator itr = col.iterator();\n      while (itr.hasNext()) {\n         String str = (String) itr.next();\n         System.out.print(str + " ");\n      }\n      System.out.println();\n   }\n}\n\n- List 元素替换\nJava 实例 Java 实例\n\n以下实例演示了如何使用 Collections 类的 replaceAll() 来替换List中所有的指定元素：\n\nMain.java 文件\nimport java.util.*;\n \npublic class Main {\n   public static void main(String[] args) {\n      List list = Arrays.asList("one Two three Four five six one three Four".split(" "));\n      System.out.println("List :"+list);\n      Collections.replaceAll(list, "one", "hundrea");\n      System.out.println("replaceAll: " + list);\n   }\n}\n\n - List 截取\nJava 实例 Java 实例\n\n以下实例演示了如何使用 Collections 类的 indexOfSubList() 和 lastIndexOfSubList() 方法来查看子列表是否在列表中，并查看子列表在列表中所在的位置：\n\nMain.java 文件\nimport java.util.*;\n \npublic class Main {\n   public static void main(String[] args) {\n      List list = Arrays.asList("one Two three Four five six one three Four".split(" "));\n      System.out.println("List :"+list);\n      List sublist = Arrays.asList("three Four".split(" "));\n      System.out.println("子列表 :"+sublist);\n      System.out.println("indexOfSubList: "\n      + Collections.indexOfSubList(list, sublist));\n      System.out.println("lastIndexOfSubList: "\n      + Collections.lastIndexOfSubList(list, sublist));\n   }\n}\n\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);