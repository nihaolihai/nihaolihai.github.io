(window.webpackJsonp=window.webpackJsonp||[]).push([[465],{964:function(e,n,t){"use strict";t.r(n);var a=t(6),o=Object(a.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"swing-表格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#swing-表格"}},[this._v("#")]),this._v(" swing 表格")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('表格是 Swing 新增加的组件，主要功能是把数据以二维表格的形式显示出来，并且允许用户对表格中的数据进行编辑。表格组件是最复杂的组件之一，它的表格模型功能非常强大、灵活而易于执行。由于篇幅有限，本节只介绍默认的表格模型。\n\nSwing 使用 JTable 类实现表格，常用构造方法如下所示。\nJTable()：构造一个默认的 JTable，使用默认的数据模型、默认的列模型和默认的选择模型对其进行初始化。\nJTable(int numRows,int numColumns)：使用 DefaultTableModel 构造具有 numRows 行和 numColumns 列个空单元格的 JTable。\nJTable(Object[][] rowData,Object[] columnNames)：构造一个 JTable 来显示二 维数组 rowData 中的值，其列名称为 columnNames。\n\n创建一个带有滚动条的 JTable 对象非常简单，如下所示。\nJTable table=new JTable(5,6);\nJScrollPane pane=new JScrollPane(table);\n\n第一条语句创建了一个 JTable 对象。第二条语句创建了一个存放 JTable 对象的 JScrollPane 对象，该对象是一个视图对象。JScrollPane是一个垂直和水平滚动条，以及可设置行和列标题的容器。上面两行代码执行后的表格效果如图1 所示。\n\n表格\n图1 表格\n\n表格有很多的选项设置，因此 JTable 类常用方法也很多，这些常用方法如表 1 所示。\n\n表1 JTable类的常用方法\n方法名称\t说明\ngetColumnCount()\t返回列模型中的列数\ngetColumnN ame(int column)\t返回出现在视图中 column 列位置处的列名称\ngetRowCount()\t返回 JTable 中可以显示的行数（给定无限空间）\ngetRowSorter()\t返回负责排序的对象\ngetSelectedColumn()\t返回第一个选定列的索引，如果没有选定的列， 则返回 -1\ngetSelectedRow()\t返回第一个选定行的索引，如果没有选定的行， 则返回 -1\ngetValueAt(int row,int column)\t返回 row 和 column 位置的单元格值\nisEditing()\t如果正在编辑单元格，则返回 true\nselectAll()\t选择表中的所有行、列和单元格\nsetColumnSelectionInterval(int index0,int index1)\t选择从 index0 到 index1之间（包含两端）的列\nsetRowSelectionInterval(int index0,int index1)\t选择从 index0 到 index1 之间（包含两端）的行\nsetTableHeader(JTableHeader tableHeader)\t将此 JTable 所使用的 tableHeader 设置为 newHeader\nsetUpdateSelectionOnSort(boolean update)\t指定排序后是否应该更新选择\nsetValueAt(Object a Value,int row,int column)\t设置表模型中 row 和 column 位置的单元格值\n例 1\n使用 JTable 类创建一个包含 8 列的学生成绩表，并向表格中填充几行数据，具体实现代码如下所示。\npackage ch18;\nimport java.awt.Container;\nimport javax.swing.JFrame;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\npublic class JTableDemo\n{\n    public static void main(String[] agrs)\n    {\n        JFrame frame=new JFrame("学生成绩表");\n        frame.setSize(500,200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        Container contentPane=frame.getContentPane();\n        Object[][] tableDate=new Object[5][8];\n        for(int i=0;i<5;i++)\n        {\n            tableDate[i][0]="1000"+i;\n            for(int j=1;j<8;j++)\n            {\n                tableDate[i][j]=0;\n            }\n        }\n        String[] name={"学号","软件工程","Java","网络","数据结构","数据库","总成绩","平均成绩"};\n        JTable table=new JTable(tableDate,name);\n        contentPane.add(new JScrollPane(table));\n        frame.setVisible(true);\n    }\n}\n\n如上述代码所示，表格组件和其他组件类似，可以方便地创建一个 JTable 对象。 如果 JTbale 对象直接添加到 JFrame 中，则表头显示不出来，需要把表格对象放入 JScrollPane 对象中，之后把 JScrollPane 对象添加到 JFrame 中。实例的运行效果如图 2 所示。\n\n学生成绩表运行效果\n图2 学生成绩表运行效果\n例 2\nSwing 中表格的数据可以根据需求动态变化，比如对于表格中不需要的数据，可以将其删除。本实例将演示如何从表格中删除用户选择的行，实现过程如下。\n\n(1) 创建一个继承自 JFrame 的 RowDeleteDemo 类。\npackage ch18;\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.table.DefaultTableModel;\npublic class RowDeleteDemo extends JFrame\n{\n    private JPanel contentPane;\n    private JTable table;\n    /**\n     * Launch the application.\n     */\n    public static void main(String[] args)\n    {\n        RowDeleteDemo frame = new RowDeleteDemo();\n        frame.setVisible(true);\n    }\n    /**\n     * Create the frame.\n     */\n}\n\n(2) 在构造方法中增加表格，设置表格的数据模型，添加“删除”按钮并监听单击事件。实现代码如下：\npublic RowDeleteDemo()\n{\n    addWindowListener(new WindowAdapter()\n    {\n        @Override\n        public void windowActivated(WindowEvent e)\n        {\n            do_this_windowActivated(e);\n        }\n    });\n    setTitle("图书信息表");\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setBounds(100,100,450,200);\n    contentPane=new JPanel();\n    contentPane.setBorder(new EmptyBorder(5,5,5,5));\n    contentPane.setLayout(new BorderLayout(0,0));\n    setContentPane(contentPane);\n    JPanel panel=new JPanel();\n    contentPane.add(panel,BorderLayout.SOUTH);\n    JButton button=new JButton("删除");\n    button.addActionListener(new ActionListener()\n    {\n        public void actionPerformed(ActionEvent e)\n        {\n            do_button_actionPerformed(e);\n        }\n    });\n    panel.add(button);\n    JScrollPane scrollPane=new JScrollPane();\n    contentPane.add(scrollPane,BorderLayout.CENTER);\n    table=new JTable();\n    table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\n    scrollPane.setViewportView(table);\n}\n\n(3) 监听窗体激活事件，完成向表中增加数据的功能。这里使用了表格模型对象，它可以方便地处理表格中的数据。实现代码如下：\nprotected void do_this_windowActivated(WindowEvent e)\n{\n    DefaultTableModel tableModel=(DefaultTableModel) table.getModel();    //获得表格模型\n    tableModel.setRowCount(0);    //清空表格中的数据\n    tableModel.setColumnIdentifiers(new Object[]{"书名","出版社","出版时间","丛书类别","定价"});    //设置表头\n    tableModel.addRow(new Object[]{"Java从入门到精通（第2版）","清华大学出版社","2010-07-01","软件工程师入门丛书","59.8元"});    //增加列\n    tableModel.addRow(new Object[]{"PHP从入门到精通（第2版）","清华大学出版社","2010-07-01","软件工程师入门丛书","69.8元"});\n    tableModel.addRow(new Object[]{"Visual Basic从入门到精通（第2版）","清华大学出版社","2010-07-01","软件工程师入门丛书","69.8元"});\n    tableModel.addRow(new Object[]{"Visual C++从入门到精通（第2版）","清华大学出版社","2010-07-01","软件工程师入门丛书","69.8元" });\n    table.setRowHeight(30);\n    table.setModel(tableModel);    //应用表格模型\n}\n\n(4) 监听用户单击“删除”按钮事件，这里通过 do_button_actionPerformed() 方法完成。在该方法中，首先获取表格模型，然后获得用户选择的行，再执行删除数据操作。实现代码如下：\n纯文本复制\nprotected void do_button_actionPerformed(ActionEvent e)\n{\n    DefaultTableModel model=(DefaultTableModel) table.getModel();    //获得表格模型\n    int[] selectedRows=table.getSelectedRows();\n    for(int i=selectedRows[0];i<selectedRows.length;i++)\n    {\n        model.removeRow(selectedRows[0]);\n    }\n    table.setModel(model);\n}\n')])])]),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/181107/3-1Q10G30A9363.gif",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);n.default=o.exports}}]);