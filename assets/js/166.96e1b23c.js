(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{653:function(e,n,t){"use strict";t.r(n);var p=t(6),a=Object(p.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"java-applet-基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-applet-基础"}},[this._v("#")]),this._v(" Java Applet 基础")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('Applet 是一种 Java 程序。它一般运行在支持 Java 的 Web 浏览器内。因为它有完整的 Java API支持,所以Applet 是一个全功能的 Java 应用程序。\n\n如下所示是独立的 Java 应用程序和 applet 程序之间重要的不同：\n\nJava 中 Applet 类继承了 java.applet.Applet 类。\nApplet 类没有定义 main()，所以一个 Applet 程序不会调用 main() 方法。\nApplet 被设计为嵌入在一个 HTML 页面。\n当用户浏览包含 Applet 的 HTML 页面，Applet 的代码就被下载到用户的机器上。\n要查看一个 Applet 需要 JVM。 JVM 可以是 Web 浏览器的一个插件，或一个独立的运行时环境。\n用户机器上的 JVM 创建一个 Applet 类的实例，并调用 Applet 生命周期过程中的各种方法。\nApplet 有 Web 浏览器强制执行的严格的安全规则，Applet 的安全机制被称为沙箱安全。\nApplet 需要的其他类可以用 Java 归档（JAR）文件的形式下载下来。\nApplet的生命周期\nApplet 类中的四个方法给我们提供了一个框架，你可以在该框架上开发小程序：\n\ninit: 该方法的目的是为你的 Applet 提供所需的任何初始化。在 Applet 标记内的 param 标签被处理后调用该方法。\nstart: 浏览器调用 init 方法后，该方法被自动调用。每当用户从其他页面返回到包含 Applet 的页面时，则调用该方法。\nstop: 当用户从包含 Applet 的页面移除的时候，该方法自动被调用。因此，可以在相同的 Applet 中反复调用该方法。\ndestroy: 此方法仅当浏览器正常关闭时调用。因为 Applet 只有在 HTML 网页上有效，所以你不应该在用户离开包含 Applet 的页面后遗漏任何资源。\npaint: 该方法在 start() 方法之后立即被调用，或者在 Applet 需要重绘在浏览器的时候调用。paint() 方法实际上继承于 java.awt。\n"Hello, World" Applet:\n下面是一个简单的 Applet 程序 HelloWorldApplet.java:\n\nHelloWorldApplet.java 文件代码：\nimport java.applet.*;\nimport java.awt.*;\n \npublic class HelloWorldApplet extends Applet\n{\n   public void paint (Graphics g)\n   {\n      g.drawString ("Hello World", 25, 50);\n   }\n}\n这些 import 语句将以下类导入到我们的 Applet 类中：\n\njava.applet.Applet.\njava.awt.Graphics.\n没有这些 import 语句，Java 编译器就识别不了 Applet 和 Graphics 类。\n\nApplet 类\n每一个 Applet 都是 java.applet.Applet 类的子类，基础的 Applet 类提供了供衍生类调用的方法,以此来得到浏览器上下文的信息和服务。\n\n这些方法做了如下事情：\n\n得到 Applet 的参数\n得到包含 Applet 的 HTML 文件的网络位置\n得到 Applet 类目录的网络位置\n打印浏览器的状态信息\n获取一张图片\n获取一个音频片段\n播放一个音频片段\n调整此 Applet 的大小\n除此之外，Applet 类还提供了一个接口，该接口供 Viewer 或浏览器来获取 Applet 的信息，并且来控制 Applet 的执行。\n\nViewer 可能是：\n\n请求 Applet 作者、版本和版权的信息\n请求 Applet 识别的参数的描述\n初始化 Applet\n销毁 Applet\n开始执行 Applet\n结束执行 Applet\nApplet 类提供了对这些方法的默认实现，这些方法可以在需要的时候重写。\n\n"Hello，World"applet 都是按标准编写的。唯一被重写的方法是 paint 方法。\n\nApplet 的调用\nApplet 是一种 Java 程序。它一般运行在支持 Java 的 Web 浏览器内。因为它有完整的 Java API 支持,所以 Applet 是一个全功能的 Java 应用程序。\n\n<applet> 标签是在HTML文件中嵌入 Applet 的基础。以下是一个调用"Hello World"applet的例子；\n\nHTML 代码：\n<html>\n<title>The Hello, World Applet</title>\n<hr>\n<applet code="HelloWorldApplet.class" width="320" height="120">\nIf your browser was Java-enabled, a "Hello, World"\nmessage would appear here.\n</applet>\n<hr>\n</html>\n注意: 你可以参照 HTML Applet 标签来更多的了解从 HTML 中调用 applet 的方法。\n\n<applet> 标签的属性指定了要运行的 Applet 类。width 和 height 用来指定 Applet 运行面板的初始大小。Applet 必须使用 </applet> 标签来关闭。\n\n如果 Applet 接受参数，那么参数的值需要在 <param> 标签里添加，该标签位于 <applet> 和 </applet> 之间。浏览器忽略了 applet 标签之间的文本和其他标签。\n\n不支持 Java 的浏览器不能执行 <applet> 和 </applet>。因此，在标签之间显示并且和 applet 没有关系的任何东西，在不支持的 Java 的浏览器里是可见的。\n\nViewer 或者浏览器在文档的位置寻找编译过的 Java 代码，要指定文档的路径，得使用 <applet> 标签的 codebase 属性指定。\n\n如下所示：\n\n<applet codebase="http://amrood.com/applets"\ncode="HelloWorldApplet.class" width="320" height="120">\n如果 Applet 所在一个包中而不是默认包，那么所在的包必须在 code 属性里指定，例如：\n\n<applet code="mypackage.subpackage.TestApplet.class"\n           width="320" height="120">\n获得applet参数\n下面的例子演示了如何使用一个 Applet 响应来设置文件中指定的参数。该 Applet 显示了一个黑色棋盘图案和第二种颜色。\n\n第二种颜色和每一列的大小通过文档中的 Applet 的参数指定。\n\nCheckerApplet 在 init() 方法里得到它的参数。也可以在 paint() 方法里得到它的参数。然而，在 Applet 开始得到值并保存了设置，而不是每一次刷新的时候都得到值，这样是很方便，并且高效的。\n\nApplet viewer 或者浏览器在 Applet 每次运行的时候调用 init() 方法。在加载 Applet 之后，Viewer 立即调用 init() 方法（Applet.init()什么也没做），重写该方法的默认实现，添加一些自定义的初始化代码。\n\nApplet.getParameter() 方法通过给出参数名称得到参数值。如果得到的值是数字或者其他非字符数据，那么必须解析为字符串类型。\n\n下例是 CheckerApplet.java 的修改：\n\nCheckerApplet.java 文件代码：\nimport java.applet.*;\nimport java.awt.*;\npublic class CheckerApplet extends Applet\n{\n   int squareSize = 50;// 初始化默认大小\n   public void init () {}\n   private void parseSquareSize (String param) {}\n   private Color parseColor (String param) {}\n   public void paint (Graphics g) {}\n}\n下面是 CheckerApplet 类的 init() 方法和私有的 parseSquareSize() 方法：\n\npublic void init ()\n{\n   String squareSizeParam = getParameter ("squareSize");\n   parseSquareSize (squareSizeParam);\n   String colorParam = getParameter ("color");\n   Color fg = parseColor (colorParam);\n   setBackground (Color.black);\n   setForeground (fg);\n}\nprivate void parseSquareSize (String param)\n{\n   if (param == null) return;\n   try {\n      squareSize = Integer.parseInt (param);\n   }\n   catch (Exception e) {\n     // 保留默认值\n   }\n}\n该 Applet 调用 parseSquareSize()，来解析 squareSize 参数。parseSquareSize() 调用了库方法 Integer. parseInt() 该方法将一个字符串解析为一个整数，当参数无效的时候，Integer.parseInt() 抛出异常。\n\n因此，parseSquareSize() 方法也是捕获异常的，并不允许 Applet 接受无效的输入。\n\nApplet 调用 parseColor()方法将颜色参数解析为一个 Color 值。parseColor() 方法做了一系列字符串的比较，来匹配参数的值和预定义颜色的名字。你需要实现这些方法来使 Applet 工作。\n\n指定 applet 参数\n如下的例子是一个HTML文件，其中嵌入了 CheckerApplet 类。HTML文件通过使用 <param> 标签的方法给 applet 指定了两个参数。\n\n<html>\n<title>Checkerboard Applet</title>\n<hr>\n<applet code="CheckerApplet.class" width="480" height="320">\n<param name="color" value="blue">\n<param name="squaresize" value="30">\n</applet>\n<hr>\n</html>\n注意: 参数名字大小写不敏感。\n\n应用程序转换成 Applet\n将图形化的 Java 应用程序（是指，使用AWT的应用程序和使用 java 程序启动器启动的程序）转换成嵌入在web页面里的applet是很简单的。\n\n下面是将应用程序转换成 Applet 的几个步骤：\n\n编写一个 HTML 页面，该页面带有能加载 applet 代码的标签。\n编写一个 JApplet 类的子类，将该类设置为 public。否则，Applet 不能被加载。\n消除应用程序的 main()方法。不要为应用程序构造框架窗口，因为你的应用程序要显示在浏览器中。\n将应用程序中框架窗口的构造方法里的初始化代码移到 Applet 的 init() 方法中，你不必显示的构造 Applet 对象，浏览器将通过调用 init() 方法来实例化一个对象。\n移除对 setSize() 方法的调用，对于 Applet 来讲，大小已经通过 HTML 文件里的 width 和 height 参数设定好了。\n移除对 setDefaultCloseOperation() 方法的调用。Applet 不能被关闭，它随着浏览器的退出而终止。\n如果应用程序调用了 setTitle() 方法，消除对该方法的调用。applet 不能有标题栏。（当然你可以给通过 html 的 title 标签给网页自身命名）\n不要调用 setVisible(true),Applet 是自动显示的。\n事件处理\nApplet 类从 Container 类继承了许多事件处理方法。Container 类定义了几个方法，例如：processKeyEvent() 和processMouseEvent()，用来处理特别类型的事件，还有一个捕获所有事件的方法叫做 processEvent。\n\n为了响应一个事件，Applet 必须重写合适的事件处理方法。\n\nExampleEventHandling.java 文件代码：\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseEvent;\nimport java.applet.Applet;\nimport java.awt.Graphics;\n \npublic class ExampleEventHandling extends Applet\n                             implements MouseListener {\n \n    StringBuffer strBuffer;\n \n    public void init() {\n         addMouseListener(this);\n         strBuffer = new StringBuffer();\n        addItem("initializing the applet ");\n    }\n \n    public void start() {\n        addItem("starting the applet ");\n    }\n \n    public void stop() {\n        addItem("stopping the applet ");\n    }\n \n    public void destroy() {\n        addItem("unloading the applet");\n    }\n \n    void addItem(String word) {\n        System.out.println(word);\n        strBuffer.append(word);\n        repaint();\n    }\n \n    public void paint(Graphics g) {\n         //Draw a Rectangle around the applet\'s display area.\n        g.drawRect(0, 0,\n                      getWidth() - 1,\n                      getHeight() - 1);\n \n         //display the string inside the rectangle.\n        g.drawString(strBuffer.toString(), 10, 20);\n    }\n \n  \n    public void mouseEntered(MouseEvent event) {\n    }\n    public void mouseExited(MouseEvent event) {\n    }\n    public void mousePressed(MouseEvent event) {\n    }\n    public void mouseReleased(MouseEvent event) {\n    }\n \n    public void mouseClicked(MouseEvent event) {\n         addItem("mouse clicked! ");\n    }\n}\n如下调用该 Applet：\n\n<html>\n<title>Event Handling</title>\n<hr>\n<applet code="ExampleEventHandling.class"\nwidth="300" height="300">\n</applet>\n<hr>\n</html>\n最开始运行，Applet 显示 "initializing the applet. Starting the applet."，然后你一点击矩形框，就会显示 "mouse clicked" 。\n\n显示图片\nApplet 能显示 GIF,JPEG,BMP 等其他格式的图片。为了在 Applet 中显示图片，你需要使用 java.awt.Graphics 类的drawImage()方法。\n\n如下实例演示了显示图片的所有步骤：\n\nImageDemo.java 文件代码：\nimport java.applet.*;\nimport java.awt.*;\nimport java.net.*;\npublic class ImageDemo extends Applet\n{\n  private Image image;\n  private AppletContext context;\n  public void init()\n  {\n      context = this.getAppletContext();\n      String imageURL = this.getParameter("image");\n      if(imageURL == null)\n      {\n         imageURL = "java.jpg";\n      }\n      try\n      {\n         URL url = new URL(this.getDocumentBase(), imageURL);\n         image = context.getImage(url);\n      }catch(MalformedURLException e)\n      {\n         e.printStackTrace();\n         // Display in browser status bar\n         context.showStatus("Could not load image!");\n      }\n   }\n   public void paint(Graphics g)\n   {\n      context.showStatus("Displaying image");\n      g.drawImage(image, 0, 0, 200, 84, null);\n      g.drawString("www.javalicense.com", 35, 100);\n   } \n}\n如下调用该applet：\n\n<html>\n<title>The ImageDemo applet</title>\n<hr>\n<applet code="ImageDemo.class" width="300" height="200">\n<param name="image" value="java.jpg">\n</applet>\n<hr>\n</html>\n播放音频\nApplet 能通过使用 java.applet 包中的 AudioClip 接口播放音频。AudioClip 接口定义了三个方法：\n\npublic void play(): 从一开始播放音频片段一次。\npublic void loop(): 循环播放音频片段\npublic void stop(): 停止播放音频片段\n为了得到 AudioClip 对象，你必须调用 Applet 类的 getAudioClip() 方法。无论 URL 指向的是否是一个真实的音频文件，该方法都会立即返回结果。\n\n直到要播放音频文件时，该文件才会下载下来。\n\n如下实例演示了播放音频的所有步骤：\n\nAudioDemo.java 文件代码：\nimport java.applet.*;\nimport java.awt.*;\nimport java.net.*;\npublic class AudioDemo extends Applet\n{\n   private AudioClip clip;\n   private AppletContext context;\n   public void init()\n   {\n      context = this.getAppletContext();\n      String audioURL = this.getParameter("audio");\n      if(audioURL == null)\n      {\n         audioURL = "default.au";\n      }\n      try\n      {\n         URL url = new URL(this.getDocumentBase(), audioURL);\n         clip = context.getAudioClip(url);\n      }catch(MalformedURLException e)\n      {\n         e.printStackTrace();\n         context.showStatus("Could not load audio file!");\n      }\n   }\n   public void start()\n   {\n      if(clip != null)\n      {\n         clip.loop();\n      }\n   }\n   public void stop()\n   {\n      if(clip != null)\n      {\n         clip.stop();\n      }\n   }\n}\n如下调用applet：\n\n<html>\n<title>The ImageDemo applet</title>\n<hr>\n<applet code="ImageDemo.class" width="0" height="0">\n<param name="audio" value="test.wav">\n</applet>\n<hr>\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);