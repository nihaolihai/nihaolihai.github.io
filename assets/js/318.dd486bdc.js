(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{806:function(e,t,n){"use strict";n.r(t);var r=n(6),a=Object(r.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"eureka注册中心开启密码认证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eureka注册中心开启密码认证"}},[this._v("#")]),this._v(" Eureka注册中心开启密码认证")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Eureka 自带了一个 Web 的管理页面，方便我们查询注册到上面的实例信息，但是有一个问题：如果在实际使用中，注册中心地址有公网 IP 的话，必然能直接访问到，这样是不安全的。所以我们需要对 Eureka 进行改造，加上权限认证来保证安全性。\n\n改造我们的 eureka-server，通过集成 Spring-Security 来进行安全认证。\n\n在 pom.xml 中添加 Spring-Security 的依赖包，代码如下所示。\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n\n然后在 application.properties 中加上认证的配置信息：\nspring.security.user.name=yinjihuan #用户名\nspring.security.user.password=123456 #密码\n\n增加 Security 配置类：\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        // 关闭csrf\n        http.csrf().disable();\n        // 支持httpBasic\n        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();\n    }\n}\n重新启动注册中心，访问 http://localhost:8761/，此时浏览器会提示你输入用户名和密码，输入正确后才能继续访问 Eureka 提供的管理页面。\n\n在 Eureka 开启认证后，客户端注册的配置也要加上认证的用户名和密码信息：\neureka.client.serviceUrl.defaultZone=http://zhangsan:123456@localhost:8761/eureka/\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);