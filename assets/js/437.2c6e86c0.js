(window.webpackJsonp=window.webpackJsonp||[]).push([[437],{930:function(e,n,t){"use strict";t.r(n);var r=t(6),i=Object(r.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"spring-mvc单文件上传-附带实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc单文件上传-附带实例"}},[this._v("#")]),this._v(" Spring MVC单文件上传（附带实例）")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('本节通过一个应用案例 springMVCDemo11 讲解 Spring MVC 框架如何实现单文件上传，具体步骤如下：\n1）创建应用并导入 JAR 包\n创建应用 springMVCDemo11，将 Spring MVC 相关的 JAR 包、commons-fileupload 组件相关的 JAR 包以及 JSTL 相关的 JAR 包导入应用的 lib 目录中，如图 1 所示。\n\nspringMVCDemo11应用的JAR包\n图 1  springMVCDemo11\n\n2）创建 web.xml 文件\n在 WEB-INF 目录下创建 web.xml 文件。为防止中文乱码，需要在 web.xml 文件中添加字符编码过滤器，这里不再赘述。\n3）创建文件选择页面\n在 WebContent 目录下创建 JSP 页面 oneFile.jsp，在该页面中使用表单上传单个文件，具体代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <form action="${pageContext.request.contextPath }/onefile"\n        method="post" enctype="multipart/form-data">\n        选择文件：<input type="file" name="myfile"><br>\n        文件描述：<input type="text" name="description"><br>\n        <input type="submit" value="提交">\n    </form>\n</body>\n</html>\n4）创建 POJO 类\n在 src 目录下创建 pojo 包，在该包中创建 POJO 类 FileDomain。然后在该 POJO 类中声明一个 MultipartFile 类型的属性封装被上传的文件信息，属性名与文件选择页面 oneFile.jsp 中的 file 类型的表单参数名 myfile 相同。具体代码如下：\npackage pojo;\nimport org.springframework.web.multipart.MultipartFile;\npublic class FileDomain {\n    private String description;\n    private MultipartFile myfile;\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public MultipartFile getMyfile() {\n        return myfile;\n    }\n    public void setMyfile(MultipartFile myfile) {\n        this.myfile = myfile;\n    }\n}\n5）创建控制器类\n在 src 目录下创建 controller 包，并在该包中创建 FileUploadController 控制器类。具体代码如下：\npackage controller;\nimport java.io.File;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport pojo.FileDomain;\n@Controller\npublic class FileUploadController {\n    // 得到一个用来记录日志的对象，这样在打印信息时能够标记打印的是哪个类的信息\n    private static final Log logger = LogFactory.getLog(FileUploadController.class);\n    /**\n     * 单文件上传\n     */\n    @RequestMapping("/onefile")\n    public String oneFileUpload(@ModelAttribute FileDomain fileDomain,\n            HttpServletRequest request) {\n        /*\n         * 文件上传到服务器的位置“/uploadfiles”,该位置是指\n         * workspace\\.metadata\\.plugins\\org.eclipse\n         * .wst.server.core\\tmp0\\wtpwebapps, 发布后使用\n         */\n        String realpath = request.getServletContext()\n                .getRealPath("uploadfiles");\n        String fileName = fileDomain.getMyfile().getOriginalFilename();\n        File targetFile = new File(realpath, fileName);\n        if (!targetFile.exists()) {\n            targetFile.mkdirs();\n        }\n        // 上传\n        try {\n            fileDomain.getMyfile().transferTo(targetFile);\n            logger.info("成功");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return "showOne";\n    }\n}\n6）创建 Spring MVC 的配置文件\n在上传文件时需要在配置文件中使用 Spring 的 CommonsMultipartResolver 类配置 MultipartResolver 用于文件上传，应用的配置文件 springmvc-servlet.xml 的代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:p="http://www.springframework.org/schema/p"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n    \x3c!-- 使用扫描机制扫描包 --\x3e\n    <context:component-scan base-package="controller" />\n    \x3c!-- 完成视图的对应 --\x3e\n    \x3c!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --\x3e\n    <bean\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n        <property name="prefix" value="/WEB-INF/jsp/" />\n        <property name="suffix" value=".jsp" />\n    </bean>\n    \x3c!-- 配置MultipartResolver，用于上传文件，使用spring的CommonsMultipartResolver --\x3e\n    <bean id="multipartResolver"\n        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">\n        <property name="maxUploadSize" value="5000000" />\n        <property name="defaultEncoding" value="UTF-8" />\n    </bean>\n</beans>\n7）创建成功显示页面\n在 WEB-INF 目录下创建 JSP 文件夹，并在该文件夹中创建单文件上传成功显示页面 showOne.jsp。具体代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    ${fileDomain.description }\n    <br>\n    \x3c!-- fileDomain.getMyFile().getOriginalFilename()--\x3e\n    ${fileDomain.myfile.originalFilename }\n</body>\n</html>\n8）测试文件上传\n发布 springMVCDemo11 应用到 Tomcat 服务器并启动 Tomcat 服务器，然后通过地址“http://localhost:8080/springMVCDemo11/oneFile.jsp”\n\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);