(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{686:function(n,e,a){"use strict";a.r(e);var i=a(6),s=Object(i.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"maven使用gpg对文件进行签名加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven使用gpg对文件进行签名加密"}},[this._v("#")]),this._v(" Maven使用GPG对文件进行签名加密")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("每次手动对 Maven 构件进行签名，并将签名部署到 Maven 仓库中去是一种很无聊且没有技术含量的工作。为了从这种重复性的工作中解放出来，Maven 提供了一种叫 GPG 的插件来解决这个问题。用户只需在 pom.xml 中做对应的配置，例如：\n<project>\n    ...\n    <plugins>\n        ...\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.6</version>\n            <executions>\n                <execution>\n                    <id>signArtifact</id>\n                    <phase>verify</phase>\n                    <goals>\n                        <goal>sign</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</project>\n配置好后，使用 Mvn 命令就可以完成签名并且发布了。当然有个前提，那就是 GPG 需要安装好，也就是说，能在命令行中执行 GPG 命令。\n\n当然，在实际项目过程中，对日常的 SNAPSHOT 构件进行签名就没有太大意义了，而且耗费资源。那有什么办法可以避免这点，只在版本正式发布的时候签名呢？\n\n当然是可以的，在 pom 中有个 release-profile。该 profile 只有在 Maven 属性 performRelease 为 true 的时候才会被激活，而 release:perform 执行时，会把该属性的值设置成 true，这个时机刚好是项目进行版本发布的时机。\n\n所以，用户可以在 settings.xml 或 pom 中创建如下代码，实现只是在发布正式版本的时候，对正式版本进行签名。\n<profiles>\n    <profile>\n        <id> release-sign-artifacts</id>\n        <activation>\n            <property>\n                <name>performRelease</name>\n                <value>true</value>\n            </property>\n        </activation>\n        <build>\n            <plugins>\n                <plugin>\n                    <groupId>org.apache.maven,plugins\n                    </groupId>\n                    <artifactId>maven-gpg-plugin</artifactId>\n                    <version>1.6</version>\n                    <executions>\n                        <execution>\n                            <id>signArtifact</id>\n                            <phase>verify</phase>\n                            <goals>\n                                <goal>sign</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </build>\n    </profile>\n</profiles>\n需要注意的是，因为 Maven Release Plugin 有个漏洞，release:perform 执行过程中签名可能会导致进程永久挂起。为了避免这种情况发生，可以在 Maven Release Plugin 中提供一个 mavenExecutorId 配置，整体样例配置代码如下：\n<build>\n    <plugins>\n        <plugin>\n            <groupId> org.apache.maven.plugins</groupId>\n            <artifactId>\n                maven-release-plugin\n            </artifactId>\n            <version>2.5.3</version>\n            <configuration>\n                <tagBase>https://Noble-PC:8443/svn/MvnDemoSSM/tags/svnDemo\n                </tagBase>\n                <branchBase>https://Noble-PC:8443/svn/MvnDemoSSM/\n                    branches/svnDemo\n                </branchBase>\n                <username>noble</username>\n                <password>noble</password>\n                <mavenExecutorId> forked-path</mavenExecutorId>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId> org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.6</version>\n            <executions>\n                <execution>\n                    <id> signArtifact</id>\n                    <phase>verify</phase>\n                    <goals>\n                        <goal>sign</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n到这里自动签名的配置就完成了。当 Maven 执行 release:perform 发布项目版本的时候，maven-gpg-plugin 就会自动对构件进行签名。在执行的过程中，会提示输入私钥的密码。\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);