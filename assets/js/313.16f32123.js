(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{804:function(n,o,t){"use strict";t.r(o);var i=t(6),r=Object(i.a)({},(function(){var n=this.$createElement,o=this._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[o("h2",{attrs:{id:"springboot快速搭建"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#springboot快速搭建"}},[this._v("#")]),this._v(" SpringBoot快速搭建")]),this._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[this._v("我们说 SpringBoot 是 Spring 框架对“约定优先于配置（Convention Over Configuration）”理念的最佳实践的产物，一个典型的 SpringBoot 应用本质上其实就是一个基于 Spring 框架的应用，而如果大家对 Spring 框架已经了如指掌，那么，在我们一步步揭开 SpringBoot 微框架的面纱之后，大家就会发现“阳光之下，并无新事”。\n\n一个典型的 SpringBoot 应用长什么样子呢？下面我们快速搭建一个SpringBoot 应用。\n\n1）打开浏览器，输入网址 [spring](http://start.spring.io/)\n\n2）创建一个最简单的依赖 Web 模块的 SpringBoot 应用，填写项目信息，如图 1 所示。\n\n我们在此以 Maven 作为项目构建方式，Spring Boot 还支持以 Gradle 作为项目构建工具。部署形式以 jar 包形式，当然也可以用传统的 war 包形式。Spring Boot 选择2.1.6，Spring boot 还支持以 Groovy 语言开发，应用中选择 Java 作为开发语言。\n\n我们会得到一个 SpringBoot 应用的启动类，如下面代码所示：\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n\n所有的 SpringBoot 无论怎么定制，本质上与上面的启动类代码是一样的，而以上代码示例中，Annotation 定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，那么，要揭开 SpringBoot 应用的奥秘，很明显的，我们只要先从这两位开始就可以了。\n\n")])])])])}),[],!1,null,null,null);o.default=r.exports}}]);