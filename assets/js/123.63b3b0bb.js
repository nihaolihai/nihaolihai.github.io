(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{611:function(a,t,r){"use strict";r.r(t);var n=r(6),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"java-character-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-character-类"}},[a._v("#")]),a._v(" Java Character 类")]),a._v(" "),r("p",[a._v("Character 类用于对单个字符进行操作。")]),a._v(" "),r("p",[a._v("Character 类在对象中包装一个基本类型 char 的值")]),a._v(" "),r("p",[a._v("实例\nchar ch = 'a';")]),a._v(" "),r("p",[a._v("// Unicode 字符表示形式\nchar uniChar = '\\u039A';")]),a._v(" "),r("p",[a._v("// 字符数组\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。")]),a._v(" "),r("p",[a._v("Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：")]),a._v(" "),r("p",[a._v("Character ch = new Character('a');\n在某些情况下，Java编译器会自动创建一个Character对象。")]),a._v(" "),r("p",[a._v("例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。")]),a._v(" "),r("p",[a._v("实例\n// 原始字符 'a' 装箱到 Character 对象 ch 中\nCharacter ch = 'a';")]),a._v(" "),r("p",[a._v("// 原始字符 'x' 用 test 方法装箱\n// 返回拆箱的值到 'c'\nchar c = test('x');\n转义序列\n前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。")]),a._v(" "),r("p",[a._v("下面列表展示了Java的转义序列：")]),a._v(" "),r("p",[a._v("转义序列\t描述\n\\t\t在文中该处插入一个tab键\n\\b\t在文中该处插入一个后退键\n\\n\t在文中该处换行\n\\r\t在文中该处插入回车\n\\f\t在文中该处插入换页符\n'\t在文中该处插入单引号\n\"\t在文中该处插入双引号\n\\\t在文中该处插入反斜杠\n实例\n当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。")]),a._v(" "),r("p",[a._v("以下实例转义双引号并输出：")]),a._v(" "),r("p",[a._v("Test.java 文件代码：\npublic class Test {")]),a._v(" "),r("p",[a._v('public static void main(String args[]) {\nSystem.out.println("访问"菜鸟教程!"");\n}\n}\n以上实例编译运行结果如下：')]),a._v(" "),r("p",[a._v('访问"菜鸟教程!"\nCharacter 方法\n下面是Character类的方法：')]),a._v(" "),r("p",[a._v("序号\t方法与描述\n1\tisLetter()\n是否是一个字母\n2\tisDigit()\n是否是一个数字字符\n3\tisWhitespace()\n是否是一个空白字符\n4\tisUpperCase()\n是否是大写字母\n5\tisLowerCase()\n是否是小写字母\n6\ttoUpperCase()\n指定字母的大写形式\n7\ttoLowerCase()\n指定字母的小写形式\n8\ttoString()\n返回字符的字符串形式，字符串的长度仅为1\n对于方法的完整列表，请参考的 java.lang.Character API 规范。")])])}),[],!1,null,null,null);t.default=e.exports}}]);