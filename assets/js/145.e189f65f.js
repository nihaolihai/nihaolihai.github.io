(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{638:function(n,t,i){"use strict";i.r(t);var s=i(6),a=Object(s.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"java-arraylist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-arraylist"}},[this._v("#")]),this._v(" Java ArrayList")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。\n\nArrayList 继承了 AbstractList ，并实现了 List 接口。\n\n![RUNOOB 图标](https://www.runoob.com/wp-content/uploads/2020/06/ArrayList-1-768x406-1.png)\n\nArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\nimport java.util.ArrayList; // 引入 ArrayList 类\n\nArrayList<E> objectName =new ArrayList<>();　 // 初始化\nE: 泛型数据类型，用于设置 objectName 的数据类型，只能为引用数据类型。\nobjectName: 对象名。\nArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。\n\n添加元素\nArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 add() 方法:\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Google, Runoob, Taobao, Weibo]\n访问元素\n访问 ArrayList 中的元素可以使用 get() 方法：\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        System.out.println(sites.get(1));  // 访问第二个元素\n    }\n}\n注意：数组的索引值从 0 开始。\n\n以上实例，执行输出结果为：\n\nRunoob\n修改元素\n如果要修改 ArrayList 中的元素可以使用 set() 方法：\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        sites.set(2, "Wiki"); // 第一个参数为索引位置，第二个为要修改的值\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Google, Runoob, Wiki, Weibo]\n删除元素\n如果要删除 ArrayList 中的元素可以使用 remove() 方法：\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        sites.remove(3); // 删除第四个元素\n        System.out.println(sites);\n    }\n}\n以上实例，执行输出结果为：\n\n[Google, Runoob, Taobao]\n计算大小\n如果要计算 ArrayList 中的元素数量可以使用 size() 方法：\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        System.out.println(sites.size());\n    }\n}\n以上实例，执行输出结果为：\n\n4\n迭代数组列表\n我们可以使用 for 来迭代数组列表中的元素：\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        for (int i = 0; i < sites.size(); i++) {\n            System.out.println(sites.get(i));\n        }\n    }\n}\n以上实例，执行输出结果为：\n\nGoogle\nRunoob\nTaobao\nWeibo\n也可以使用 for-each 来迭代元素：\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Weibo");\n        for (String i : sites) {\n            System.out.println(i);\n        }\n    }\n}\n以上实例，执行输出结果为：\n\nGoogle\nRunoob\nTaobao\nWeibo\n其他的引用类型\nArrayList 中的元素实际上是对象，在以上实例中，数组列表元素都是字符串 String 类型。\n\n如果我们要存储其他类型，而 <E> 只能为引用数据类型，这时我们就需要使用到基本类型的包装类。\n\n基本类型对应的包装类表如下：\n\n基本类型\t引用类型\nboolean\tBoolean\nbyte\tByte\nshort\tShort\nint\tInteger\nlong\tLong\nfloat\tFloat\ndouble\tDouble\nchar\tCharacter\n此外，BigInteger、BigDecimal 用于高精度的运算，BigInteger 支持任意精度的整数，也是引用类型，但它们没有相对应的基本类型。\n\nArrayList<Integer> li=new Arraylist<>();     // 存放整数元素\nArrayList<Character> li=new Arraylist<>();   // 存放字符元素\n以下实例使用 ArrayList 存储数字(使用 Integer 类型):\n\n实例\nimport java.util.ArrayList;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n        myNumbers.add(10);\n        myNumbers.add(15);\n        myNumbers.add(20);\n        myNumbers.add(25);\n        for (int i : myNumbers) {\n            System.out.println(i);\n        }\n    }\n}\n以上实例，执行输出结果为：\n\n10\n15\n20\n25\nArrayList 排序\nCollections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。\n\n以下实例对字母进行排序：\n\n实例\nimport java.util.ArrayList;\nimport java.util.Collections;  // 引入 Collections 类\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<String> sites = new ArrayList<String>();\n        sites.add("Taobao");\n        sites.add("Wiki");\n        sites.add("Runoob");\n        sites.add("Weibo");\n        sites.add("Google");\n        Collections.sort(sites);  // 字母排序\n        for (String i : sites) {\n            System.out.println(i);\n        }\n    }\n}\n以上实例，执行输出结果为：\n\nGoogle\nRunoob\nTaobao\nWeibo\nWiki\n以下实例对数字进行排序：\n\n实例\nimport java.util.ArrayList;\nimport java.util.Collections;  // 引入 Collections 类\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n        ArrayList<Integer> myNumbers = new ArrayList<Integer>();\n        myNumbers.add(33);\n        myNumbers.add(15);\n        myNumbers.add(20);\n        myNumbers.add(34);\n        myNumbers.add(8);\n        myNumbers.add(12);\n\n        Collections.sort(myNumbers);  // 数字排序\n\n        for (int i : myNumbers) {\n            System.out.println(i);\n        }\n    }\n}\n以上实例，执行输出结果为：\n\n8\n12\n15\n20\n33\n34\nJava ArrayList 方法\nJava ArrayList 常用方法列表如下：\n\n方法\t描述\nadd()\t将元素插入到指定位置的 arraylist 中\naddAll()\t添加集合中的所有元素到 arraylist 中\nclear()\t删除 arraylist 中的所有元素\nclone()\t复制一份 arraylist\ncontains()\t判断元素是否在 arraylist\nget()\t通过索引值获取 arraylist 中的元素\nindexOf()\t返回 arraylist 中元素的索引值\nremoveAll()\t删除存在于指定集合中的 arraylist 里的所有元素\nremove()\t删除 arraylist 里的单个元素\nsize()\t返回 arraylist 里元素数量\nisEmpty()\t判断 arraylist 是否为空\nsubList()\t截取部分 arraylist 的元素\nset()\t替换 arraylist 中指定索引的元素\nsort()\t对 arraylist 元素进行排序\ntoArray()\t将 arraylist 转换为数组\ntoString()\t将 arraylist 转换为字符串\nensureCapacity()\t设置指定容量大小的 arraylist\nlastIndexOf()\t返回指定元素在 arraylist 中最后一次出现的位置\nretainAll()\t保留 arraylist 中在指定集合中也存在的那些元素\ncontainsAll()\t查看 arraylist 是否包含指定集合中的所有元素\ntrimToSize()\t将 arraylist 中的容量调整为数组中的元素个数\nremoveRange()\t删除 arraylist 中指定索引之间存在的元素\nreplaceAll()\t将给定的操作内容替换掉数组中每一个元素\nremoveIf()\t删除所有满足特定条件的 arraylist 元素\nforEach()\t遍历 arraylist 中每一个元素并执行特定操作\n\n[API](https://www.runoob.com/manual/jdk11api/java.base/java/util/ArrayList.html)\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);