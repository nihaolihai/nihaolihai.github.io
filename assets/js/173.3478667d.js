(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{662:function(n,t,a){"use strict";a.r(t);var e=a(6),o=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"java-基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-基本数据类型"}},[n._v("#")]),n._v(" Java 基本数据类型")]),n._v(" "),a("p",[n._v("变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。")]),n._v(" "),a("p",[n._v("内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。")]),n._v(" "),a("p",[n._v("因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。")]),n._v(" "),a("p",[n._v("Java 的两大数据类型:")]),n._v(" "),a("p",[n._v("内置数据类型\n引用数据类型\n内置数据类型\nJava语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。")]),n._v(" "),a("p",[n._v("byte：")]),n._v(" "),a("p",[n._v("byte 数据类型是8位、有符号的，以二进制补码表示的整数；\n最小值是 -128（-2^7）；\n最大值是 127（2^7-1）；\n默认值是 0；\nbyte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\n例子：byte a = 100，byte b = -50。\nshort：")]),n._v(" "),a("p",[n._v("short 数据类型是 16 位、有符号的以二进制补码表示的整数\n最小值是 -32768（-2^15）；\n最大值是 32767（2^15 - 1）；\nShort 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；\n默认值是 0；\n例子：short s = 1000，short r = -20000。\nint：")]),n._v(" "),a("p",[n._v("int 数据类型是32位、有符号的以二进制补码表示的整数；\n最小值是 -2,147,483,648（-2^31）；\n最大值是 2,147,483,647（2^31 - 1）；\n一般地整型变量默认为 int 类型；\n默认值是 0 ；\n例子：int a = 100000, int b = -200000。\nlong：")]),n._v(" "),a("p",[n._v('long 数据类型是 64 位、有符号的以二进制补码表示的整数；\n最小值是 -9,223,372,036,854,775,808（-2^63）；\n最大值是 9,223,372,036,854,775,807（2^63 -1）；\n这种类型主要使用在需要比较大整数的系统上；\n默认值是 0L；\n例子： long a = 100000L，Long b = -200000L。\n"L"理论上不分大小写，但是若写成"l"容易与数字"1"混淆，不容易分辩。所以最好大写。\nfloat：')]),n._v(" "),a("p",[n._v("float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；\nfloat 在储存大型浮点数组的时候可节省内存空间；\n默认值是 0.0f；\n浮点数不能用来表示精确的值，如货币；\n例子：float f1 = 234.5f。\ndouble：")]),n._v(" "),a("p",[n._v("double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；\n浮点数的默认类型为double类型；\ndouble类型同样不能表示精确的值，如货币；\n默认值是 0.0d；\n例子：double d1 = 123.4。\nboolean：")]),n._v(" "),a("p",[n._v("boolean数据类型表示一位的信息；\n只有两个取值：true 和 false；\n这种类型只作为一种标志来记录 true/false 情况；\n默认值是 false；\n例子：boolean one = true。\nchar：")]),n._v(" "),a("p",[n._v("char类型是一个单一的 16 位 Unicode 字符；\n最小值是 \\u0000（即为 0）；\n最大值是 \\uffff（即为65、535）；\nchar 数据类型可以储存任何字符；\n例子：char letter = 'A';。\n实例\n对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：")]),n._v(" "),a("p",[n._v("实例\npublic class PrimitiveTypeTest {"),a("br"),n._v("\npublic static void main(String[] args) {"),a("br"),n._v("\n// byte"),a("br"),n._v('\nSystem.out.println("基本类型：byte 二进制位数：" + Byte.SIZE);'),a("br"),n._v('\nSystem.out.println("包装类：java.lang.Byte");'),a("br"),n._v('\nSystem.out.println("最小值：Byte.MIN_VALUE=" + Byte.MIN_VALUE);'),a("br"),n._v('\nSystem.out.println("最大值：Byte.MAX_VALUE=" + Byte.MAX_VALUE);'),a("br"),n._v("\nSystem.out.println();")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('    // short  \n    System.out.println("基本类型：short 二进制位数：" + Short.SIZE);  \n    System.out.println("包装类：java.lang.Short");  \n    System.out.println("最小值：Short.MIN_VALUE=" + Short.MIN_VALUE);  \n    System.out.println("最大值：Short.MAX_VALUE=" + Short.MAX_VALUE);  \n    System.out.println();  \n\n    // int  \n    System.out.println("基本类型：int 二进制位数：" + Integer.SIZE);  \n    System.out.println("包装类：java.lang.Integer");  \n    System.out.println("最小值：Integer.MIN_VALUE=" + Integer.MIN_VALUE);  \n    System.out.println("最大值：Integer.MAX_VALUE=" + Integer.MAX_VALUE);  \n    System.out.println();  \n\n    // long  \n    System.out.println("基本类型：long 二进制位数：" + Long.SIZE);  \n    System.out.println("包装类：java.lang.Long");  \n    System.out.println("最小值：Long.MIN_VALUE=" + Long.MIN_VALUE);  \n    System.out.println("最大值：Long.MAX_VALUE=" + Long.MAX_VALUE);  \n    System.out.println();  \n\n    // float  \n    System.out.println("基本类型：float 二进制位数：" + Float.SIZE);  \n    System.out.println("包装类：java.lang.Float");  \n    System.out.println("最小值：Float.MIN_VALUE=" + Float.MIN_VALUE);  \n    System.out.println("最大值：Float.MAX_VALUE=" + Float.MAX_VALUE);  \n    System.out.println();  \n\n    // double  \n    System.out.println("基本类型：double 二进制位数：" + Double.SIZE);  \n    System.out.println("包装类：java.lang.Double");  \n    System.out.println("最小值：Double.MIN_VALUE=" + Double.MIN_VALUE);  \n    System.out.println("最大值：Double.MAX_VALUE=" + Double.MAX_VALUE);  \n    System.out.println();  \n\n    // char  \n    System.out.println("基本类型：char 二进制位数：" + Character.SIZE);  \n    System.out.println("包装类：java.lang.Character");  \n    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  \n    System.out.println("最小值：Character.MIN_VALUE="  \n            + (int) Character.MIN_VALUE);  \n    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  \n    System.out.println("最大值：Character.MAX_VALUE="  \n            + (int) Character.MAX_VALUE);  \n}  \n')])])]),a("p",[n._v("}")]),n._v(" "),a("p",[n._v("运行实例 »\n编译以上代码输出结果如下所示：")]),n._v(" "),a("p",[n._v("基本类型：byte 二进制位数：8\n包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128\n最大值：Byte.MAX_VALUE=127")]),n._v(" "),a("p",[n._v("基本类型：short 二进制位数：16\n包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767")]),n._v(" "),a("p",[n._v("基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647")]),n._v(" "),a("p",[n._v("基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807")]),n._v(" "),a("p",[n._v("基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38")]),n._v(" "),a("p",[n._v("基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308")]),n._v(" "),a("p",[n._v('基本类型：char 二进制位数：16\n包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535\nFloat和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的"E+数字"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。')]),n._v(" "),a("p",[n._v("实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。")]),n._v(" "),a("p",[n._v("类型默认值\n下表列出了 Java 各个类型的默认值：")]),n._v(" "),a("p",[n._v("数据类型\t默认值\nbyte\t0\nshort\t0\nint\t0\nlong\t0L\nfloat\t0.0f\ndouble\t0.0d\nchar\t'u0000'\nString (or any object)\tnull\nboolean\tfalse\n实例\npublic class Test {\nstatic boolean bool;\nstatic byte by;\nstatic char ch;\nstatic double d;\nstatic float f;\nstatic int i;\nstatic long l;\nstatic short sh;\nstatic String str;")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('public static void main(String[] args) {\n    System.out.println("Bool :" + bool);\n    System.out.println("Byte :" + by);\n    System.out.println("Character:" + ch);\n    System.out.println("Double :" + d);\n    System.out.println("Float :" + f);\n    System.out.println("Integer :" + i);\n    System.out.println("Long :" + l);\n    System.out.println("Short :" + sh);\n    System.out.println("String :" + str);\n}\n')])])]),a("p",[n._v("}\n实例输出结果为：")]),n._v(" "),a("p",[n._v('Bool     :false\nByte     :0\nCharacter:\nDouble   :0.0\nFloat    :0.0\nInteger  :0\nLong     :0\nShort    :0\nString   :null\n引用类型\n在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。\n对象、数组都是引用数据类型。\n所有引用类型的默认值都是null。\n一个引用变量可以用来引用任何与之兼容的类型。\n例子：Site site = new Site("Runoob")。\nJava 常量\n常量在程序运行时是不能被修改的。')]),n._v(" "),a("p",[n._v("在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：")]),n._v(" "),a("p",[n._v("final double PI = 3.1415927;\n虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。")]),n._v(" "),a("p",[n._v("字面量可以赋给任何内置类型的变量。例如：")]),n._v(" "),a("p",[n._v("byte a = 68;\nchar a = 'A'\nbyte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。")]),n._v(" "),a("p",[n._v("当使用字面量的时候，前缀 0 表示 8 进制，而前缀 0x 代表 16 进制, 例如：")]),n._v(" "),a("p",[n._v("int decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：")]),n._v(" "),a("p",[n._v('"Hello World"\n"two\\nlines"\n""This is in quotes""\n字符串常量和字符常量都可以包含任何Unicode字符。例如：')]),n._v(" "),a("p",[n._v("char a = '\\u0001';\nString a = \"\\u0001\";\nJava语言支持一些特殊的转义字符序列。")]),n._v(" "),a("p",[n._v("符号\t字符含义\n\\n\t换行 (0x0a)\n\\r\t回车 (0x0d)\n\\f\t换页符(0x0c)\n\\b\t退格 (0x08)\n\\0\t空字符 (0x0)\n\\s\t空格 (0x20)\n\\t\t制表符\n\"\t双引号\n'\t单引号\n\\\t反斜杠\n\\ddd\t八进制字符 (ddd)\n\\uxxxx\t16进制Unicode字符 (xxxx)\n自动类型转换\n整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。")]),n._v(" "),a("p",[n._v("转换从低级到高级。")]),n._v(" "),a("p",[n._v("低  ------------------------------------\x3e  高")]),n._v(" "),a("p",[n._v("byte,short,char—> int —> long—> float —> double\n数据类型转换必须满足如下规则：")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("不能对boolean类型进行类型转换。")])]),n._v(" "),a("li",[a("p",[n._v("不能把对象类型转换成不相关类的对象。")])]),n._v(" "),a("li",[a("p",[n._v("在把容量大的类型转换为容量小的类型时必须使用强制类型转换。")])]),n._v(" "),a("li",[a("p",[n._v("转换过程中可能导致溢出或损失精度，例如：")])])]),n._v(" "),a("p",[n._v("int i =128;"),a("br"),n._v("\nbyte b = (byte)i;\n因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。")]),n._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[n._v("浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：")])]),n._v(" "),a("p",[n._v("(int)23.7 == 23;"),a("br"),n._v("\n(int)-45.89f == -45\n自动类型转换\n必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。")]),n._v(" "),a("p",[n._v("实例\npublic class ZiDongLeiZhuan{\npublic static void main(String[] args){\nchar c1='a';//定义一个char类型\nint i1 = c1;//char自动类型转换为int\nSystem.out.println(\"char自动类型转换为int后的值等于\"+i1);\nchar c2 = 'A';//定义一个char类型\nint i2 = c2+1;//char 类型和 int 类型计算\nSystem.out.println(\"char类型和int计算后的值等于\"+i2);\n}\n}\n运行结果为:")]),n._v(" "),a("p",[n._v("char自动类型转换为int后的值等于97\nchar类型和int计算后的值等于66\n解析：c1 的值为字符 a ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 i2=65+1=66。")]),n._v(" "),a("p",[n._v("强制类型转换")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("条件是转换的数据类型必须是兼容的。")])]),n._v(" "),a("li",[a("p",[n._v("格式：(type)value type是要强制类型转换后的数据类型 实例：")])])]),n._v(" "),a("p",[n._v('实例\npublic class QiangZhiZhuanHuan{\npublic static void main(String[] args){\nint i1 = 123;\nbyte b = (byte)i1;//强制类型转换为byte\nSystem.out.println("int强制类型转换为byte后的值等于"+b);\n}\n}\n运行结果：')]),n._v(" "),a("p",[n._v("int强制类型转换为byte后的值等于123\n隐含强制类型转换")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("整数的默认类型是 int。")])]),n._v(" "),a("li",[a("p",[n._v("浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。")])])]),n._v(" "),a("p",[n._v("这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。")])])}),[],!1,null,null,null);t.default=o.exports}}]);