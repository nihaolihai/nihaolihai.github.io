(window.webpackJsonp=window.webpackJsonp||[]).push([[375],{864:function(n,t,i){"use strict";i.r(t);var o=i(6),r=Object(o.a)({},(function(){var n=this,t=n.$createElement,i=n._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[i("h2",{attrs:{id:"spring-boot-admin"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-admin"}},[n._v("#")]),n._v(" Spring Boot Admin")]),n._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[n._v("Spring Boot 有一个非常好用的监控和管理的源软件，这个软件就是 Spring Boot Admin。该软件能够将 Actuator 中的信息进行界面化的展示，也可以监控所有 Spring Boot 应用的健康状况，提供实时警报功能。\n\n主要的功能点有：\n显示应用程序的监控状态\n应用程序上下线监控\n查看 JVM，线程信息\n可视化的查看日志以及下载日志文件\n动态切换日志级别\nHttp 请求信息跟踪\n其他功能点……\n\n可点击 https://github.com/codecentric/spring-boot-admin 更多了解 Spring-boot-admin。\n创建Spring Boot Admin项目\n创建一个 Spring Boot 项目，用于展示各个服务中的监控信息，加上 Spring Boot Admin 的依赖，具体代码如下所示。\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-server</artifactId>\n    <version>2.0.2</version>\n</dependency>\n\n创建一个启动类，具体代码如下所示。\n@EnableAdminServer\n@SpringBootApplication\npublic class App {\n    public static void main(String[] args) {\n        SpringApplication.run(App.class, args);\n    }\n}\n在属性文件中增加端口配置信息：\nserver.port=9091\n\n启动程序，访问 Web 地址 http://localhost:9091 就可以看到主页面了，这个时候是没有数据的，如图 1 所示。\n\nSpring Boot Admin主页\n图 1  Spring Boot Admin主页\n将服务注册到 Spring Boot Admin\n创建一个 Spring Boot 项目，名称为 spring-boot-admin-client。添加 Spring Boot Admin Client 的 Maven 依赖，代码如下所示。\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n    <version>2.0.2</version>\n</dependency>\n\n然后在属性文件中添加下面的配置：\nserver.port=9092\nspring.boot.admin.client.url=http://localhost:9091\n\n\nspring.boot.admin.client.url：Spring Boot Admin 服务端地址。\n\n将服务注册到 Admin 之后我们就可以在 Admin 的 Web 页面中看到我们注册的服务信息了，如图 2 所示。\n\nSpring Boot Admin主页（有数据）\n图 2  Spring Boot Admin主页（有数据）\n\n点击实例信息跳转到详细页面，可以查看更多的信息，如图 3 所示。\n\nSpring Boot Admin详情\n图 3  Spring Boot Admin详情\n\n可以看到详情页面并没有展示丰富的监控数据，这是因为没有将 spring-boot-admin-client 的端点数据暴露出来。\n\n在 spring-boot-admin-client 中加入 actuator 的 Maven 依赖，代码如下所示。\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n然后在属性文件中追加下面的配置：\nmanagement.endpoints.web.exposure.include=*\n\nmanagement.endpoints.web.exposure.include：暴露所有的 actuator 端点信息重启 spring-boot-admin-client，我们就可以在详情页面看到更多的数据，如图 4 所示。\n\nSpring Boot Admin详情（有数据）\n图 4  Spring Boot Admin详情（有数据）\n监控内容介绍\n自定义的 Info 信息、健康状态、元数据，如图 5 所示。\n\nSpring Boot Admin数据展示（一）\n图 5  Spring Boot Admin数据展示（一）\n\nCPU、线程等信息如图 6 所示。\n\nSpring Boot Admin数据展示（二）\n图 6  Spring Boot Admin数据展示（二）\n\n内存使用情况如图 7 所示。\n\nSpring Boot Admin数据展示（三）\n图 7  Spring Boot Admin数据展示（三）\n\n配置信息如图 8 所示。\n\nSpring Boot Admin数据展示（四）\n图 8  Spring Boot Admin数据展示（四）\n\n日志级别调整如图 9 所示。\n\nSpring Boot Admin数据展示（五）\n图 9  Spring Boot Admin数据展示（五）\n\nHttp请求信息如图 10 所示。\n\nSpring Boot Admin数据展示（六）\n图 10  Spring Boot Admin数据展示（六）\n如何在Admin中查看各个服务的日志\nSpring Boot Admin 提供了基于 Web 页面的方式实时查看服务输出的本地日志，前提是服务中配置了 logging.file。\n\n我们在 spring-boot-admin-client 的属性文件中增加下面的内容：\nlogging.file=/Users/zhangsan/Downloads/spring-boot-admin-client.log\n\n重启服务，就可以在 Admin Server 的 Web 页面中看到新加了一个 Logfile 菜单，如图 11 所示。\n\n")])])]),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9125001O0.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR913002W26.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9131004543.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9131601Y2.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9131Q6429.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9132140R8.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR91322501P.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR913254U91.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR913295E20.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9134320348.png",alt:"RUNOOB 图标"}})]),n._v(" "),i("p",[i("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190829/5-1ZR9160446321.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);