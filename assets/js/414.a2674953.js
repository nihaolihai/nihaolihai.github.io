(window.webpackJsonp=window.webpackJsonp||[]).push([[414],{901:function(n,r,e){"use strict";e.r(r);var o=e(6),t=Object(o.a)({},(function(){var n=this.$createElement,r=this._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[r("h2",{attrs:{id:"spring-mvc-converter-类型转换器-详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-converter-类型转换器-详解"}},[this._v("#")]),this._v(" Spring MVC Converter（类型转换器）详解")]),this._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v('Spring MVC 框架的 Converter<S，T> 是一个可以将一种数据类型转换成另一种数据类型的接口，这里 S 表示源类型，T 表示目标类型。开发者在实际应用中使用框架内置的类型转换器基本上就够了，但有时需要编写具有特定功能的类型转换器。\n内置的类型转换器\n在 Spring MVC 框架中，对于常用的数据类型，开发者无须创建自己的类型转换器，因为 Spring MVC 框架有许多内置的类型转换器用于完成常用的类型转换。Spring MVC 框架提供的内置类型转换包括以下几种类型。\n1）标量转换器\n名称\t作用\nStringToBooleanConverter\tString 到 boolean 类型转换\nObjectToStringConverter\tObject 到 String 转换，调用 toString 方法转换\nStringToNumberConverterFactory\tString 到数字转换（例如 Integer、Long 等）\nNumberToNumberConverterFactory\t数字子类型（基本类型）到数字类型（包装类型）转换\nStringToCharacterConverter\tString 到 Character 转换，取字符串中的第一个字符\nNumberToCharacterConverter\t数字子类型到 Character 转换\nCharacterToNumberFactory\tCharacter 到数字子类型转换\nStringToEnumConverterFactory\tString 到枚举类型转换，通过 Enum.valueOf 将字符串转换为需要的枚举类型\nEnumToStringConverter\t枚举类型到 String 转换，返回枚举对象的 name 值\nStringToLocaleConverter\tString 到 java.util.Locale 转换\nPropertiesToStringConverter\tjava.util.Properties 到 String 转换，默认通过 ISO-8859-1 解码\nStringToPropertiesConverter\tString 到 java.util.Properties 转换，默认使用 ISO-8859-1 编码\n2）集合、数组相关转换器\n名称\t作用\nArrayToCollectionConverter\t任意数组到任意集合（List、Set）转换\nCollectionToArrayConverter\t任意集合到任意数组转换\nArrayToArrayConverter\t任意数组到任意数组转换\nCollectionToCollectionConverter\t集合之间的类型转换\nMapToMapConverter\tMap之间的类型转换\nArrayToStringConverter\t任意数组到 String 转换\nStringToArrayConverter\t字符串到数组的转换，默认通过“，”分割，且去除字符串两边的空格（trim）\nArrayToObjectConverter\t任意数组到 Object 的转换，如果目标类型和源类型兼容，直接返回源对象；否则返回数组的第一个元素并进行类型转换\nObjectToArrayConverter\tObject 到单元素数组转换\nCollectionToStringConverter\t任意集合（List、Set）到 String 转换\nStringToCollectionConverter\tString 到集合（List、Set）转换，默认通过“，”分割，且去除字符串两边的空格（trim）\nCollectionToObjectConverter\t任意集合到任意 Object 的转换，如果目标类型和源类型兼容，直接返回源对象；否则返回集合的第一个元素并进行类型转换\nObjectToCollectionConverter\tObject 到单元素集合的类型转换类型转换是在视图与控制器相互传递数据时发生的。Spring MVC 框架对于基本类型（例如 int、long、float、double、boolean 以及 char 等）已经做好了基本类型转换。例如，对于 addGoods.jsp 的提交请求，可以由以下处理方法来接收请求参数并处理：\npackage controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n@Controller\npublic class Goodsontroller {\n    @RequestMapping("/addGoods")\n    public String add(String goodsname, double goodsprice, int goodsnumber) {\n        double total = goodsprice * goodsnumber;\n        System.out.println(total);\n        return "success";\n    }\n}\n注意：在使用内置类型转换器时，请求参数输入值与接收参数类型要兼容，否则会报 400 错误。请求参数类型与接收参数类型不兼容问题需要学习输入校验后才可解决。\n自定义类型转换器\n当 Spring MVC 框架内置的类型转换器不能满足需求时，开发者可以开发自己的类型转换器。\n\n例如有一个应用 springMVCDemo03 希望用户在页面表单中输入信息来创建商品信息。当输入“apple，10.58，200”时表示在程序中自动创建一个 new Goods，并将“apple”值自动赋给 goodsname 属性，将“10.58”值自动赋给 goodsprice 属性，将“200”值自动赋给 goodsnumber 属性。\n\nspringMVCDemo03 应用与 springMVCDemo02 具有相同的 JAR 包、web.xml。\n\n如果想实现上述应用，需要做以下 5 件事：\n创建实体类。\n创建控制器类。\n创建自定义类型转换器类。\n注册类型转换器。\n创建相关视图。\n\n按照上述步骤采用自定义类型转换器完成需求。\n1）创建实体类\n在 springMVCDemo03 的 src 目录下创建 pojo 包，并在该包中创建名为 GoodsModel 的实体类，代码如下：\npackage pojo;\npublic class GoodsModel {\n    private String goodsname;\n    private double goodsprice;\n    private int goodsnumber;\n    // 省略setter和getter方法\n}\n2）创建控制器类\n在 springMVCDemo03 的 src 目录下创建 controller 包，并在该包中创建名为 ConverterController 的控制器类，代码如下：\npackage controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport pojo.GoodsModel;\n@Controller\n@RequestMapping("/my")\npublic class ConverterController {\n    @RequestMapping("/converter")\n    /*\n     * 使用@RequestParam\n     * ("goods")接收请求参数，然后调用自定义类型转换器GoodsConverter将字符串值转换为GoodsModel的对象gm\n     */\n    public String myConverter(@RequestParam("goods") GoodsModel gm, Model model) {\n        model.addAttribute("goods", gm);\n        return "showGoods";\n    }\n}\n3）创建自定义类型转换器类\n自定义类型转换器类需要实现 Converter<S,T> 接口，重写 convert(S) 接口方法。\n\nconvert(S) 方法的功能是将源数据类型 S 转换成目标数据类型 T。在 springMVCDemo03 的 src 目录下创建 converter 包，并在该包中创建名为 GoodsConverter 的自定义类型转换器类，代码如下：\npackage converter;\nimport org.springframework.core.convert.converter.Converter;\nimport pojo.GoodsModel;\npublic class GoodsConverter implements Converter<String, GoodsModel> {\n    public GoodsModel convert(String source) {\n        // 创建一个Goods实例\n        GoodsModel goods = new GoodsModel();\n        // 以“，”分隔\n        String stringvalues[] = source.split(",");\n        if (stringvalues != null && stringvalues.length == 3) {\n            // 为Goods实例赋值\n            goods.setGoodsname(stringvalues[0]);\n            goods.setGoodsprice(Double.parseDouble(stringvalues[1]));\n            goods.setGoodsnumber(Integer.parseInt(stringvalues[2]));\n            return goods;\n        } else {\n            throw new IllegalArgumentException(String.format(\n                    "类型转换失败， 需要格式\'apple, 10.58,200 \',但格式是[% s ] ", source));\n        }\n    }\n}\n4）注册类型转换器\n在 springMVCDemo03 的 WEB-INF 目录下创建配置文件 springmvc-servlet.xml，并在配置文件中注册自定义类型转换器，配置文件代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n    \x3c!-- 使用扫描机制扫描控制器类，控制器类都在controller包及其子包下 --\x3e\n    <context:component-scan base-package="controller" />\n    \x3c!--注册类型转换器GoodsConverter--\x3e\n    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">\n        <property name="converters">\n            <list>\n                <bean class="converter.GoodsConverter"/>\n            </list>\n        </property>\n    </bean>\n    <bean\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n        <property name="prefix" value="/WEB-INF/jsp/" />\n        <property name="suffix" value=".jsp" />\n    </bean>\n</beans>\n5）创建相关视图\n在 springMVCDemo03 应用的 WebContent 目录下创建信息采集页面 input.jsp，核心代码如下：\n<form action="${pageContext.request.contextPath}/my/converter" method= "post">\n    请输入商品信息（格式为apple, 10.58,200）:\n    <input type="text" name="goods" /><br>\n    <input type="submit" value="提交" />\n</form>\n\n在 springMVCDemo03 应用的 /WEB-INF/jsp 目录下创建信息显示页面 showGoods.jsp，核心代码如下：\n<body>\n    您创建的商品信息如下：\n    \x3c!-- 使用EL表达式取出model中的goods信息 --\x3e\n    商品名称为:${goods.goodsname }\n    商品价格为:${goods.goodsprice }\n    商品名称为:${goods.goodsnumber }\n</body>\n最后，使用地址“ http://localhost：8080/springMVCDemo03 /input.jsp ”测试应用。\n\n')])])])])}),[],!1,null,null,null);r.default=t.exports}}]);