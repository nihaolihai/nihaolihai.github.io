(window.webpackJsonp=window.webpackJsonp||[]).push([[439],{929:function(n,e,t){"use strict";t.r(e);var r=t(6),a=Object(r.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-mvc文件下载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc文件下载"}},[this._v("#")]),this._v(" Spring MVC文件下载")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('文件下载的实现方法\n实现文件下载有以下两种方法：\n通过超链接实现下载。\n利用程序编码实现下载。\n\n通过超链接实现下载固然简单，但暴露了下载文件的真实位置，并且只能下载存放在 Web 应用程序所在的目录下的文件。\n\n利用程序编码实现下载可以增加安全访问控制，还可以从任意位置提供下载的数据，可以将文件存放到 Web 应用程序以外的目录中，也可以将文件保存到数据库中。\n\n利用程序实现下载需要设置两个报头：\n\n1）Web 服务器需要告诉浏览器其所输出内容的类型不是普通文本文件或 HTML 文件，而是一个要保存到本地的下载文件，这需要设置 Content-Type 的值为 application/x-msdownload。\n\n2）Web 服务器希望浏览器不直接处理相应的实体内容，而是由用户选择将相应的实体内容保存到一个文件中，这需要设置 Content-Disposition 报头。\n\n该报头指定了接收程序处理数据内容的方式，在 HTTP 应用中只有 attachment 是标准方式，attachment 表示要求用户干预。在 attachment 后面还可以指定 filename 参数，该参数是服务器建议浏览器将实体内容保存到文件中的文件名称。\n\n设置报头的示例如下：\nresponse.setHeader("Content-Type", "application/x-msdownload");\nresponse.setHeader("Content-Disposition", "attachment;filename="+filename);\n\n文件下载的过程\n下面继续通过 springMVCDemo11 应用讲述利用程序实现下载的过程，要求从《Spring MVC单文件上传》上传文件的目录（workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\springMVCDemo11\\uploadfiles）中下载文件，具体开发步骤如下：\n1）编写控制器类\n首先编写控制器类 FileDownController，在该类中有 3 个方法，即 show、down 和 toUTF8String。其中，show 方法获取被下载的文件名称；down 方法执行下载功能；toUTF8String 方法是下载保存时中文文件名的字符编码转换方法。\n\nFileDownController 类的代码如下：\npackage controller;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n@Controller\npublic class FileDownController {\n    // 得到一个用来记录日志的对象，在打印时标记打印的是哪个类的信息\n    private static final Log logger = LogFactory\n            .getLog(FileDownController.class);\n    /**\n     * 显示要下载的文件\n     */\n    @RequestMapping("showDownFiles")\n    public String show(HttpServletRequest request, Model model) {\n        // 从 workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\\n        // tmp0\\wtpwebapps\\springMVCDemo11\\下载\n        String realpath = request.getServletContext()\n                .getRealPath("uploadfiles");\n        File dir = new File(realpath);\n        File files[] = dir.listFiles();\n        // 获取该目录下的所有文件名\n        ArrayList<String> fileName = new ArrayList<String>();\n        for (int i = 0; i < files.length; i++) {\n            fileName.add(files[i].getName());\n        }\n        model.addAttribute("files", fileName);\n        return "showDownFiles";\n    }\n    /**\n     * 执行下载\n     */\n    @RequestMapping("down")\n    public String down(@RequestParam String filename,\n            HttpServletRequest request, HttpServletResponse response) {\n        String aFilePath = null; // 要下载的文件路径\n        FileInputStream in = null; // 输入流\n        ServletOutputStream out = null; // 输出流\n        try {\n            // 从workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\\n            // tmp0\\wtpwebapps下载\n            aFilePath = request.getServletContext().getRealPath("uploadfiles");\n            // 设置下载文件使用的报头\n            response.setHeader("Content-Type", "application/x-msdownload");\n            response.setHeader("Content-Disposition", "attachment; filename="\n                    + toUTF8String(filename));\n            // 读入文件\n            in = new FileInputStream(aFilePath + "\\\\" + filename);\n            // 得到响应对象的输出流，用于向客户端输出二进制数据\n            out = response.getOutputStream();\n            out.flush();\n            int aRead = 0;\n            byte b[] = new byte[1024];\n            while ((aRead = in.read(b)) != -1 & in != null) {\n                out.write(b, 0, aRead);\n            }\n            out.flush();\n            in.close();\n            out.close();\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n        logger.info("下载成功");\n        return null;\n    }\n    /**\n     * 下载保存时中文文件名的字符编码转换方法\n     */\n    public String toUTF8String(String str) {\n        StringBuffer sb = new StringBuffer();\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            // 取出字符中的每个字符\n            char c = str.charAt(i);\n            // Unicode码值为0~255时，不做处理\n            if (c >= 0 && c <= 255) {\n                sb.append(c);\n            } else { // 转换 UTF-8 编码\n                byte b[];\n                try {\n                    b = Character.toString(c).getBytes("UTF-8");\n                } catch (UnsupportedEncodingException e) {\n                    e.printStackTrace();\n                    b = null;\n                }\n                // 转换为%HH的字符串形式\n                for (int j = 0; j < b.length; j++) {\n                    int k = b[j];\n                    if (k < 0) {\n                        k &= 255;\n                    }\n                    sb.append("%" + Integer.toHexString(k).toUpperCase());\n                }\n            }\n        }\n        return sb.toString();\n    }\n}\n2）创建文件列表页面\n下载文件示例需要一个显示被下载文件的 JSP 页面 showDownFiles.jsp，代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title>Insert title here</title>\n</head>\n<body>\n    <table>\n        <tr>\n            <td>被下载的文件名</td>\n        </tr>\n        \x3c!--遍历 model中的 files--\x3e\n        <c:forEach items="${files}" var="filename">\n            <tr>\n                <td>\n                    <a href="${pageContext.request.contextPath }/down?filename=${filename}">${filename}</a>\n                </td>\n            </tr>\n        </c:forEach>\n    </table>\n</body>\n</html>\n3）测试下载功能\n发布 springMVCDemo11 应用到 Tomcat 服务器并启动 Tomcat 服务器，然后通过地址“http://localhost:8080/springMVCDemo11/showDownFiles”测试下载示例，运行结果如图 1 所示。\n\n')])])]),e("p",[e("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190718/5-1ZGQF544b8.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);