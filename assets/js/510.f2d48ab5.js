(window.webpackJsonp=window.webpackJsonp||[]).push([[510],{999:function(n,t,e){"use strict";e.r(t);var o=e(6),i=Object(o.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"rndemo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rndemo"}},[this._v("#")]),this._v(" rndemo")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//打包\nmkdir output\ncd output\nmkdir android\nmkdir ios\ncd ../\nreact-native bundle --platform android --dev false --entry-file index.android.js --bundle-output output/android/index.android.bundle --assets-dest output/android && react-native bundle --platform ios --dev false --entry-file index.ios.js --bundle-output output/ios/index.ios.bundle --assets-dest output/ios\n\n[reactnative](https://reactnative.cn/docs/refreshcontrol/)\n\n|_  node_modules  第三方依赖库存放路径，一般无需关注。可以删除后执行yarn重新拉取\n    |_  android.json/ios.json  这两个文件是用于给APP判断RN版本用的，与RN开发无关（无关？）\n    |_  package.json 第三方依赖文件。样例工程里提供了部分组件，自己有需要的话添加。注意react-native的版本不要改，保持0.47.2。没用到的组件删除，不要保留引用。\n    |_  output  本地打包最终输出目录，里面有android和ios两个子文件夹\n    |_  src  工程代码文件夹\n          |_  pages   页面文件，建议页面直接平铺放置\n          |_  service  后台接口调用\n                  |_    AppService.js 在这里定义你的项目需要用到的后台接口请求\n                  |_    rpc.js               共通的网络请求实现类，一般无需修改。有修改需要通知下样例工程维护人员。\n          |_ utils  工具类\n                  |_   Common.js   共通方法工具类，如日期转换，类型转换等。这个工具类由Bible工程负责维护。\n                  |_   ScreenUtil.js  屏幕/字体缩放适配的计算帮助类，用于屏幕适配。这个工具类由Bible工程负责维护。\n         |_  widget  小组件，样例工程会陆续扩充。\n    |_  app.js  注册小程序的名称，与后端约定好。\nAppRegistry.registerComponent('TicketRN', () => App);// 在开放平台注册的小程序的代码\n   |_  index.js 显示小程序的名称，映入js。 \n |_  index.android.js  andorid设备会首先读取的启动文件。一般无需修改，可以在里面添加用于android设备的特定全局变量\n    |_  index.ios.js   类似index.android.js，这个是给ios设备用的\n    |_  install.bat   这个文件里放的是本地打包流程命令，供参考，与RN开发无关\n    |_  img  资源文件夹，图片文件务必用英文命名，中文命名在android打包时可能会丢文件\n<ActivityIndicator size=\"large\" color=\"#0000ff\" /> //显示一个圆形的 loading 提示符号。\n\nFlatList 简单列表组件  \n<FlatList data={this.props.data} extraData={this.state} keyExtractor={this._keyExtractor} renderItem={this._renderItem} />\n给FlatList指定extraData={this.state}属性，是为了保证state.selected变化时，能够正确触发FlatList的更新\nkeyExtractor属性指定使用 id 作为列表每一项的 key。\nrenderItem({item, index, separators}); 从data中挨个取出数据并渲染到列表中。\nxnToast显示提示信息\n<TouchableOpacity\n         style={styles.button}\n         onPress={this.onPress}\n>本组件用于封装视图，使其可以正确响应触摸操作。当按下的时候，封装的视图的不透明度会降低。\nglobal跨页面传值\n\n//获取值\nthat.props.navigation.state.params.id,\n//跳转页面\nthis.props.navigation.navigate('BookingList', {id:item.id,from: \"QiuApp\"}));\n//返回页面\nthis.props.navigation.goBack();\n//注解\nCtrl - K 组合键，再按 Ctrl - C \n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    ActivityIndicator,\n    Modal,\n    Platform,\n    ScrollView,\n    StatusBar, FlatList, \n    NativeModules, \n    DeviceEventEmitter, \n    Dimensions,Alert\n} from 'react-native';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\n\nimport {\n    timeChange,\n    xnToast,\n    getHeaderHeight,\n    getHeaderPadding,\n    timeReduce,\n    timePlus,\n    timeEvery,\n    numChange,\n    NoDoublePress,getTextAlignVerticalStyle\n} from '../utils/Common';\nimport CustomStatusBar from \"../component/CustomStatusBar\";\nimport FakeNavigationBar from \"../component/FakeNavigationBar\";\nimport AppService from \"../service/AppService\";\nimport getConfig from '../config'\nimport {setSpText2, zoomH,width, height, zoomW} from \"../utils/ScreenUtil\";\n\nlet pageSize = 20;\nconst defaultputImg = require('../img/put.png');\nconst defaultbookImg = require('../img/booking.png');\nconst defaultarrowImg = require('../img/arrow_right.png');\nclass Home extends Component {\n    static navigationOptions = ({navigation}) => ({\n        title: '服务通',\n        headerLeft: null,\n        tabBarLabel: '服务通',\n        tabBarIcon: ({tintColor}) => (\n            <Image\n                source={require('../img/draftss.png')}\n                style={[styles.icon, {tintColor: tintColor}]}\n            />\n        ),\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            data: [],\n            showMoreText: [],\n            loadMore: false,\n            totalCount: 0,\n            refreshing: false,\n            showEmptyView: true,//是否显示暂无数据\n            tableHeight: 1,\n        };\n    };\n\n    componentDidMount() {\n        \n    }\n\n    componentWillUnmount() {\n       \n    }\n\n    render() {\n        return (\n            <View style={styles.background}>\n                <CustomStatusBar\n                    backgroundColor={global.homeColor}\n                />\n                <FakeNavigationBar\n                    title={'服务通'}\n                    showBack={false}\n                    showClose={true}\n                    navigation={this.props.navigation}\n                />\n                <View style={{\n                        flexDirection: 'row',\n                        height: 80 / zoomH,\n                        marginTop: 10 / zoomH,\n                       \n                    }}>\n                  <View style={{  flexDirection: 'column',justifyContent:'flex-start',alignItems:'flex-start'}}>\n                    <TouchableOpacity\n                        onPress={() => NoDoublePress.onPress(() => {\n                            this.props.navigation.push('ItemApp', {from: \"Home\"});\n                        })}\n                    >\n                        <Image style={{\n                            width: 50 / zoomW,\n                            height: 50 / zoomW,\n                            marginRight: 4,\n                            marginTop: Platform.OS == 'ios' ? 8 : 2,\n                        }}\n                        resizeMode= 'contain'\n                         source={defaultputImg}></Image>\n                        <Text style={[{\n                            fontSize: setSpText2(16),\n                            justifyContent: 'center',\n                            color: '#333333',\n                        }, getTextAlignVerticalStyle(24 / zoomH)]}>我提交的</Text>\n                </TouchableOpacity> \n                </View>\n                <View style={{flexDirection: 'column',marginLeft:26}}>\n                    <Image style={{\n                        width: 50 / zoomW,\n                        height: 50 / zoomW,\n                        marginRight: 4,\n                        marginTop: Platform.OS == 'ios' ? 8 : 2,\n                    }} \n                    resizeMode= 'contain'\n                    source={defaultbookImg}></Image>\n                    <Text style={[{\n                        fontSize: setSpText2(16),\n                        justifyContent: 'center',\n                        color: '#333333',\n                    }, getTextAlignVerticalStyle(24 / zoomH)]}>我的未处理</Text>\n                </View>\n                <View style={{flexDirection: 'column',marginLeft:26}}>\n                    <Image style={{\n                        width: 50 / zoomW,\n                        height: 50 / zoomW,\n                        marginRight: 4,\n                        marginTop: Platform.OS == 'ios' ? 8 : 2,\n                    }} source={require('../img/draftssss.png')}\n                    resizeMode= 'contain'\n                    ></Image>\n                    <Text style={[{\n                        fontSize: setSpText2(16),\n                        justifyContent: 'center',\n                        color: '#333333',\n                    }, getTextAlignVerticalStyle(24 / zoomH)]}>我处理过的</Text>\n                </View>\n                </View>\n                <View style={{backgroundColor: 'lightgray', width: '100%', height: 12 / zoomH,marginTop: 6 / zoomH}}/>\n                <View style={{\n                        flexDirection: 'row',\n                        marginLeft:16,\n                        height: 30 / zoomW,\n                        justifyContent:'flex-start',\n                        alignItems:'center',\n                    }}>\n                    <Image style={{\n                        width: 26 / zoomW,\n                        height: 26 / zoomW,\n                    }} source={require('../img/draftsss.png')}></Image>\n                    <Text style={[{\n                        fontSize: setSpText2(16),\n                        color: '#333333',\n                        flex:1,\n                        marginLeft:16/zoomW,\n                        marginRight:16/zoomW,\n                    }, getTextAlignVerticalStyle(24 / zoomH)]}>我关注的</Text>\n                    <Image style={{\n                        width: 15 / zoomW,\n                        height: 15 / zoomW,\n                        marginRight:16/zoomW,\n                    }} source={defaultarrowImg}></Image>\n                </View>\n                <View style={{backgroundColor: 'lightgray', width: '100%', height: 2 / zoomH,marginTop: 10 / zoomH,}}/>\n                <View style={{\n                        flexDirection: 'row',\n                        marginLeft:16,\n                        height: 30 / zoomW,\n                        justifyContent:'flex-start',\n                        alignItems:'center',\n                    }}>\n                    <Image style={{\n                        width: 26 / zoomW,\n                        height: 26 / zoomW,\n                    }} source={require('../img/drafts.png')}></Image>\n                    <Text style={[{\n                        fontSize: setSpText2(16),\n                        color: '#333333',\n                        flex:1,\n                        marginLeft:16/zoomW,\n                        marginRight:16/zoomW,\n                    }, getTextAlignVerticalStyle(24 / zoomH)]}>草稿箱</Text>\n                    <Image style={{\n                        width: 15 / zoomW,\n                        height: 15 / zoomW,\n                        marginRight:16/zoomW,\n                    }} source={defaultarrowImg}></Image>\n                </View>\n                <View style={{backgroundColor: 'lightgray', width: '100%', height: 28 / zoomH,marginTop: 10 / zoomH,}}/>\n                <View style={{\n                        flexDirection: 'row',\n                        marginLeft:16,\n                        height: 30 / zoomW,\n                        justifyContent:'flex-start',\n                        alignItems:'center',\n                    }}>\n                    <Image style={{\n                        width: 26 / zoomW,\n                        height: 26 / zoomW,\n                    }} source={require('../img/wodekefu.png')}></Image>\n                    <Text style={[{\n                        fontSize: setSpText2(16),\n                        color: '#333333',\n                        flex:1,\n                        marginLeft:16/zoomW,\n                        marginRight:16/zoomW,\n                    }, getTextAlignVerticalStyle(24 / zoomH)]}>代理人设置</Text>\n                    <Image style={{\n                        width: 15 / zoomW,\n                        height: 15 / zoomW,\n                        marginRight:16/zoomW,\n                    }} source={defaultarrowImg}></Image>\n                </View>\n            </View> \n        );\n    }\n}\n\nexport default withNavigationFocus(Home)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column'\n    },\n    loadingBg: {\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n    },\n    icon: {\n        width: 24,\n        height: 23\n    },\n    tableHeader: {\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        width: '100%',\n        height: 44 / zoomH,\n    },\n    listBg: {\n        flex: 1,\n        display: \"flex\",\n        backgroundColor: '#F5F5F5',\n    }\n});\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    ActivityIndicator,\n    Modal,\n    Platform,\n    ScrollView,\n    StatusBar, FlatList, \n    NativeModules, \n    DeviceEventEmitter, \n    Dimensions,Alert,TextInput\n} from 'react-native';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\n\nimport {\n    timeChange,\n    xnToast,\n    getHeaderHeight,\n    getHeaderPadding,\n    timeReduce,\n    timePlus,\n    timeEvery,\n    numChange,\n    NoDoublePress,getTextAlignVerticalStyle\n} from '../utils/Common';\nimport CustomStatusBar from \"../component/CustomStatusBar\";\nimport FakeNavigationBar from \"../component/FakeNavigationBar\";\nimport EmptyView from \"../component/EmptyView\";\nimport AppService from \"../service/AppService\";\nimport BookingListCell_QIU from \"../component/BookingListCell_QIU\";\nimport getConfig from '../config'\nimport {setSpText2, zoomH,width, height, zoomW} from \"../utils/ScreenUtil\";\n\nlet pageSize = 20 ;\n\nclass ItemApp extends Component {\n    static navigationOptions = ({navigation}) => ({\n        title: '我提交的',\n        headerLeft: null,\n        tabBarLabel: '我提交的',\n        tabBarIcon: ({tintColor}) => (\n            <Image\n                source={require('../img/create.png')}\n                style={[styles.icon, {tintColor: tintColor}]}\n            />\n        ),\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            data: [],\n            showMoreText: [],\n            loadMore: false,\n            totalCount: 0,\n            refreshing: false,\n            showEmptyView: true,//是否显示暂无数据\n            tableHeight: 1,\n            name:\"\",\n        };\n    };\n\n    componentWillMount() {\n        this._findRevervation();\n    };\n\n    componentDidMount() {\n        let that = this;\n        this.listener = DeviceEventEmitter.addListener(\"refreshItem\", function () {\n            that._refresh();\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.listener != null) {\n            this.listener.remove();\n        }\n    }\n\n    _refresh() {\n        let that = this;\n        that.setState({\n            refreshing: true\n        }, () => {\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                that.setState({\n                    refreshing: false,\n                    data: []\n                }, () => {\n                    this._findRevervation();\n                });\n            }, 1000);\n        })\n    }\n\n    _searchFind(){\n        let that = this;\n        that.setState({\n            refreshing: true\n        }, () => {\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                that.setState({\n                    refreshing: false,\n                    data: []\n                }, () => {\n                    this._findRevervation();\n                });\n            }, 1000);\n        })\n    }\n\n    _createTableTitle() {\n        return (<View style={styles.tableHeader}>\n            <View style={{backgroundColor: 'lightgray', width: '100%', height: 2 / zoomH}}/>\n            <View style={{\n                backgroundColor: 'white',\n                flex: 1, flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'\n            }}>\n                <Text style={{fontSize: setSpText2(12), textAlign: 'center', width: '20%'}}>请求时间</Text>\n                <Text style={{fontSize: setSpText2(12), textAlign: 'center', width: '35%'}}>请求编号/类型</Text>\n                <Text style={{fontSize: setSpText2(12), textAlign: 'center', width: '30%'}}>请求摘要</Text>\n                <Text style={{fontSize: setSpText2(12), textAlign: 'center', width: '15%'}}>请求状态</Text>\n            </View>\n            <View style={{backgroundColor: 'lightgray', width: '100%', height: 2 / zoomH}}/>\n        </View>)\n    }\n\n    _searchTable() {\n        let maxLength = 60;\n        let keyboardType = \"default\";\n        return (<View style={{\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n        }}>\n            <TextInput style={[{\n                paddingTop: 0,// textinput有默认的paddingtop和bottom，需要去掉才能垂直居中\n                backgroundColor: 'lightgray',\n                width: 260 / zoomW,\n                height: (200 / 7) / zoomH,\n                borderRadius: 4,\n                textAlign: 'left',\n                fontSize: setSpText2(12),\n                color: '#666666',\n            }]}\n                underlineColorAndroid=\"transparent\"\n                value={this.state.name}\n                returnKeyType={\"done\"}\n                clearButtonMode={\"while-editing\"}\n                autoCapitalize={'none'}\n                autoCorrect={false}\n                autoFocus={false}\n                placeholder=\"请输入提交人!\"\n                keyboardType={keyboardType}\n                maxLength={60}\n                onBlur={(event) => {\n                    if (Platform.OS == 'ios') {\n                        let str = event.nativeEvent.text;\n                        if (event.nativeEvent.text != undefined) {\n                            str = event.nativeEvent.text.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                            this.setState({\n                                name:str\n                            });\n                        }\n                    } else {\n                        // android拿不到event.nativeEvent.text,不处理\n                    }\n                }}\n                onChangeText={(text) => {\n                    this.setState({\n                        name:text\n                    });\n                }}\n            >\n            </TextInput>\n                <TouchableOpacity\n                        onPress={() => NoDoublePress.onPress(() => {\n                            this._searchFind();\n                        })}\n                    >\n                    <View style={{\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Image style={{\n                          justifyContent: 'flex-start',\n                          alignItems: 'center',\n                          height: 30 / zoomH,\n                        }}\n                        resizeMode= 'contain'\n                            source={require('../img/filter.png')}></Image>\n                        <Text style={[{\n                            fontSize: setSpText2(16),\n                            justifyContent: 'center',\n                            color: '#333333',\n                        }, getTextAlignVerticalStyle(24 / zoomH)]}>筛选</Text>\n                    </View>\n                </TouchableOpacity> \n        </View>\n        )\n    }\n\n    // 加载指示器\n    _activityIndicator() {\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading || !global.netInfoInitComplete}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator size=\"large\"/>\n                </View>\n            </Modal>\n        );\n    };\n\n    // 判断是否要显示无数据页面\n    _confirmEmpty() {\n        let count = this.state.data.length;\n        this.setState({\n            showEmptyView: count > 0 ? false : true,\n        });\n    }\n\n    //查询预约\n    _findRevervation() {\n        console.log('查询预约列表');\n        let that = this;\n        if (!global.isConnected) {\n            xnToast(\"暂无网络连接，请稍后重试！\");\n            that._confirmEmpty();\n            return;\n        }\n        if (that.state.loading) {\n            console.log('正在加载，不查询');\n            return;\n        }\n        let length = this.state.data.length;\n        if (length % pageSize == 0 && !this.state.loadMore) {\n            let params = {\n                pageNumber: length / pageSize + 1,\n                pageSize: pageSize,\n                submitUserName:(!!this.state.name)?this.state.name:\"管理员\",\n                isService:true,\n                isIncident:true,\n\t\t\t    isAdvice:true,\n                isSupport:true,\n                requestType:'RN'\n            };\n            this.setState({\n                loadMore: true,\n                loading: true\n            });\n            AppService.findService(params)\n                .then(data => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    console.log(params);\n                    console.log(data);\n                    if (data.message) {\n                        xnToast(data.message);\n                        that._confirmEmpty();\n                        return;\n                    }\n                    if (data.errors && data.errors.length > 0) {\n                        xnToast(data.errors[0].message);\n                        that._confirmEmpty();\n                    } else {\n                        if (!!!data.result) {\n                            console.log('没有数据');\n                            that._confirmEmpty();\n                            return;\n                        }\n                        if (!getConfig.useMoke) {\n                            if (length + data.result.length > data.totalCount) {\n                                return;\n                            }\n                        }\n                        let count = that.state.data.concat(data.result).length;\n                        that.setState({\n                            data: that.state.data.concat(data.result),\n                            totalCount: data.totalCount,\n                            showEmptyView: count > 0 ? false : true,\n                        });\n                    }\n                })\n                .catch(error => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    xnToast(error);\n                    that._confirmEmpty();\n                });\n        }\n    }\n\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n    renderItem({item, index}) {\n        return <BookingListCell_QIU\n            revervation={item}\n            navigation={this.props.navigation}\n            clickCallback={() => {\n                //详情页面\n                this.props.navigation.push('ItemDetail', {id: item.id, from: \"ItemApp\"});\n            }}\n        />;\n    }\n\n    // 列表的分隔线\n    _separator1({item, index}) {\n        return <View style={{height: 2 / zoomH, backgroundColor: \"#F3F5F6\"}}/>;\n    };\n\n    render() {\n        console.log(this.state.data)\n        return (\n            \n            <View style={styles.background}>\n                {this._activityIndicator()}\n                <CustomStatusBar\n                    backgroundColor={global.homeColor}\n                />\n                <FakeNavigationBar\n                    title={'我提交的'}\n                    showBack={true}\n                    showClose={true}\n                    navigation={this.props.navigation}\n                />\n                {this._searchTable()} \n                {this._createTableTitle()}\n                <FlatList\n                    style={[styles.listBg]}\n                    onEndReachedThreshold={0.1}\n                    sendMomentumEvents={true}\n                    onEndReached={() => {\n                        console.log(\"on提示EndReached\");\n                    }}\n                    keyExtractor={this.keyExtractor}\n                    data={this.state.data}\n                    ItemSeparatorComponent={this._separator1}\n                    renderItem={this.renderItem.bind(this)}\n                    refreshing={this.state.refreshing}\n                    onMomentumScrollBegin={() => {\n                        console.log(\"onMomentumScrollBegin\");\n                    }}\n                    onMomentumScrollEnd={() => {\n                        console.log(\"onMomentumScrollEnd\");\n                    }}\n                    onLayout={(event) => {\n                        let height = event.nativeEvent.layout.height;\n                        let width = event.nativeEvent.layout.width;\n                        this.setState({\n                            tableHeight: height,\n                        });\n                    }}\n                    onScrollBeginDrag={() => {\n                        console.log(\"onScrollBeginDrag\");\n                        this.canLoadMore = true;\n                    }}\n                    onScrollEndDrag={(e) => {\n                        console.log(\"onScrollEndDrag\");\n                        // 计算是否滑动到底部\n                        var offsetY = e.nativeEvent.contentOffset.y; //滑动距离\n                        var contentSizeHeight = e.nativeEvent.contentSize.height; //scrollView contentSize高度\n                        var oriageScrollHeight = e.nativeEvent.layoutMeasurement.height; //scrollView高度\n                        if (Math.ceil(offsetY + oriageScrollHeight) >= Math.ceil(contentSizeHeight)) {\n                            console.log('上传滑动到底部事件')\n                            setTimeout(() => {\n                                if (this.canLoadMore) {\n                                    this.canLoadMore = false;\n                                    this._findRevervation();\n                                }\n                            }, 100)\n                        }\n                    }}\n                    onRefresh={() => {\n                        let that = this;\n                        that._refresh();\n                    }}\n                />\n                {/*</View>*/}\n                {this.state.showEmptyView ?\n                    <EmptyView\n                        tipContent={\"暂无数据,点击重试\"}\n                        refreshCallback={() => {\n                            this._refresh();\n                        }}\n                    /> : null}\n            </View>\n        );\n    }\n}\n\nexport default withNavigationFocus(ItemApp)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column'\n    },\n    loadingBg: {\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n    },\n    icon: {\n        width: 24,\n        height: 23\n    },\n    tableHeader: {\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        width: '100%',\n        height: 44 / zoomH,\n    },\n    listBg: {\n        flex: 1,\n        display: \"flex\",\n        backgroundColor: '#F5F5F5',\n    }\n});\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport _ from \"lodash\";\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    ActivityIndicator,\n    Modal,\n    Platform,\n    ScrollView,\n    StatusBar,\n    FlatList,\n    NativeModules, TextInput, DeviceEventEmitter\n} from 'react-native';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport EmptyView from '../component/EmptyView';\nimport CustomStatusBar from '../component/CustomStatusBar';\nimport FakeNavigationBar from '../component/FakeNavigationBar';\nimport ShopListCell from \"../component/ShopListCell\";\nimport AppService from \"../service/AppService\";\n\nimport {\n    callShop,\n    showLocation,\n    xnToast,\n    getHeaderHeight,\n    getHeaderPadding,\n    NoDoublePress,\n    getTextAlignVerticalStyle\n} from '../utils/Common';\nimport getConfig from '../config'\nimport CustomInput from \"../component/CustomInput\";\nimport {setSpText2, zoomW, zoomH, width} from \"../utils/ScreenUtil\";\n\nlet pageSize = 20;\n{\n    var arr_keyValue;\n}\n\nclass ItemCreate extends Component {\n    // TODO:导航还有点问题，先用假的\n    static navigationOptions = ({navigation}) => ({\n        header: null,\n        headerLeft: null,\n        tabBarLabel: '提交',\n        tabBarIcon: ({tintColor}) => (\n            <Image\n                source={require('../img/create.png')}\n                style={[styles.icon, {tintColor: tintColor}]}\n            />\n        ),\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            data: [],\n            keyword: '',\n            showMoreText: [],\n            loadMore: false,\n            totalCount: 0,\n            refreshing: false,\n            showEmptyView: true,//是否显示暂无数据\n            latitude: -1,\n            longitude: -1,\n            locationGetSuccess: false,\n            tableHeight: 0,\n        };\n    };\n\n    componentDidMount() {\n        \n    }\n\n    componentWillUnmount() {\n        \n    }\n\n    _refresh() {\n        let that = this;\n        this.setState({\n            refreshing: true\n        }, () => {\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                that.setState({\n                    refreshing: false,\n                    data: []\n                }, () => {\n                    that._queryShopList();\n                });\n            }, 1000);\n        })\n    }\n    _queryShopList(){\n        let count = 0;\n        this.setState({\n            data: {...this.state.data},\n            totalCount: 0,\n            showEmptyView: count > 0 ? false : true,\n        });\n    }\n   \n    // 判断是否要显示无数据页面\n    _confirmEmpty() {\n        let count = this.state.data.length;\n        this.setState({\n            showEmptyView: count > 0 ? false : true,\n        });\n    }\n\n    // 列表的分隔线\n    _separator({item, index}) {\n        return <View style={{height: 6 / zoomH, backgroundColor: \"#F3F5F6\"}}/>;\n    };\n\n    // 加载指示器\n    _activityIndicator() {\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading || !global.netInfoInitComplete}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator size=\"large\"/>\n                </View>\n            </Modal>\n        );\n    };\n\n\n    render() {\n        return (\n            <View style={styles.background}>\n                {this._activityIndicator()}\n                <CustomStatusBar\n                    backgroundColor={global.homeColor}\n                />\n                <FakeNavigationBar\n                    title={'提交'}\n                    showBack={false}\n                    showClose={true}\n                    navigation={this.props.navigation}\n                />\n                {/*</View>*/}\n                {this.state.showEmptyView ?\n                    <EmptyView\n                        tipContent={\"暂无数据,点击重试\"}\n                        refreshCallback={() => {\n                            this._refresh();\n                        }}\n                    /> : null}\n            </View>\n        );\n    }\n}\n\nexport default withNavigationFocus(ItemCreate)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n    },\n    loadingBg: {\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n    },\n    icon: {\n        width: 24,\n        height: 23\n    },\n    listBg: {\n        backgroundColor: '#F5F5F5',\n        flex: 1,\n        display: 'flex',\n    },\n\n    headerViewStyle: {\n        flexDirection: \"row\",\n        height: width * 0.15,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"#f3f5f6\"\n    },\n    inputStyle: {\n        color: \"#878787\",\n        width: width - 30 / zoomW, //给TextInput设置宽度，根据需要来\n        height: width * 0.1,\n        backgroundColor: \"#fff\",\n        paddingLeft: 30,\n        paddingTop: 5,\n        borderRadius: 8,\n        // borderTopLeftRadius: 8,\n        // borderBottomLeftRadius: 8,\n        marginTop: 6,\n        marginBottom: 0,\n        marginLeft: 15,\n        textAlignVertical: 'bottom'\n    },\n});\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    ActivityIndicator,\n    Modal,\n    Platform,\n    ScrollView,\n    StatusBar, FlatList,\n    TextInput, KeyboardAvoidingView, NativeModules, DeviceEventEmitter\n} from 'react-native';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\n\nimport {width, height, zoomW, zoomH} from '../utils/ScreenUtil';\nimport {\n    resetDateTimeSection,\n    xnToast,\n    getHeaderHeight,\n    getHeaderPadding,\n    \n    getTextAlignVerticalStyle\n} from '../utils/Common';\n\nimport CustomStatusBar from \"../component/CustomStatusBar\";\nimport FakeNavigationBar from \"../component/FakeNavigationBar\";\nimport AppService from \"../service/AppService\";\nimport {setSpText2} from \"../utils/ScreenUtil\";\nimport {timeStampToFullString} from \"../utils/Common\";\nclass ItemDetail extends Component {\n    static navigationOptions = ({navigation}) => ({\n        title: '查看详情',\n        headerLeft: null,\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            titleList: ['请求编号', '提交日期', '提交人', '提交人电话','承租方','受理人', '处理时间', '处理人', '请求类型','故障等级','所属应用','所属功能','摘要说明','处理文档'],\n            refreshing:false,\n        };\n    };\n\n    componentWillMount() {\n        // 重置预约时间段\n        resetDateTimeSection();\n        this._getRevervation();\n        let that = this;\n        this.keyboardHeightListener = DeviceEventEmitter.addListener(\"getNewKeyboardHeight\", function (height) {\n            that.setState({\n                keyboardHeight: height,\n            });\n        });\n    };\n\n    _getRevervation() {\n        console.log('查询预约');\n        let that = this;\n        // 前一个画面传入id\n        let params = {\n            id: that.props.navigation.state.params.id,\n        };\n        this.setState({\n            loading: true\n        }, () => {\n            AppService.getService(params)\n                .then(data => {\n                    that.setState({\n                        loading: false,\n                    });\n                    console.log(params);\n                    console.log(data);\n                    if (data.message) {\n                        xnToast(data.message);\n                        return;\n                    }\n                    if (!!data.errors === true && !!data.errors.length > 0) {\n                        xnToast(data.errors[0].message);\n                    } else {\n                        if (!!!data.request) {\n                            console.log('没有数据');\n                            xnToast('无法查询到预约详细数据');\n                            return;\n                        } else {\n                            data.request.submitTime=timeStampToFullString(data.request.submitTime);\n                            data.request.processTime=timeStampToFullString(data.request.processTime);\n                             //请求类型\n                            let typeIndex = !!data.request ? data.request.type : '';\n                            let typeString = '';\n                            if (global.revervationTypeIndex.indexOf(typeIndex) != -1) {\n                                typeString = global.revervationTypeString[global.revervationTypeIndex.indexOf(typeIndex)];\n                                console.log(global.revervationTypeIndex.indexOf(typeIndex))\n                            }\n                            data.request.type = typeString;\n                            //请求状态\n                            let statusIndex = !!data.request ? data.request.requestStatus : '';\n                            let statusString = '';\n                            if (global.revervationStatusIndex.indexOf(statusIndex) != -1) {\n                                statusString = global.revervationStatusString[global.revervationStatusIndex.indexOf(statusIndex)];\n                                console.log(global.revervationStatusIndex.indexOf(statusIndex))\n                            }\n                            data.request.requestStatus = statusString;\n                            //故障等级\n                            let incidentLevelIndex = !!data.request ? data.request.incidentLevel : '';\n                            let incidentLevelString = '';\n                            if (global.revervationIncidentLevelIndex.indexOf(incidentLevelIndex) != -1) {\n                                 incidentLevelString = global.revervationIncidentLevelString[global.revervationIncidentLevelIndex.indexOf(incidentLevelIndex)];\n                                  console.log(global.revervationIncidentLevelIndex.indexOf(incidentLevelIndex))\n                            }\n                            data.request.incidentLevel = incidentLevelString;\n                            console.log(data.request)\n                            that.setState({\n                                reservation: data.request,\n                            });\n                        }\n                    }\n                })\n                .catch(error => {\n                    that.setState({\n                        loading: false,\n                    });\n                    xnToast(error);\n                });\n        });\n    }\n\n    componentDidMount() {\n        let that = this;\n        this.refreshListener = DeviceEventEmitter.addListener(\"refreshQiuDetail\", function () {\n            that._getRevervation();\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.keyboardHeightListener != null) {\n            this.keyboardHeightListener.remove();\n        }\n        if (this.refreshListener != null) {\n            this.refreshListener.remove();\n        }\n    }\n\n    // 加载指示器\n    _activityIndicator() {\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading || !global.netInfoInitComplete}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator size=\"large\"/>\n                </View>\n            </Modal>\n        );\n    };\n\n    _refresh() {\n        let that = this;\n        that.setState({\n            refreshing: true\n        }, () => {\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                that.setState({\n                    refreshing: false,\n                }, () => {\n                    this._getRevervation();\n                });\n            }, 1000);\n        })\n      \n    }\n    _createItemCell(title, content, index) {\n        switch (index) {\n            case 0:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n            case 1:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n            case 2:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n            case 3:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n            case 4:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 5:\n                    return(\n                        <View style={{\n                            height: (200 / 7) / zoomH,\n                            width: '100%',\n                            flexDirection: 'row',\n                            justifyContent: 'flex-start',\n                            alignItems: 'center',\n                        }}>\n                            <Text style={[{\n                                fontSize: setSpText2(12),\n                                height: (200 / 7) / zoomH,\n                                color: '#333333',\n                                textAlign: 'right',\n                                width: 80 / zoomW,\n                            }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                            <Text style={[{\n                                fontSize: setSpText2(12),\n                                height: (200 / 7) / zoomH,\n                                color: '#333333',\n                                textAlign: 'right',\n                            }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                            </Text>\n                        </View>\n                    )\n                    break;\n                case 6:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 7:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 8:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 9:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 10:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 11:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 12:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n                case 13:\n                return(\n                    <View style={{\n                        height: (200 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            height: (200 / 7) / zoomH,\n                            color: '#333333',\n                            textAlign: 'right',\n                            width: 80 / zoomW,\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{title}</Text>\n                        \n                        <Text style={[{\n                            fontSize: setSpText2(12),\n                            color: '#333333',\n                            textAlign: 'right',\n                        }, getTextAlignVerticalStyle((257 / 7) / zoomH)]}>{content}\n                        </Text>\n                    </View>\n                )\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        let that = this;\n        if(!!this.state.reservation){\n            console.log(this.state.reservation.number);\n        }else{\n            console.log('1111');\n        }\n        return (\n            // keyboardVerticalOffset 看情况，设置0或者150，150是一个键盘的高度\n            <KeyboardAvoidingView behavior='position'\n                                  keyboardVerticalOffset={Platform.OS == 'ios' ? 0 : -this.state.keyboardHeight}>\n                {/*automaticallyAdjustContentInsets：当滚动视图放在一个导航条或者工具条后面的时候，iOS系统是否要自动调整内容的范围。默认值为true。（译注：如果你的ScrollView或FlatList的头部出现莫名其妙的空白，尝试将此属性置为false）*/}\n                <ScrollView contentContainerStyle={{height: height, backgroundColor: 'lightgray'}}\n                            automaticallyAdjustContentInsets={false}>\n                    <View style={styles.background}>\n                        {this._activityIndicator()}\n                        <CustomStatusBar\n                            backgroundColor={global.homeColor}\n                        />\n                        <FakeNavigationBar\n                            title={'查看请求详情'}\n                            showBack={true}\n                            showClose={true}\n                            navigation={this.props.navigation}\n                        />\n                        {/*补足顶部背景区域*/}\n                        <View style={{\n                            width: '100%',\n                            height: 50 / zoomH - getHeaderHeight() - getHeaderPadding(),\n                            backgroundColor: global.homeColor\n                        }}>\n                        </View>\n                        <Text style={[{\n                        fontSize: setSpText2(16),\n                        color: '#333333',\n                        marginLeft:16/zoomW,\n                        marginRight:16/zoomW,\n                    }, getTextAlignVerticalStyle(10 / zoomH)]}>请求信息</Text>\n                        <View style={{backgroundColor: 'lightgray', width: '100%', height: 2 / zoomH}}/>\n                        {this._createItemCell(this.state.titleList[0] + ':', (!!this.state.reservation)?this.state.reservation.number:\"\", 0)}\n                        {this._createItemCell(this.state.titleList[1] + ':', (!!this.state.reservation)?this.state.reservation.submitTime:\"\", 1)}\n                        {this._createItemCell(this.state.titleList[2] + ':', (!!this.state.reservation)?this.state.reservation.submitUserName:\"\", 2)}\n                        {this._createItemCell(this.state.titleList[3] + ':', (!!this.state.reservation)?this.state.reservation.submitUserPhone:\"\", 3)}\n                        {this._createItemCell(this.state.titleList[4] + ':', \"苏州犀牛网络科技有限公司\", 4)}\n                        <View style={{backgroundColor: 'lightgray', width: '100%', height: 2 / zoomH,marginTop: 4 / zoomH}}/>\n                        {this._createItemCell(this.state.titleList[5] + ':', (!!this.state.reservation)?this.state.reservation.acceptUserName:\"\", 5)}\n                        {this._createItemCell(this.state.titleList[6] + ':', (!!this.state.reservation)?this.state.reservation.processTime:\"\", 6)}\n                        {this._createItemCell(this.state.titleList[7] + ':', (!!this.state.reservation)?this.state.reservation.processUserName:\"\", 7)}\n                        {this._createItemCell(this.state.titleList[8] + ':', (!!this.state.reservation)?this.state.reservation.type:\"\", 8)}\n                        {this._createItemCell(this.state.titleList[9] + ':', (!!this.state.reservation)?this.state.reservation.incidentLevel:\"\", 9)}\n                        {this._createItemCell(this.state.titleList[10] + ':', (!!this.state.reservation)?this.state.reservation.applicationName:\"\", 10)}\n                        {this._createItemCell(this.state.titleList[11] + ':', (!!this.state.reservation)?this.state.reservation.functionName:\"\", 11)}\n                        {this._createItemCell(this.state.titleList[12] + ':', (!!this.state.reservation)?this.state.reservation.summary:\"\", 12)}\n                        {this._createItemCell(this.state.titleList[13] + ':', (!!this.state.reservation)?this.state.reservation.processUrl:\"\", 13)}\n                    </View>\n                </ScrollView>\n            </KeyboardAvoidingView>\n        );\n    }\n}\n\nexport default withNavigationFocus(ItemDetail)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: 'white',\n        display: 'flex',\n        alignItems: 'stretch',\n        justifyContent: 'flex-start',\n        flexDirection: 'column',\n    },\n    loadingBg: {\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n    },\n    contentBg: {\n        // TODO:注意，如果需要用KeyboardAvoidingView响应键盘，不要用绝对布局，因为KeyboardAvoidingView下的子View需要是个ScrollView\n        // position:'absolute',\n        marginTop: -20 / zoomH,\n        width: 345 / zoomW,\n        height: 800 / zoomH,\n        display: \"flex\",\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        borderRadius: 4,\n        top: 55 / zoomH,\n        left: (width - 345 / zoomW) / 2,\n    },\n    locateBtn: {\n        height: '100%',\n        alignSelf: 'flex-start',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    phoneBtn: {\n        marginLeft: 10 / zoomW,\n        width: 20 / zoomW,\n        height: 20 / zoomW,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    locationIcon: {\n        marginLeft: 19 / zoomW,\n        width: 16 / zoomW,\n        height: 16 / zoomW,\n        backgroundColor: '#FFFEFE',\n    },\n    phoneIcon: {\n        width: 20 / zoomW,\n        height: 20 / zoomW,\n        backgroundColor: '#FFFEFE',\n    },\n    modalBg: {\n        width: width,\n        height: height,\n        backgroundColor: 'rgba(0,0,0,.5)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n    },\n});\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport _ from \"lodash\";\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    ActivityIndicator,\n    Modal,\n    Platform,\n    ScrollView,\n    StatusBar,\n    FlatList,\n    NativeModules, TextInput, DeviceEventEmitter\n} from 'react-native';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport EmptyView from '../component/EmptyView';\nimport CustomStatusBar from '../component/CustomStatusBar';\nimport FakeNavigationBar from '../component/FakeNavigationBar';\nimport ShopListCell from \"../component/ShopListCell\";\nimport AppService from \"../service/AppService\";\n\nimport {\n    callShop,\n    showLocation,\n    xnToast,\n    getHeaderHeight,\n    getHeaderPadding,\n    NoDoublePress,\n    getTextAlignVerticalStyle\n} from '../utils/Common';\nconst reportImg = require('../img/report.png');\nimport getConfig from '../config'\nimport CustomInput from \"../component/CustomInput\";\nimport {setSpText2, zoomW, zoomH, width} from \"../utils/ScreenUtil\";\n\nlet pageSize = 20;\n{\n    var arr_keyValue;\n}\n\nclass Report extends Component {\n    // TODO:导航还有点问题，先用假的\n    static navigationOptions = ({navigation}) => ({\n        header: null,\n        headerLeft: null,\n        tabBarLabel: '报表',\n        tabBarIcon: ({tintColor}) => (\n            <Image\n                source={reportImg}\n                style={[styles.icon, {tintColor: tintColor}]}\n            />\n        ),\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            data: [],\n            keyword: '',\n            showMoreText: [],\n            loadMore: false,\n            totalCount: 0,\n            refreshing: false,\n            showEmptyView: true,//是否显示暂无数据\n            latitude: -1,\n            longitude: -1,\n            locationGetSuccess: false,\n            tableHeight: 0,\n        };\n    };\n\n    componentWillMount() {\n       \n    };\n\n    componentDidMount() {\n        \n    }\n\n    _refresh() {\n        let that = this;\n        this.setState({\n            refreshing: true\n        }, () => {\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                that.setState({\n                    refreshing: false,\n                    data: []\n                }, () => {\n                    that._queryShopList();\n                });\n            }, 1000);\n        })\n    }\n    _queryShopList(){\n        let count = 0;\n        this.setState({\n            data: {...this.state.data},\n            totalCount: 0,\n            showEmptyView: count > 0 ? false : true,\n        });\n    }\n   \n    // 判断是否要显示无数据页面\n    _confirmEmpty() {\n        let count = this.state.data.length;\n        this.setState({\n            showEmptyView: count > 0 ? false : true,\n        });\n    }\n\n    // 列表的分隔线\n    _separator({item, index}) {\n        return <View style={{height: 6 / zoomH, backgroundColor: \"#F3F5F6\"}}/>;\n    };\n\n    // 加载指示器\n    _activityIndicator() {\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading || !global.netInfoInitComplete}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator size=\"large\"/>\n                </View>\n            </Modal>\n        );\n    };\n\n\n    render() {\n        return (\n            <View style={styles.background}>\n                {this._activityIndicator()}\n                <CustomStatusBar\n                    backgroundColor={global.homeColor}\n                />\n                <FakeNavigationBar\n                    title={'报表'}\n                    showBack={false}\n                    showClose={true}\n                    navigation={this.props.navigation}\n                />\n                {/*</View>*/}\n                {this.state.showEmptyView ?\n                    <EmptyView\n                        tipContent={\"暂无数据,点击重试\"}\n                        refreshCallback={() => {\n                            this._refresh();\n                        }}\n                    /> : null}\n            </View>\n        );\n    }\n}\n\nexport default withNavigationFocus(Report)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n    },\n    loadingBg: {\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n    },\n    icon: {\n        width: 24,\n        height: 23\n    },\n    listBg: {\n        backgroundColor: '#F5F5F5',\n        flex: 1,\n        display: 'flex',\n    },\n\n    headerViewStyle: {\n        flexDirection: \"row\",\n        height: width * 0.15,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"#f3f5f6\"\n    },\n    inputStyle: {\n        color: \"#878787\",\n        width: width - 30 / zoomW, //给TextInput设置宽度，根据需要来\n        height: width * 0.1,\n        backgroundColor: \"#fff\",\n        paddingLeft: 30,\n        paddingTop: 5,\n        borderRadius: 8,\n        // borderTopLeftRadius: 8,\n        // borderBottomLeftRadius: 8,\n        marginTop: 6,\n        marginBottom: 0,\n        marginLeft: 15,\n        textAlignVertical: 'bottom'\n    },\n});\n\nimport {post} from \"./rpc\"\n\nconst xnService = {\n\n    /**\n     * 获取承租人信息和用户id\n     * @param data\n     * @returns {*}\n     */\n    getPassport: (data) => {\n        data.method = \"api.security.passport.get\";\n        return post(data)\n    },\n\n    /**\n     * 我提交的  rst.shop.find\n     * @param data\n     * @returns {*}\n     */\n    findService: (data) => {\n        data.method = \"api.appservice.request.find\";\n        return post(data)\n    },\n\n     /**\n     * 获取详细我提交的\n     * @param data\n     * @returns {*}\n     */\n    getService: (data) => {\n        data.method = \"api.appservice.request.get\";\n        return post(data)\n    },\n\n};\nexport default xnService;\n\n/**\n * Created by tdzl2003 on 6/18/16.\n */\n\nimport {NativeModules} from 'react-native';\n\nimport MD5 from \"md5\"\n\nconst axios = require('axios');\n\nexport let config = {\n    apiUrl: null,\n    app_key: null,\n    secret: null,\n    uploadUrl: null,\n}\n\nclass ResponseError extends Error {\n    constructor(message, code, origin) {\n        super(message);\n        this.code = code;\n        this.origin = origin;\n    }\n}\n\nexport const isArray = (o) => {\n    return Object.prototype.toString.call(o) === '[object Array]';\n}\n\nexport function getPassportId() {\n    return new Promise(function (resolve, reject) {\n        NativeModules.security.getPassportId().then((result) => {\n                resolve(result);\n            }\n        ).catch((error) => {\n            // console.log(error)\n        });\n    })\n}\n\nfunction identityId() {\n    return new Promise(function (resolve, reject) {\n        NativeModules.security.getIdentityId().then((result) => {\n                resolve(result);\n            }\n        ).catch((error) => {\n            // console.log(error)\n        });\n    })\n}\n\nasync function getPostParameter(request) {\n    var post_data = '';\n    var param_array = new Object();\n    if (global.passportId != null) {\n        this.passportId = global.passportId;\n    } else {\n        this.passportId = await getPassportId();\n    }\n    this.identityId = await identityId();\n\n    if (this.passportId != undefined && this.passportId != null && this.passportId > 0) {\n        param_array.passportId = this.passportId;\n    }\n    if (this.identityId != undefined && this.identityId != null && this.identityId > 0) {\n        param_array.identityId = this.identityId;\n    }\n\n    var ignoreSign = false;\n    param_array.format = 'json';\n    param_array.sign_method = 'md5';\n    param_array.timestamp = Date.parse(new Date());\n    if (null != config.app_key) {\n        param_array.app_key = config.app_key;\n    } else {\n        ignoreSign = true;\n    }\n    param_array.v = '1.0';\n\n    for (var p in request) { // 方法\n        if (request[p] != null && request[p] != undefined && typeof (request[p]) != \"function\") {\n            param_array[p] = request[p];\n        }\n    }\n    {\n        var param_sign;\n        var arrayKey = [];\n        var strTemp;\n        var arrayKeyTemp = [];\n        for (var p in param_array) { // 方法\n            if (typeof (param_array[p]) != \"function\") {\n                arrayKeyTemp.push(p);\n            }\n        }\n        // 最后显示所有的属性\n        arrayKeyTemp.sort();\n        if (!ignoreSign) {\n            var strTemp = config.secret;\n            for (var i = 0; i < arrayKeyTemp.length; i++) {\n                if (isArray(param_array[arrayKeyTemp[i]])) {\n                    strTemp = strTemp + arrayKeyTemp[i] + JSON.stringify(param_array[arrayKeyTemp[i]]);\n                } else {\n                    strTemp = strTemp + arrayKeyTemp[i] + param_array[arrayKeyTemp[i]];\n                }\n            }\n            strTemp = strTemp + config.secret;\n            param_sign = MD5(strTemp).toString().toUpperCase();\n            post_data = 'sign=' + param_sign.toUpperCase();\n        }\n        for (var i = 0; i < arrayKeyTemp.length; i++) {\n            if (isArray(param_array[arrayKeyTemp[i]])) {\n                post_data = post_data + '&' + arrayKeyTemp[i] + '=' + encodeURIComponent(JSON.stringify(param_array[arrayKeyTemp[i]]));\n            } else {\n                post_data = post_data + '&' + arrayKeyTemp[i] + '=' + encodeURIComponent(param_array[arrayKeyTemp[i]]);\n            }\n        }\n    }\n    console.log(post_data);\n    if (post_data.substring(0, 1) == \"&\") {\n        var temp = post_data.substring(1);\n        post_data = temp;\n    }\n\n    return post_data;\n}\n\nfunction escape1(text) {\n    return text;\n}\n\nasync function request(data, _options) {\n\n    const options = _options || {};\n\n    \n\n    options.method = options.method || 'GET';\n    options.headers = options.headers || {};\n    // options.body=body;\n    options.body = await getPostParameter(data)\n\n    \n    console.warn('options.body= ' + options.body);\n\n    const resp = await fetch(config.apiUrl.toString(), options);\n    const text = await resp.text();\n    // console.log('RESP:', text);\n    var json = JSON.parse(text);\n\n    // 如果请求失败\n    if (resp.status !== 200) {\n        if (resp.status === 401) {\n            // console.log(resp.status);\n        }\n        console.log('请求失败:' + text);\n        throw new ResponseError(json.message, resp.status, json);\n    }\n    // 服务不可用\n    if (json.message) {\n        console.log('请求出错:' + text);\n        throw new ResponseError(json.message, resp.status, json);\n    }\n    // 如果数据格式最外面包了一层data，在这里解析掉\n    if (!!json.data === true) {\n        json = json.data;\n    }\n    return json;\n}\n\n//post\nexport function post(data, options) {\n    // moke地址设置(yapi一个请求是一个单独的url)\n    if (config.useMoke) {\n        config.apiUrl = 'http://localhost/mock/31/' + data.method;\n    }\n    return request(data, {\n        method: 'POST',\n        mode: \"cors\",\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        ...options,\n    });\n}\n\n//上传'Content-Type': 'application/x-www-form-urlencoded',\nexport async function upload(file) {\n    //config.apiUrl\n    const body = new FormData();\n    body.append('File', file);\n    body.append(\"Type\", \"PHOTO\");\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n        body,\n    };\n\n    let passportId = await getPassportId();\n    const resp = await fetch(config.uploadUrl + \"?passportId=\" + passportId, options);\n    const text = await resp.text();\n    // console.log('RESP:', text);\n    const json = JSON.parse(text);\n    // 如果请求失败\n    if (resp.status !== 200) {\n        throw new ResponseError(json.message, resp.status, json);\n    }\n    return json;\n}\n\nexport const init = function (data) {\n    config = data\n};\n\nconst rpc = {\n    init: init,\n    upload: upload,\n    post: post\n}\n\nexport default rpc;\n\n\n //点击选中\n  onSelectKey = e => {\n    let keys = this.state.UserPortrait;\n    getUserSelf({ id: e }).then(res => {\n      if (!res.errors || res.errors.length === 0) {\n        var arr = res.data.user;\n        keys.push({ avatar: arr.avatar, name: arr.name, id: arr.id });\n        this.setState(\n          {\n            UserPortrait: keys,\n          },\n          () => {\n            console.log(this.state.UserPortrait);\n          },\n        );\n        console.log(keys);\n      }\n    });\n  };\n\n  //点击表单删除\n  onDeselectKye = e => {\n    console.log(e);\n    let keys = this.state.UserPortrait;\n    keys.forEach((item, index, arr) => {\n      if (item.id == e) {\n        arr.splice(index, 1);\n      }\n    });\n    //console.log(keys)\n    this.setState(\n      {\n        UserPortrait: keys,\n      },\n      () => {\n        console.log(this.state.UserPortrait);\n      },\n    );\n  };\n\n\n<Form.Item\n                    label={<FormattedMessage id=\"component.form.submission.executor\" />}\n                    wrapperCol={{ span: 15 }}\n                  >\n                    {getFieldDecorator('assignUserIds', {\n                      rules: [\n                        {\n                          required: true,\n                          message: formatMessage({ id: 'component.select.placeholder' }), //component.please.enter\n                        },\n\n                      ],\n                      initialValue: this.state.userIdList,\n                    })(\n                      <Select\n                        onSelect={this.onSelectKey}\n                        onDeselect={this.onDeselectKye}\n                        placeholder={<FormattedMessage id=\"component.please.enter\" />}\n                        showSearch\n                        value={userIdList}\n                        mode=\"multiple\"\n                        filterOption={(input, option) =>\n                          option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                        style={{ width: 280 }}\n                      >\n                        {this.state.getUser.map((item, index) => {\n                          return (\n                            <Option value={item.id} key={index}>\n                              {item.name}\n                            </Option>\n                          );\n                        })}\n                      </Select>,\n                    )}\n                  </Form.Item>\n\n<Form.Item>\n                  <div style={{ width: '100%', marginLeft: '15%' }}>\n                    <ul style={{ width: '40%', height: '100%' }}>\n                      {this.state.UserPortrait &&\n                      this.state.UserPortrait.map(item => {\n                        return (\n                          <li style={{ borderRadius: 5 }} className=\"approve\">\n                            {/* <div className=\"delete\" onClick={()=>this.onDelete(item.id)}></div> */}\n                            <img\n                              src={\n                                item.avatar\n                                  ? item.avatar\n                                  : 'https://xiniunet.oss-cn-hangzhou.aliyuncs.com//512824102474878976/upload/1235149587552018432.png'\n                              }\n                              className=\"approve-img user\"\n                            ></img>\n                            <div className=\"approve-name\">{item.name}</div>\n                            <div className=\"approve-position\" title=\"\"></div>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </Form.Item>\n\n\nthis.props.navigation.navigate(\"buddhistHome\", {});\n//this.props.navigation.goBack();\n//防止按钮多次触发\nexport const NoDoublePress = {\n    lastPressTime: 1,\n    onPress(callback) {\n        let curTime = new Date().getTime();\n        if (curTime - this.lastPressTime > 500) {\n            this.lastPressTime = curTime;\n            callback();\n        }\n    },\n};\n监听\ncomponentDidMount() {\n    let that = this;\n    this.refreshListener = DeviceEventEmitter.addListener(\"buddhistHome\", function () {\n        that.volunteersApply(); //是否义工已申请\n    });\n\n}\ncomponentWillUnmount() {\n    if (this.refreshListener != null) {\n        this.refreshListener.remove();\n    }\n}\nDeviceEventEmitter.emit(\"buddhistHome\");\nthis.props.navigation.navigate(\"buddhistHome\", {isBackGo:true});\n\nlet days = this.state.dedicationData.dueDate;\nconsole.log(moment(Number(days)).format(\"YYYY-MM-DD HH:mm:ss\"))\nlet duration =moment(Number(days)).add(this.state.data.duration.days,\"days\");\nconsole.log(duration)\nlet objectDurationDay = moment(Number(duration)).format(\"YYYY-MM-DD HH:mm:ss\");\n\n// 获取主题色\nexport function getHomeColor() {\n    if (global.homeColor == undefined) {\n        // #8A0886 紫色测试\n        global.homeColor = \"#3399ff\";\n        return String(global.homeColor);\n    } else {\n        return String(global.homeColor);\n    }\n};\n\nconst defaultWidth = 375;\nconst defaultHeight = 667;\n\nexport const width = Dimensions.get('window').width;\nexport const height = __IOS__ ? Dimensions.get('window').height : Dimensions.get('window').height - StatusBar.currentHeight;\nexport const zoomW = defaultWidth / parseInt(width);\nexport const zoomH = defaultHeight / parseInt(height);\n\nexport function setSpText2(size) {\n    if (Platform.OS == \"ios\") {\n        let scaleWidth = screenW / w2;\n        let scaleHeight = screenH / h2;\n        let scale = Math.min(scaleWidth, scaleHeight);\n        size = Math.round((size * scale + 0.5));\n        // 需要取整，部分组件不取整计算有问题，会抖动\n        return Math.round(size / DEFAULT_DENSITY * fontScale);\n    } else {\n        return size;\n    }\n    // let scaleWidth = screenW / w2;\n    // let scaleHeight = screenH / h2;\n    // let scale = Math.min(scaleWidth, scaleHeight);\n    // size = Math.round((size * scale + 0.5));\n    // return size / DEFAULT_DENSITY;\n}\n\n<BuddhismGroup buddhistShow={true}  navigation={this.props.navigation}/>\n\n_searchFind=()=>{\n        //调用刷新列表方法\n        this.refs.textInput.blur();\n        this.CeremonyProjectCtrl.refresh(this.state.keyword);\n    }\n <CeremonyProjectGroup ref={e=>this.CeremonyProjectCtrl=e} navigation={this.props.navigation}/>\n\n// 姓名check 必填+最多20字\nexport function checkBookingName(content, itemTitle) {\n    let test = trim(content);\n    if (test.length == 0) {\n        xnToast('请填写【' + itemTitle + '】',1000);\n        return false;\n    }\n    if (test.length > 20) {\n        xnToast('【姓名】最多只允许20个字',1000);\n        return false;\n    }\n    return true;\n}\n\n// 联系方式check 必填+纯数字+11位\nexport function checkBookingPhone(content, itemTitle) {\n    let test = trim(content);\n    if (test.length == 0) {\n        xnToast('请填写【' + itemTitle + '】',1000);\n        return false;\n    }\n    if (/^[0-9]+$/.test(test)) {\n\n    } else {\n        xnToast('【' + itemTitle + '】必须为纯数字',1000);\n        return false\n    }\n    if (test.length != 11) {\n        xnToast('【' + itemTitle + '】位数必须为11位',1000);\n        return false;\n    }\n    return true;\n\n}\nexport function checkBookingDescription(content, itemTitle) {\n    let test = trim(content);\n    if (test.length == 0) {\n        xnToast('请填写【' + itemTitle + '】');\n        return false;\n    }\n    if (test.length > 100) {\n        xnToast('【姓名】最多只允许100个字');\n        return false;\n    }\n    return true;\n}\n\n//Toast\nexport const xnToast = (content) => {\n\n    setTimeout(() => {\n        if (global.toast !== undefined) {\n            Toast.hide(toast);\n        }\n        global.toast = Toast.show(content.toString(), {\n            duration: Toast.durations.LONG,\n            position: Toast.positions.CENTER,\n            shadow: true,\n            animation: true,\n            hideOnPress: true,\n            delay: 0\n        });\n    }, 250);\n};\n\n\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    FlatList,Image\n} from 'react-native';\nimport {\n    xnToast, NoDoublePress,\n} from '../utils/Common';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport {setSpText2, zoomH, zoomW, width} from \"../utils/ScreenUtil\";\nimport RString from \"../utils/RString\";\nimport AppService from \"../service/AppService\";\nimport EmptyView from \"../component/general/EmptyView\";\nimport moment from \"moment\";\nlet pageSize =10;\nconst defaultarrowImg = require('../img/arrow_right.png');\nconst moneyImg = require('../img/money.png');\nclass OrderPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choosePerson: '',\n            title: '佛事订单',\n            setTitleIndex: '1',\n            buddhaData: [],//佛事订单\n            ceremonyData: [],//法会订单\n            meritData: [],//慈善订单\n            roomData: [],//供奉订单\n            loading: false,\n            isRefresh: false,// 是否需要刷新\n            refreshing:false,\n            showEmptyView: false,// 是否显示暂无数据\n            showFoot: 0, // 控制foot， 0：隐藏footer  1：已加载完成,没有更多数据   2 ：显示加载中\n            totalCount:0,//总计\n        };\n    };\n\n    static navigationOptions = ({ navigation }) => ({\n        title: `${navigation.state.params.title}`\n    });\n\n\n    componentWillMount() {\n        let that = this;\n        this.props.navigation.setParams({\n            title: '佛事订单',     //标题文字\n            isBack: true,      //是否显示返回按钮\n        });\n    };\n\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    render() {\n\n        return (\n            <View style={styles.background}>\n                {this._separator()}\n                <View style={styles.defaultValue}>\n                    <TouchableOpacity style={styles.containerButton} activeOpacity={0.8}\n                                      onPress={() => NoDoublePress.onPress(() => {\n                                          this.getList(\"1\",\"佛事订单\");\n                                      })}>\n                        <Text style={this.state.setTitleIndex==1?styles.clickTextValue:styles.textValue}>佛事订单</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity style={styles.containerButton} activeOpacity={0.8}\n                                      onPress={() => NoDoublePress.onPress(() => {\n                                          this.getList(\"2\",\"法会订单\");\n                                      })}>\n                        <Text style={this.state.setTitleIndex==2?styles.clickTextValue:styles.textValue}>法会订单</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity style={styles.containerButton} activeOpacity={0.8}\n                                      onPress={() => NoDoublePress.onPress(() => {\n                                          this.getList(\"3\",\"慈善订单\");\n                                      })}>\n                        <Text style={this.state.setTitleIndex==3?styles.clickTextValue:styles.textValue}>慈善订单</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity style={styles.containerButton} activeOpacity={0.8}\n                                      onPress={() => NoDoublePress.onPress(() => {\n                                          this.getList(\"4\",\"供奉订单\");\n                                      })}>\n                        <Text style={this.state.setTitleIndex==4?styles.clickTextValue:styles.textValue}>供奉订单</Text>\n                    </TouchableOpacity>\n                </View>\n                <FlatList\n                    style={[styles.list]}\n                    onEndReachedThreshold={0.1}\n                    sendMomentumEvents={true}\n                    onEndReached={() => {\n                        console.log(\"on提示EndReached\");\n                    }}\n                    keyExtractor={this.keyExtractor}\n                    data={this.state.setTitleIndex==1?this.state.buddhaData:this.state.setTitleIndex==2?\n                        this.state.ceremonyData:this.state.setTitleIndex==3?this.state.meritData:\n                            this.state.setTitleIndex==4?this.state.roomData:this.state.buddhaData}\n                    ItemSeparatorComponent={this._separator}\n                    renderItem={this.state.setTitleIndex==1?this.renderItem.bind(this):this.state.setTitleIndex==2?\n                        this.renderCeremonyItem.bind(this):this.state.setTitleIndex==3?this.renderMeritItem.bind(this):\n                            this.state.setTitleIndex==4?this.renderRoomItem.bind(this):this.renderItem.bind(this)}\n                    refreshing={this.state.refreshing}\n                    onMomentumScrollBegin={() => {\n                        console.log(\"onMomentumScrollBegin\");\n                    }}\n                    onMomentumScrollEnd={() => {\n                        console.log(\"onMomentumScrollEnd\");\n                    }}\n                    onLayout={(event) => {\n                        let height = event.nativeEvent.layout.height;\n                        let width = event.nativeEvent.layout.width;\n                        this.setState({\n                            tableHeight: height,\n                        });\n                    }}\n                    onScrollBeginDrag={() => {\n                        console.log(\"onScrollBeginDrag\");\n                        this.canLoadMore = true;\n                    }}\n                    onScrollEndDrag={(e) => {\n                        console.log(\"onScrollEndDrag\");\n                        // 计算是否滑动到底部\n                        var offsetY = e.nativeEvent.contentOffset.y; //滑动距离\n                        var contentSizeHeight = e.nativeEvent.contentSize.height; //scrollView contentSize高度\n                        var oriageScrollHeight = e.nativeEvent.layoutMeasurement.height; //scrollView高度\n                        if (Math.ceil(offsetY + oriageScrollHeight) >= Math.ceil(contentSizeHeight)) {\n                            console.log('上传滑动到底部事件')\n                            setTimeout(() => {\n                                if (this.canLoadMore) {\n                                    this.canLoadMore = false;\n                                    if(this.state.setTitleIndex==1){\n                                        this.getData();\n                                    }else if(this.state.setTitleIndex==2){\n                                        this.getCeremonyData();\n                                    }else if(this.state.setTitleIndex==3){\n                                        this.getMeritDdata();\n                                    }else if(this.state.setTitleIndex==4){\n                                        this.getRoomData();\n                                    }else{\n                                        this.getData();\n                                    }\n                                }\n                            }, 100)\n                        }\n                    }}\n                    onRefresh={() => {\n                        let that = this;\n                        that._refresh();\n                    }}\n                />\n                {this.state.showEmptyView ?\n                    <EmptyView\n                        tipContent={RString('message_no_data')}\n                        refreshCallback={() => {\n                            {this.state.setTitleIndex==1?\n                                this.getData():this.state.setTitleIndex==2?this.getCeremonyData():\n                                this.state.setTitleIndex==3?this.getMeritDdata():\n                                this.state.setTitleIndex==4?this.getRoomData():this.getData()\n                            }\n                        }}\n                    /> : null}\n            </View>\n        );\n    }\n\n    getList(index,item){\n        console.log(index,item);\n        this.props.navigation.setParams({\n            title: item,     //标题文字\n            isBack: true,      //是否显示返回按钮\n        });\n        this.setState({\n            setTitleIndex:index,\n            buddhaData:[],//佛事订单\n            ceremonyData: [],//法会订单\n            meritDdata: [],//慈善订单\n            roomData: [],//供奉订单\n        });\n        if(index==1){\n            this.getData();\n        }else if(index==2) {\n            this.getCeremonyData();\n        }else if(index==3) {\n            this.getMeritDdata();\n        }else if(index==4) {\n            this.getRoomData();\n        }else{\n            this.getData();\n        }\n    }\n    //查询佛事订单数据\n    getData(){\n        let that = this;\n        let length = this.state.buddhaData.length;\n        if(length % pageSize == 0 && !this.state.loadMore){\n            let params = {\n                pageSize: pageSize,\n                pageNumber: length / pageSize + 1,\n                objectType:\"BUDDHIST\",\n            };\n            this.setState({\n                loadMore: true,\n                loading: true\n            });\n            AppService.findTradeOrder(params)\n                .then(data => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    console.log(params);\n                    console.log(data);\n                    if (!!!data) {\n                        xnToast(RString('api_error_common'));\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (data.message) {\n                        xnToast(data.message);\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (!!data.errors === true && !!data.errors.length > 0) {\n                        if (!!data.errors[0].message) {\n                            xnToast(data.errors[0].message);\n                        } else {\n                            xnToast(RString('api_error_common'));\n                            that.setState({\n                                loading: false,\n                            });\n                        }\n                    } else {\n                        if (!!!data.result) {\n                            console.log('没有数据');\n                            that.setState({\n                                showEmptyView: true,\n                                totalCount: data.totalCount\n                            });\n                            return;\n                        }\n                        //替换数据源\n                        let count = that.state.buddhaData.concat(data.result).length;\n                        that.setState({\n                            buddhaData: that.state.buddhaData.concat(data.result),\n                            totalCount: data.totalCount,\n                            showEmptyView: count > 0 ? false : true,\n                        },()=>{\n                            console.log(that.state.buddhaData)\n                        });\n                    }\n                })\n                .catch(error => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    xnToast(error);\n                });\n        }\n    }\n    //查询法会订单数据\n    getCeremonyData(){\n        let that = this;\n        let length = this.state.ceremonyData.length;\n        if(length % pageSize == 0 && !this.state.loadMore){\n            let params = {\n                pageSize: pageSize,\n                pageNumber: length / pageSize + 1,\n                objectType:\"CEREMONY\",\n            };\n            this.setState({\n                loadMore: true,\n                loading: true\n            });\n            AppService.findTradeOrder(params)\n                .then(data => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    console.log(params);\n                    console.log(data);\n                    if (!!!data) {\n                        xnToast(RString('api_error_common'));\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (data.message) {\n                        xnToast(data.message);\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (!!data.errors === true && !!data.errors.length > 0) {\n                        if (!!data.errors[0].message) {\n                            xnToast(data.errors[0].message);\n                        } else {\n                            xnToast(RString('api_error_common'));\n                            that.setState({\n                                loading: false,\n                            });\n                        }\n                    } else {\n                        if (!!!data.result) {\n                            console.log('没有数据');\n                            that.setState({\n                                showEmptyView: true,\n                                totalCount: data.totalCount\n                            });\n                            return;\n                        }\n                        //替换数据源\n                        let count = that.state.ceremonyData.concat(data.result).length;\n                        that.setState({\n                            ceremonyData: that.state.ceremonyData.concat(data.result),\n                            totalCount: data.totalCount,\n                            showEmptyView: count > 0 ? false : true,\n                        },()=>{\n                            console.log(that.state.ceremonyData)\n                        });\n                    }\n                })\n                .catch(error => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    xnToast(error);\n                });\n        }\n    }\n    //查询慈善订单数据\n    getMeritDdata(){\n        let that = this;\n        let length = this.state.meritData.length;\n        if(length % pageSize == 0 && !this.state.loadMore){\n            let params = {\n                pageSize: pageSize,\n                pageNumber: length / pageSize + 1,\n                objectType:\"MERIT\",\n            };\n            this.setState({\n                loadMore: true,\n                loading: true\n            });\n            AppService.findTradeOrder(params)\n                .then(data => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    console.log(params);\n                    console.log(data);\n                    if (!!!data) {\n                        xnToast(RString('api_error_common'));\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (data.message) {\n                        xnToast(data.message);\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (!!data.errors === true && !!data.errors.length > 0) {\n                        if (!!data.errors[0].message) {\n                            xnToast(data.errors[0].message);\n                        } else {\n                            xnToast(RString('api_error_common'));\n                            that.setState({\n                                loading: false,\n                            });\n                        }\n                    } else {\n                        if (!!!data.result) {\n                            console.log('没有数据');\n                            that.setState({\n                                showEmptyView: true,\n                                totalCount: data.totalCount\n                            });\n                            return;\n                        }\n                        //替换数据源\n                        let count = that.state.meritData.concat(data.result).length;\n                        that.setState({\n                            meritData: that.state.meritData.concat(data.result),\n                            totalCount: data.totalCount,\n                            showEmptyView: count > 0 ? false : true,\n                        },()=>{\n                            console.log(that.state.meritData)\n                        });\n                    }\n                })\n                .catch(error => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    xnToast(error);\n                });\n        }\n    }\n    //查询供奉订单数据\n    getRoomData(){\n        let that = this;\n        let length = this.state.roomData.length;\n        if(length % pageSize == 0 && !this.state.loadMore){\n            let params = {\n                pageSize: pageSize,\n                pageNumber: length / pageSize + 1,\n                objectType:\"DEDICATION\",\n            };\n            this.setState({\n                loadMore: true,\n                loading: true\n            });\n            AppService.findTradeOrder(params)\n                .then(data => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    console.log(params);\n                    console.log(data);\n                    if (!!!data) {\n                        xnToast(RString('api_error_common'));\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (data.message) {\n                        xnToast(data.message);\n                        that.setState({\n                            loading: false,\n                        });\n                        return;\n                    }\n                    if (!!data.errors === true && !!data.errors.length > 0) {\n                        if (!!data.errors[0].message) {\n                            xnToast(data.errors[0].message);\n                        } else {\n                            xnToast(RString('api_error_common'));\n                            that.setState({\n                                loading: false,\n                            });\n                        }\n                    } else {\n                        if (!!!data.result) {\n                            console.log('没有数据');\n                            that.setState({\n                                showEmptyView: true,\n                                totalCount: data.totalCount\n                            });\n                            return;\n                        }\n                        //替换数据源\n                        let count = that.state.roomData.concat(data.result).length;\n                        that.setState({\n                            roomData: that.state.roomData.concat(data.result),\n                            totalCount: data.totalCount,\n                            showEmptyView: count > 0 ? false : true,\n                        },()=>{\n                            console.log(that.state.roomData)\n                        });\n                    }\n                })\n                .catch(error => {\n                    that.setState({\n                        loading: false,\n                        loadMore: false,\n                    });\n                    xnToast(error);\n                });\n        }\n    }\n    _refresh() {\n        let that = this;\n        that.setState({\n            refreshing: true,\n        }, () => {\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                that.setState({\n                    refreshing: false,\n                    buddhaData:[],//佛事订单\n                    ceremonyData: [],//法会订单\n                    meritData: [],//慈善订单\n                    roomData: [],//供奉订单\n                }, () => {\n                    if(that.state.setTitleIndex==1){\n                        this.getData();\n                    }else if(that.state.setTitleIndex==2){\n                        this.getCeremonyData();\n                    }else if(that.state.setTitleIndex==3){\n                        this.getMeritDdata();\n                    }else if(that.state.setTitleIndex==4){\n                        this.getRoomData();\n                    }else{\n                        this.getData();\n                    }\n                });\n            }, 1000);\n        })\n    }\n\n    renderItem=({item})=>{\n        console.log(\"33333331\",item);\n        return (\n            <TouchableOpacity style={styles.itemContainer} activeOpacity={0.8}\n                              onPress={() => NoDoublePress.onPress(() => {\n                                  this.props.navigation.push(\"BuddhistOrderDetail\", {\n                                      pageStatus:\"\",\n                                      personId:item.objectId\n                                  });\n                              })}>\n                <View style={styles.buddhistTitle}>\n                    <View style={styles.tabTitle}>\n                        <Text style={styles.rowCenter}>订单号：{item.orderNumber}</Text>\n                        <Text style={styles.rowCenter}>订单日期：{item.time>0?moment(Number(item.time)).format(\"YYYY-MM-DD HH:mm:ss\"):''}</Text>\n                    </View>\n                    <View style={styles.introduceTitle}>\n                        <Text style={styles.introduce} numberOfLines={2}>{item.objectName?item.objectName:\"暂无\"}</Text>\n                        <View  style={styles.introduceTitles}>\n                            <Image style={{\n                                marginTop: 12/zoomH,\n                                width: 15 / zoomW,\n                                height: 15 / zoomW,\n                                marginRight:6/zoomW,\n                            }} source={moneyImg}></Image>\n                            <Text style={styles.introduces}>{item.payAmount?item.payAmount:\"0\"}</Text>\n                            <Image style={{\n                                marginTop: 10/zoomH,\n                                width: 15 / zoomW,\n                                height: 15 / zoomW,\n                            }} source={defaultarrowImg}></Image></View>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n    //法会订单\n    renderCeremonyItem=({item})=>{\n        console.log(\"33333331\",item);\n        return (\n            <TouchableOpacity style={styles.itemContainer} activeOpacity={0.8}\n                              onPress={() => NoDoublePress.onPress(() => {\n                                  this.props.navigation.push(\"CeremonyOrderDetail\", {\n                                      pageStatus:\"\",\n                                      personId:item.objectId\n                                  });\n                              })}>\n                <View style={styles.buddhistTitle}>\n                    <View style={styles.tabTitle}>\n                        <Text style={styles.rowCenter}>订单号：{item.orderNumber}</Text>\n                        <Text style={styles.rowCenter}>订单日期：{item.time>0?moment(Number(item.time)).format(\"YYYY-MM-DD HH:mm:ss\"):''}</Text>\n                    </View>\n                    <View style={styles.introduceTitle}>\n                        <Text style={styles.introduce} numberOfLines={2}>{item.objectName?item.objectName:\"暂无\"}</Text>\n                        <View  style={styles.introduceTitles}>\n                        <Image style={{\n                            marginTop: 12/zoomH,\n                            width: 15 / zoomW,\n                            height: 15 / zoomW,\n                            marginRight:6/zoomW,\n                        }} source={moneyImg}></Image>\n                        <Text style={styles.introduces}>{item.payAmount?item.payAmount:\"0\"}</Text>\n                        <Image style={{\n                            marginTop: 10/zoomH,\n                            width: 15 / zoomW,\n                            height: 15 / zoomW,\n                        }} source={defaultarrowImg}></Image></View>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n    //慈善订单\n    renderMeritItem=({item})=>{\n        console.log(\"33333331\",item);\n        return (\n            <View style={styles.itemContainer}>\n                <View style={styles.buddhistTitle}>\n                    <View style={styles.tabTitle}>\n                        <Text style={styles.rowCenter}>订单号：{item.orderNumber}</Text>\n                        <Text style={styles.rowCenter}>订单日期：{item.time>0?moment(Number(item.time)).format(\"YYYY-MM-DD HH:mm:ss\"):''}</Text>\n                    </View>\n                    <View style={styles.introduceTitle}>\n                        <Text style={styles.introduce} numberOfLines={2}>{item.objectName?item.objectName:\"暂无\"}</Text>\n                        <View style={styles.introduceTitle}>\n                            <Text style={{\n                                marginTop: 10/zoomH,\n                                marginRight:70/zoomW,\n                                justifyContent:\"flex-start\",\n                                alignItems:\"center\",\n                                color:\"#000000\"\n                            }}>{item.objectType}</Text>\n                            <View style={styles.typeFee}>\n                            <Image style={{\n                                marginTop: 12/zoomH,\n                                width: 15 / zoomW,\n                                height: 15 / zoomW,\n                                marginRight:6/zoomW,\n                            }} source={moneyImg}></Image>\n                            <Text style={styles.introduces}>{item.payAmount?item.payAmount:\"0\"}</Text></View>\n                        </View>\n                    </View>\n                </View>\n            </View>\n        );\n    }\n    //供奉订单\n    renderRoomItem=({item})=>{\n        console.log(\"33333331\",item);\n        return (\n            <TouchableOpacity style={styles.itemContainer} activeOpacity={0.8}\n                              onPress={() => NoDoublePress.onPress(() => {\n                                  this.props.navigation.push(\"CharitableOrder\", {\n                                      pageStatus:\"\",\n                                      personId:item.objectId\n                                  });\n                              })}>\n                <View style={styles.buddhistTitle}>\n                    <View style={styles.tabTitle}>\n                        <Text style={styles.rowCenter}>订单号：{item.orderNumber}</Text>\n                        <Text style={styles.rowCenter}>订单日期：{item.time>0?moment(Number(item.time)).format(\"YYYY-MM-DD HH:mm:ss\"):''}</Text>\n                    </View>\n                    <View style={styles.introduceTitle}>\n                        <Text style={styles.introduce} numberOfLines={2}>{item.objectName?item.objectName:\"暂无\"}</Text>\n                        <View  style={styles.introduceTitles}>\n                            <Image style={{\n                                marginTop: 12/zoomH,\n                                width: 15 / zoomW,\n                                height: 15 / zoomW,\n                                marginRight:6/zoomW,\n                            }} source={moneyImg}></Image>\n                            <Text style={styles.introduces}>{item.payAmount?item.payAmount:\"0\"}</Text>\n                            <Image style={{\n                                marginTop: 10/zoomH,\n                                width: 15 / zoomW,\n                                height: 15 / zoomW,\n                            }} source={defaultarrowImg}></Image></View>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n    _separator() {\n        return <View style={{height:2/zoomH,backgroundColor:'#F5F5F5'}}></View>;\n    }\n\n}\n\nexport default withNavigationFocus(OrderPage)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: 'white',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    defaultValue:{\n        display:\"flex\",\n        marginTop: 30/zoomH,\n        marginLeft: 16/zoomW,\n        width:\"100%\",\n        flexDirection:'row',\n        backgroundColor: 'white',\n        alignItems:'center',\n        height: 40 / zoomH,\n    },\n    containerButton:{\n        width:\"25%\",\n        flexDirection:'row',\n        backgroundColor: 'white',\n        alignItems:'center',\n        height: 30 / zoomH,\n    },\n    textValue:{\n        fontWeight: \"bold\",\n        color:\"black\",\n        flexDirection:'row',\n        backgroundColor: '#fff',\n        alignItems:'center',\n        height: 30 / zoomH,\n    },\n    clickTextValue:{\n        fontWeight: \"bold\",\n        color:\"#4395ff\",\n        flexDirection:'row',\n        backgroundColor: '#fff',\n        alignItems:'center',\n        height: 30 / zoomH,\n    },\n    list: {\n        backgroundColor: \"#F5F5F5\",\n        width:'100%',\n    },\n    itemContainer:{\n        display:'flex',\n        flexDirection:'row',\n        width:'100%',\n        height:\"auto\",\n        backgroundColor:'white',\n        paddingTop: 10/zoomH,\n        paddingBottom: 25/zoomH\n    },\n    rowImage: {\n        width:55/zoomH,\n        height:55/zoomH,\n        marginRight: 10/zoomW,\n        borderRadius:5\n    },\n    buddhistTitle:{\n        width:width,\n        paddingRight: 15/zoomW,\n        paddingLeft: 15/zoomW,\n        display:\"flex\",\n        flexDirection:\"column\",\n    },\n    introduceTitle:{\n        display: \"flex\",\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n        alignItems:\"center\"\n    },\n    typeFee:{\n        display: \"flex\",\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n        alignItems:\"center\"\n    },\n    introduceTitles:{\n        display: \"flex\",\n        flexDirection:\"row\",\n    },\n    introduce:{\n        marginTop: 10/zoomH,\n        color:\"#000000\"\n    },\n    introduces:{\n        justifyContent:\"flex-end\",\n        marginTop: 10/zoomH,\n        marginRight:10/zoomW,\n        color:\"#000000\"\n    },\n    tabTitle:{\n        display: \"flex\",\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n    },\n    rowCenter:{\n        fontSize:setSpText2(12),\n        color:\"#666666\"\n    },\n    rowCenter2:{\n        fontSize:setSpText2(12),\n        color:\"#000000\"\n    },\n});\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n} from 'react-native';\nimport {\n    xnToast, NoDoublePress, getTextAlignVerticalStyle, trim, timeStampToDateString\n} from '../utils/Common';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport {setSpText2, zoomH, zoomW, height, width} from \"../utils/ScreenUtil\";\nimport RString from \"../utils/RString\";\nimport MultiTextBoxCell from \"../component/cell/MultiTextBoxCell\";\nimport {getFooterBottom} from \"../utils/utils\";\nimport moment from \"./masterproject/MasterProjectGroup\";\nimport CeremonyProjectGroup from \"./ceremonyproject/CeremonyProjectGroup\";\n\nclass VolunteersApply extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            choosePerson: '',\n            choosePersonId: '',\n            isChooseCommit: false,\n            showApplicationTitle: this.props.navigation.state.params.showApplicationTitle,\n            description: '',\n            initTxt: RString('hint_please_choose'),\n        };\n    };\n\n    componentWillMount() {\n        let that = this;\n        // xn-react-native-general-head\n        this.props.navigation.setParams({\n            title: \"义工申请\",         //标题文字\n            isBack: true,               //是否显示返回按钮\n        });\n\n    };\n\n\n    componentDidMount() {\n        console.log(this.props.navigation.state.params.showValue)\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    render() {\n\n        return (\n            <View style={styles.background}>\n                <View style={styles.container}>\n                    <View style={styles.tabStyle}>\n                        <Text style={styles.rowCenter}>\n                            {this.state.showApplicationTitle==true?'您已提交过义工申请,处于审核中':'您已经是义工。'}\n                            </Text>\n                    </View>\n                    <TouchableOpacity style={styles.buttonLeft} activeOpacity={0.8}\n                                      onPress={() => NoDoublePress.onPress(() => {\n                                          this.props.navigation.goBack();\n                                      })}>\n                        <Text style={styles.signUp}>返 回</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        );\n    }\n\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n}\n\nexport default withNavigationFocus(VolunteersApply)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        flexDirection: 'column',\n        height:60,\n    },\n    container:{\n        flex:1,\n        width:'100%',\n        flexDirection:'column',\n        justifyContent:'flex-start',\n        alignItems:'center',\n        backgroundColor: '#F5F5F5',\n        marginBottom:getFooterBottom(),\n    },\n    tabStyle: {\n        width: '100%',\n        height: 200,\n        marginLeft: 16 / zoomW,\n        marginRight: 16 / zoomW,\n        backgroundColor: 'white',\n    },\n    rowCenter:{\n        marginTop:10 / zoomW,\n        marginLeft: 32 / zoomW,\n        marginRight: 32 / zoomW,\n    },\n    buttonLeft:{\n        marginTop:10 / zoomW,\n        width:360/zoomW,\n        height:40/zoomH,\n        backgroundColor:\"#0086fc\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        borderRadius:10\n    },\n    signUp:{\n        fontSize:setSpText2(14),\n        color:\"#fff\"\n    }\n});\n\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity,\n    TextInput,\n    Platform,\n    Alert,ActivityIndicator,\n    Modal,\n} from 'react-native';\nimport {\n    xnToast,\n    NoDoublePress,\n    trim,\n    checkBookingName,\n    checkBookingPhone,\n    checkBookingDescription\n} from '../utils/Common';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport {setSpText2, zoomH, zoomW,} from \"../utils/ScreenUtil\";\nimport RString from \"../utils/RString\";\nimport {getFooterBottom} from \"../utils/utils\";\nimport DateCell from \"../component/cell/DateCell\";\nimport RadioCell from \"../component/cell/RadioCell\";\nimport AppService from \"../service/AppService\";\nimport { NavigationActions } from 'react-navigation';\nclass VolunteersCreateApply extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputNumberString: '',//编号\n            inputNameString: '',//姓名\n            inputPhoneString: '',//手机\n            inputDateString:'',//生日\n            inputSexString:'',//性别\n            inputEmailString:'',//邮箱\n            inputDescription: '',//描述\n            initTxt: RString('hint_please_choose'),\n            buddhistArray: ['信众编号','姓名','电话号码','邮箱','生日','性别','理由'],\n            loading:false,\n        }\n    };\n\n    componentWillMount() {\n        let that = this;\n        // xn-react-native-general-head\n        this.props.navigation.setParams({\n            title: \"义工申请\",         //标题文字\n            isBack: true,               //是否显示返回按钮\n        });\n\n    };\n\n\n    componentDidMount() {\n        console.log(this.props.navigation.state.params.showValue)\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    _createItemCell(title, content, index) {\n        let maxLength = 300;\n        let keyboardType = \"default\";\n        switch (index) {\n            // case 0:\n            //     maxLength = 60;\n            //     keyboardType = \"\";\n            //     return (\n            //         <View style={{\n            //             height: (292 / 7) / zoomH,\n            //             width: '100%',\n            //             flexDirection: 'row',\n            //             justifyContent: 'flex-start',\n            //             alignItems: 'center',\n            //         }}>\n            //             <View style={styles.defaultValue}>\n            //                 <Text style={{fontSize: setSpText2(14),marginLeft:16/zoomW,fontWeight: \"bold\",color:\"black\"}}>信众编号</Text>\n            //                 <Text style={{marginRight:16/zoomW}}>10000010</Text>\n            //             </View>\n            //         </View>\n            //\n            //     )\n            //     break;\n            // 姓名\n            case 1:\n                maxLength = 100;\n                keyboardType = \"\";\n                return (\n                    <View style={{\n                        height: (292 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <TextInput style={[{\n                            paddingTop: 0,// textinput有默认的paddingtop和bottom，需要去掉才能垂直居中\n                            paddingBottom: 0,\n                            paddingLeft:16/zoomW,\n                            flex:1,\n                            width:\"100%\",\n                            height: (300 / 7) / zoomH,\n                            backgroundColor: 'white',\n                            borderRadius: 4,\n                            textAlign: 'left',\n                            fontSize: setSpText2(12),\n                            color: '#666666',\n                        }]}\n                                   underlineColorAndroid=\"transparent\"\n                                   returnKeyType={\"done\"}\n                                   clearButtonMode={\"while-editing\"}\n                                   autoCapitalize={'none'}\n                                   autoCorrect={false}\n                                   autoFocus={false}\n                                   placeholder=\"请输入姓名\"\n                                   keyboardType={keyboardType}\n                                   maxLength={maxLength}\n                                   onBlur={(event) => {\n                                       if (Platform.OS == 'ios') {\n                                           let str = event.nativeEvent.text;\n                                           if (event.nativeEvent.text != undefined) {\n                                               str = event.nativeEvent.text.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                                               this.setState({inputNameString:str});\n                                           }\n                                       } else {\n                                           // android拿不到event.nativeEvent.text,不处理\n                                       }\n                                   }}\n                                   onChangeText={(text) => {\n                                       this.setState({inputNameString:text});\n                                   }}\n\n                        >\n                        </TextInput>\n                        {this._separator()}\n                    </View>\n                )\n                break;\n            // 电话\n            case 2:\n                maxLength = 11;\n                keyboardType = \"numeric\";\n                return (\n                    <View style={{\n                        height: (292 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <TextInput style={[{\n                            paddingTop: 0,// textinput有默认的paddingtop和bottom，需要去掉才能垂直居中\n                            paddingBottom: 0,\n                            paddingLeft: 16/zoomW,\n                            flex:1,\n                            height: (300 / 7) / zoomH,\n                            backgroundColor: 'white',\n                            borderRadius: 4,\n                            textAlign: 'left',\n                            fontSize: setSpText2(12),\n                            color: '#666666',\n                        }]}\n                                   underlineColorAndroid=\"transparent\"\n                                   returnKeyType={\"done\"}\n                                   clearButtonMode={\"while-editing\"}\n                                   autoCapitalize={'none'}\n                                   autoCorrect={false}\n                                   autoFocus={false}\n                                   placeholder=\"请输入电话号码\"\n                                   keyboardType={keyboardType}\n                                   maxLength={maxLength}\n                                   onBlur={(event) => {\n                                       if (Platform.OS == 'ios') {\n                                           let str = event.nativeEvent.text;\n                                           if (event.nativeEvent.text != undefined) {\n                                               str = event.nativeEvent.text.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                                               this.setState({inputPhoneString:str});\n                                           }\n                                       } else {\n                                           // android拿不到event.nativeEvent.text,不处理\n                                       }\n                                   }}\n                                   onChangeText={(text) => {\n                                       this.setState({inputPhoneString:text});\n                                   }}\n\n                        >\n                        </TextInput>\n                        {this._separator()}\n                    </View>\n                )\n                break;\n            // 邮箱\n            case 3:\n                maxLength = 100;\n                keyboardType = \"\";\n                return (\n                    <View style={{\n                        height: (300 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <TextInput style={[{\n                            paddingTop: 0,// textinput有默认的paddingtop和bottom，需要去掉才能垂直居中\n                            paddingBottom: 0,\n                            paddingLeft: 16/zoomW,\n                            flex:1,\n                            height: (300 / 7) / zoomH,\n                            backgroundColor: 'white',\n                            borderRadius: 4,\n                            textAlign: 'left',\n                            fontSize: setSpText2(12),\n                            color: '#666666',\n                        }]}\n                                   underlineColorAndroid=\"transparent\"\n                                   returnKeyType={\"done\"}\n                                   clearButtonMode={\"while-editing\"}\n                                   autoCapitalize={'none'}\n                                   autoCorrect={false}\n                                   autoFocus={false}\n                                   placeholder=\"请输入邮箱\"\n                                   keyboardType={keyboardType}\n                                   maxLength={maxLength}\n                                   onBlur={(event) => {\n                                       if (Platform.OS == 'ios') {\n                                           let str = event.nativeEvent.text;\n                                           if (event.nativeEvent.text != undefined) {\n                                               str = event.nativeEvent.text.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                                               this.setState({inputEmailString:str});\n                                           }\n                                       } else {\n                                           // android拿不到event.nativeEvent.text,不处理\n                                       }\n                                   }}\n                                   onChangeText={(text) => {\n                                       this.setState({inputEmailString:text});\n                                   }}\n\n                        >\n                        </TextInput>\n                        {this._separator()}\n                    </View>\n                )\n                break;\n            //生日\n            case 4:\n                return (\n                    <View style={{\n                        height: (340 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <DateCell\n                            inputDate={''}\n                            title={\"\"}\n                            selectCallback={(text)=>{\n                                let trimedText = trim(text);\n                                if(trimedText.length > 0){\n                                    trimedText = trimedText;\n                                }\n                                console.log(trimedText)\n                                this.setState({\n                                    inputDateString:trimedText\n                                });\n                            }\n                            }\n                        />\n                        {this._separator()}\n                    </View>\n                )\n                break;\n            //单选\n            case 5:\n                // 组装数组\n                let keys_radio = [];\n                let values_radio = [];\n                let selectedKey_radio = '';\n                let selectedValue_radio = '';\n                let kvs_radio = [{'key':'man',value:'男'},{'key':'woman',value:'女'}];\n                for (let index = 0; index < kvs_radio.length; index++) {\n                    const element = kvs_radio[index];\n                    console.log(element)\n                    keys_radio.push(element.key);\n                    values_radio.push(element.value);\n                    if(element.checked==true){\n                        selectedKey_radio = element.key;\n                        selectedValue_radio = element.value;\n                    }\n                }\n                return (\n                    <View style={{\n                        height: (280 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        marginTop:10\n                    }}>\n                        <RadioCell\n                            kvs = {kvs_radio}\n                            keys = {keys_radio}\n                            values={values_radio}\n                            selectedKey={selectedKey_radio}\n                            selectedValue={selectedValue_radio}\n                            changedCallback={(key)=>{\n                                // xnToast(key);\n                                let name = this.getValueByKey(kvs_radio,key);\n                                    console.log(name);\n                                this.setState({inputSexString:name});\n                                }\n                            }\n                        />\n                        {this._separator()}\n                    </View>\n                )\n                break;\n            //申请理由\n            case 6:\n                maxLength = 100;\n                keyboardType = \"\";\n                return (\n                    <View style={{\n                        height: (292 / 7) / zoomH,\n                        width: '100%',\n                        flexDirection: 'row',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                        <TextInput style={[{\n                            paddingTop: 0,// textinput有默认的paddingtop和bottom，需要去掉才能垂直居中\n                            paddingBottom: 0,\n                            paddingLeft: 16/zoomW,\n                            flex:1,\n                            height: (300 / 7) / zoomH,\n                            backgroundColor: 'white',\n                            textAlign: 'left',\n                            fontSize: setSpText2(12),\n                            color: '#666666',\n                        }]}\n                                   underlineColorAndroid=\"transparent\"\n                                   returnKeyType={\"done\"}\n                                   clearButtonMode={\"while-editing\"}\n                                   autoCapitalize={'none'}\n                                   autoCorrect={false}\n                                   autoFocus={false}\n                                   placeholder=\"申请说明\"\n                                   keyboardType={keyboardType}\n                                   maxLength={maxLength}\n                                   onBlur={(event) => {\n                                       if (Platform.OS == 'ios') {\n                                           let str = event.nativeEvent.text;\n                                           if (event.nativeEvent.text != undefined) {\n                                               str = event.nativeEvent.text.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                                               this.setState({inputDescription:str});\n                                           }\n                                       } else {\n                                           // android拿不到event.nativeEvent.text,不处理\n                                       }\n                                   }}\n                                   onChangeText={(text) => {\n                                       this.setState({inputDescription:text});\n                                   }}\n\n                        >\n                        </TextInput>\n                    </View>\n                )\n                break;\n            default:\n                break;\n        }\n    }\n    // 列表的分隔线\n    _separator() {\n        return <View style={{height: 5, backgroundColor: \"#F3F5F6\",position: 'absolute',left:0,bottom:0,right:0}}/>;\n    };\n    //获取单选框值\n    getValueByKey(keyValues,key){\n        let value = '';\n        for(let keyValue of keyValues){\n            if(keyValue['key'] == key) {\n                value = keyValue['value'];\n                break;\n            }\n        }\n        return value;\n    }\n\n    // 加载指示器\n    _activityIndicator() {\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator size=\"large\"/>\n                </View>\n            </Modal>\n        );\n    };\n\n    //创建\n    submit() {\n        let that = this;\n        let params = {\n            type:\"VOLUNTEER\",\n            name: that.state.inputNameString,\n            mobilePhone: that.state.inputPhoneString,\n            sex: that.state.inputSexString,\n            birthDate: new Date(that.state.inputDateString).format(\"yyyy-MM-dd hh:mm:ss\"),\n            email: that.state.inputEmailString,\n            description: that.state.inputDescription,\n            isUser:true\n        };\n        console.log(params)\n        that.setState({\n           loading: true\n       }, () => {\n          AppService.createPerson(params)\n               .then(data => {\n                   that.setState({\n                       loading: false,\n                   });\n                   if (data.message) {\n                       xnToast(data.message);\n                       return;\n                   }\n                   if (!!data.errors === true && !!data.errors.length > 0) {\n                       xnToast(data.errors[0].message);\n                       return;\n                   }\n                   console.log(data.id)\n                   if (data.id == 0) {\n                       xnToast('提交失败');\n                       return;\n                   }\n                   xnToast('提交成功');\n                   // 间隔2秒跳转\n                   const timer = setTimeout(() => {\n                       clearTimeout(timer);\n                       const resetActionTab = NavigationActions.navigate({routeName: 'Home',\n                           action: NavigationActions.navigate({ routeName: 'TabNav'})\n                       });\n                       that.props.navigation.dispatch(resetActionTab);\n                   }, 2000);\n               })\n               .catch(error => {\n                   that.setState({\n                       loading: false,\n                   });\n                   xnToast(error);\n               });\n       });\n    }\n    render() {\n        let that = this;\n        return (\n            <View style={styles.background}>\n                <View style={styles.container}>\n                    {that._activityIndicator()}\n                    <View style={{\n                        marginTop: 1,\n                        width: '100%',\n                        height: '60%',\n                        flexDirection: 'column',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                    }}>\n                    {that._createItemCell(this.state.buddhistArray[0] + ':', that.state.inputNameString, 0)}\n                    {that._createItemCell(this.state.buddhistArray[1] + ':', that.state.inputNameString, 1)}\n                    {that._createItemCell(this.state.buddhistArray[2] + ':', that.state.inputPhoneString, 2)}\n                    {that._createItemCell(this.state.buddhistArray[3] + ':', that.state.inputEmailString, 3)}\n                    {that._createItemCell(this.state.buddhistArray[4] + ':', that.state.inputDateString, 4)}\n                    {that._createItemCell(this.state.buddhistArray[5] + ':', that.state.inputSexString, 5)}\n                    {that._createItemCell(this.state.buddhistArray[6] + ':', that.state.inputDescription, 6)}\n                    </View>\n                    <TouchableOpacity style={styles.buttonLeft} activeOpacity={0.8}\n                    onPress={() => NoDoublePress.onPress(() => {\n                          let trimeNameString = trim(that.state.inputNameString);\n                          if (!checkBookingName(trimeNameString,\"姓名\")) {\n                              return;\n                          }\n                          let trimePhoneString = trim(that.state.inputPhoneString);\n                          if (!checkBookingPhone(trimePhoneString,\"手机\")) {\n                              return;\n                          }\n                        let trimeDescription = trim(that.state.inputDescription);\n                        if (!checkBookingDescription(trimeDescription,\"申请理由\")) {\n                            return;\n                        }\n                        Alert.alert(\n                            '',\n                            '确定提交义工申请',\n                            [\n                                {text: RString('ensure'),style:'destructive', onPress: function(){\n                                    that.submit();\n                                    }},\n                                {text: RString('cancel'),style:'cancel', onPress: function(){\n                                    }}\n                            ]\n                        )\n\n                      })}>\n\n                        <Text style={styles.signUp}>提 交</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        );\n    }\n\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n}\n\nexport default withNavigationFocus(VolunteersCreateApply)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        flexDirection: 'column',\n        height:60,\n    },\n    container:{\n        flex:1,\n        width:'100%',\n        flexDirection:'column',\n        justifyContent:'flex-start',\n        alignItems:'center',\n        backgroundColor: '#F5F5F5',\n        marginBottom:getFooterBottom(),\n    },\n    loadingBg: {\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n    },\n    defaultValue:{\n        flex:1,\n        width:'100%',\n        flexDirection:'row',\n        justifyContent:'space-between',\n        backgroundColor: 'white',\n        alignItems:'center',\n        height: (257 / 7) / zoomH,\n    },\n    tabStyle: {\n        width: '100%',\n        height: 200,\n        marginLeft: 16 / zoomW,\n        marginRight: 16 / zoomW,\n        backgroundColor: 'white',\n    },\n    rowCenter:{\n        marginTop:10 / zoomW,\n        marginLeft: 32 / zoomW,\n        marginRight: 32 / zoomW,\n    },\n    buttonLeft:{\n        marginTop:10 / zoomW,\n        width:360/zoomW,\n        height:40/zoomH,\n        backgroundColor:\"#0086fc\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        borderRadius:10\n    },\n    signUp:{\n        fontSize:setSpText2(14),\n        color:\"#fff\"\n    }\n});\n\n\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity, Modal, ActivityIndicator\n} from 'react-native';\nimport {\n    xnToast, getTextAlignVerticalStyle,\n} from '../utils/Common';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport {setSpText2, zoomH, zoomW, width} from \"../utils/ScreenUtil\";\nimport RString from \"../utils/RString\";\nimport {getFooterBottom} from \"../utils/utils\";\nimport AppService from \"../service/AppService\";\nimport EmptyView from \"../component/general/EmptyView\";\nimport moment from \"moment\";\nclass CharitableOrder extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            initTxt: RString('hint_please_choose'),\n            loading:false,\n            id:\"\",\n            data:{},\n            showEmptyView:false,\n        };\n    };\n\n    componentWillMount() {\n        let that = this;\n        // xn-react-native-general-head\n        this.props.navigation.setParams({\n            title: \"供奉订单\",         //标题文字\n            isBack: true,               //是否显示返回按钮\n        });\n        this.setState({\n            id:this.props.navigation.state.params.personId\n        },()=>{\n            console.log(that.state.id)\n        })\n    };\n\n\n    componentDidMount() {\n        if(this.state.id){\n            this.getCeremony()\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n    getCeremony(){\n        let that =this;\n        this.setState({\n            loading: true\n        });\n        let params ={\n            id:that.state.id\n        }\n        AppService.getDedicationProject(params)\n            .then(data => {\n                that.setState({\n                    loading: false,\n                });\n                console.log(params);\n                console.log(data);\n                if (data.message) {\n                    xnToast(data.message);\n                    that.setState({\n                        showEmptyView: true,\n                    });\n                    return;\n                }\n                if (data.errors && data.errors.length > 0) {\n                    xnToast(data.errors[0].message);\n                } else {\n                    if (!!!data.dedication) {\n                        console.log('没有数据');\n                        that.setState({\n                            showEmptyView: true,\n                        });\n                        return;\n                    }\n                    that.setState({\n                        data:data.dedication,\n                    },()=>{\n                        console.log(that.state.data)\n                    });\n                }\n            })\n            .catch(error => {\n                that.setState({\n                    loading: false,\n                    loadMore: false,\n                });\n                xnToast(error);\n\n            });\n\n    }\n    _refresh(){\n\n    }\n    payment(){\n        let {type,location,id} = this.state;\n\n        let params ={\n            type,\n            location\n        }\n        console.log(params);\n        this.props.navigation.push('CharitableOrderPay', {from: 'CharitableOrder',\n            pageStatus: true,\n            isAbout:true,\n            id:id\n        });\n    }\n\n\n    renderItem(){\n        return(\n            <View style={[styles.dataList,{width:'100%',height:'100%',backgroundColor:\"#fff\",}]}>\n                <View style={styles.content}>\n                    {this._separator()}\n                    {/*供奉类型*/}\n                    <View style={styles.conList}>\n                        <Text style={styles.titleType}>供奉类型</Text>\n                        <View style={styles.conRight}>\n                            <Text style={[styles.fieldValue,]}>{this.state.data.objectType}</Text>\n                        </View>\n                    </View>\n                    {this._separator()}\n                    {/*供奉大小*/}\n                    <View style={styles.conList}>\n                        <Text style={styles.titleType}>供奉大小</Text>\n                        <View style={styles.conRight}>\n                            <Text style={[styles.fieldValue,]}>大</Text>\n                        </View>\n                    </View>\n                    {this._separator()}\n                    {/*供奉位置*/}\n                    <View style={styles.conList}>\n                        <Text style={styles.titleType}>供奉位置</Text>\n                        <View style={styles.conRight}>\n                            <Text style={[styles.fieldValueJian,]}>{this.state.data.locatorId}</Text>\n                        </View>\n                    </View>\n                    {this._separator()}\n                    {/*供奉时长*/}\n                    <View style={styles.conList}>\n                        <Text style={styles.titleType}>供奉时长</Text>\n                        <View style={styles.conRight}>\n                            <Text style={[styles.fieldValueJian,]}>{this.state.data.lastDurationId}</Text>\n                        </View>\n                    </View>\n                    {this._separator()}\n                    {/*慈善金*/}\n                    <View style={styles.conList}>\n                        <Text style={styles.titleType}>到期时间</Text>\n                        <View style={styles.conRight}>\n                            <Text style={[styles.fieldValueJian]}>{this.state.data.dueDate>0?moment(Number(this.state.data.dueDate)).format(\"YYYY-MM-DD\"):''}</Text>\n                        </View>\n                    </View>\n                    {this._separator()}\n                </View>\n\n                <View style={{position:'absolute',\n                    bottom:200/zoomH,\n                    width:width,\n                    display:\"flex\",\n                    justifyContent:'center',\n                    alignItems:\"center\",\n                }}>\n                    <TouchableOpacity style={styles.buttonValue} activeOpacity={0.8}\n                                      onPress={() => this.payment()}\n                    >\n                        <Text style={[styles.payButtom,getTextAlignVerticalStyle(40/zoomH)]}>续 费</Text>\n\n                    </TouchableOpacity>\n                </View>\n            </View>\n        )\n    }\n\n    // 加载指示器\n    _activityIndicator(){\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator\n                        size={'small'}\n                        animating={true}/>\n                    {/*<Text>{RString('message_loading')}</Text>*/}\n                </View>\n            </Modal>\n        );\n    };\n\n\n    _separator() {\n        return <View style={{height:1/zoomH,backgroundColor:'#E6E7E8'}}></View>;\n    }\n\n    render() {\n\n        return (\n            <View style={styles.background}>\n                {this._activityIndicator()}\n                {this.renderItem()}\n            </View>\n        );\n    }\n\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n}\n\nexport default withNavigationFocus(CharitableOrder)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    container:{\n        flex:1,\n        width:'100%',\n        flexDirection:'column',\n        justifyContent:'flex-start',\n        alignItems:'center',\n        backgroundColor: '#F5F5F5',\n        marginBottom:getFooterBottom(),\n    },\n    dataList:{\n        display:'flex',\n        justifyContent:'flex-start',\n        alignItems:'flex-start',\n        flexWrap: \"wrap\",\n        paddingTop: 20/zoomH,\n        flexDirection: 'row',\n        flex:1\n    },\n\n    content:{\n        paddingLeft: 15/zoomW,\n        paddingRight: 15/zoomW,\n        width:width,\n        // backgroundColor:\"pink\",\n\n    },\n\n    conList:{\n        display:\"flex\",\n        justifyContent:\"space-between\",\n        alignItems:'center',\n        height:50/zoomH,\n        flexDirection: 'row',\n    },\n\n\n\n    titleType:{\n        color:\"#333\",\n        fontSize: setSpText2(15)\n    },\n\n    titleType2:{\n        color:\"#333\",\n        fontSize: setSpText2(15),\n        width:55/zoomW,\n        // backgroundColor:\"red\"\n    },\n\n    conRight:{\n        flexDirection: 'row',\n        alignItems:'center',\n    },\n\n    conRight2:{\n        flexDirection: 'row',\n        alignItems:'center',\n        width:width,\n        // backgroundColor:\"blue\",\n        justifyContent:\"flex-start\"\n    },\n\n    fieldValue:{\n        width:200/zoomW,\n        backgroundColor:'#fff',\n        textAlign: 'right',\n        fontSize:setSpText2(14),\n        color:\"#cbcbcc\",\n        marginRight: 10/zoomW\n    },\n\n    fieldValueJian:{\n        backgroundColor:'#fff',\n        textAlign: 'right',\n        fontSize:setSpText2(14),\n        color:\"#cbcbcc\",\n    },\n\n    inputText:{\n        width:(width-135)/zoomW,\n        height:45/zoomH,\n        textAlign:'right',\n        // backgroundColor:\"pink\"\n    },\n\n    rowGoto:{\n        width:13/zoomH,\n        height:13/zoomH,\n    },\n\n    buttonValue:{\n        display:\"flex\",\n        justifyContent:'center',\n        alignItems:\"center\",\n        flexDirection:'row',\n        backgroundColor:\"#0086fc\",\n        borderRadius:8,\n        width:120/zoomW,\n        height:40/zoomH,\n    },\n\n    payButtom:{\n        height:40/zoomH,\n        color:\"#fff\",\n        textAlign:'center',\n        fontSize:setSpText2(18),\n        fontWeight:\"600\",\n    },\n\n\n\n\n});\n\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n} from 'react-native';\nimport {\n    xnToast\n} from '../utils/Common';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport {setSpText2, zoomH, zoomW, width} from \"../utils/ScreenUtil\";\nimport RString from \"../utils/RString\";\nimport {getFooterBottom} from \"../utils/utils\";\nimport AppService from \"../service/AppService\";\nimport EmptyView from \"../component/general/EmptyView\";\nimport moment from \"moment\";\n\nclass CeremonyOrderDetail extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            choosePerson: '',\n            choosePersonId: '',\n            isChooseCommit: false,\n            description: '',\n            initTxt: RString('hint_please_choose'),\n            id:\"\",\n            data:{},\n            showEmptyView:false,\n        };\n    };\n\n    componentWillMount() {\n        let that = this;\n        // xn-react-native-general-head\n        this.props.navigation.setParams({\n            title: \"法会活动\",         //标题文字\n            isBack: true,               //是否显示返回按钮\n        });\n        this.setState({\n            id:this.props.navigation.state.params.personId\n        },()=>{\n            console.log(that.state.id)\n        })\n\n    };\n\n\n    componentDidMount() {\n        if(this.state.id){\n            this.getCeremony()\n        }\n    }\n\n    getCeremony(){\n        let that =this;\n        this.setState({\n            loading: true\n        });\n        let params ={\n            id:that.state.id\n        }\n        AppService.getCeremonyProject(params)\n            .then(data => {\n                that.setState({\n                    loading: false,\n                });\n                console.log(params);\n                console.log(data);\n                if (data.message) {\n                    xnToast(data.message);\n                    that.setState({\n                        showEmptyView: true,\n                    });\n                    return;\n                }\n                if (data.errors && data.errors.length > 0) {\n                    xnToast(data.errors[0].message);\n                } else {\n                    if (!!!data.ceremonyProject) {\n                        console.log('没有数据');\n                        that.setState({\n                            showEmptyView: true,\n                        });\n                        return;\n                    }\n                    that.setState({\n                        data:data.ceremonyProject,\n                        overflowFlag: data.ceremonyProject.limitPersonCount <= data.ceremonyProject.currentCount\n                    },()=>{\n                        console.log(that.state.data)\n                    });\n                }\n            })\n            .catch(error => {\n                that.setState({\n                    loading: false,\n                    loadMore: false,\n                });\n                xnToast(error);\n\n            });\n\n    }\n\n    _refresh(){\n\n    }\n    componentWillUnmount() {\n\n    }\n\n    render() {\n        let {beginTime,description,fee,location,name,limitPersonCount,currentCount } = this.state.data;\n        // moment\n        return (\n            <View style={styles.background}>\n                <View style={styles.containerTop}>\n                    <Text style={styles.master}>{name}</Text>\n                </View>\n                <View style={styles.content}>\n                    <View style={styles.introduce}>\n                        <Text style={styles.fontSize}>日期：{beginTime>0?moment(Number(beginTime)).format(\"YYYY-MM-DD\"):''}</Text>\n                        <Text style={styles.fontSize}>时间：{beginTime>0?moment(Number(beginTime)).format(\"HH:mm:ss\"):''}</Text>\n                    </View>\n                    <View style={styles.introduce2}>\n                        <Text style={styles.fontSize}>地点：{location?location.address:\"\"}</Text>\n                        <Text style={styles.fontSizeFee}>报名费：{fee?fee:0}</Text>\n                    </View>\n                    <View style={styles.introduce2}>\n                        <Text style={styles.fontSize}>限制人数：{limitPersonCount?limitPersonCount:0}</Text>\n                        <Text style={styles.fontSizeNum}>剩余人数：{(limitPersonCount-currentCount)?limitPersonCount-currentCount:0}</Text>\n                    </View>\n                    <Text style={styles.con}>{description?description:\"暂无介绍\"}</Text>\n                </View>\n            </View>\n        );\n    }\n\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n\n\n\n}\n\nexport default withNavigationFocus(CeremonyOrderDetail)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n\n    containerTop:{\n        width:'100%',\n        flexDirection:'column',\n        justifyContent:'center',\n        alignItems:'center',\n        // backgroundColor: '#F5F5F5',\n        marginBottom:getFooterBottom(),\n        marginTop: 30/zoomH,\n        backgroundColor:\"#fff\"\n    },\n\n    master:{\n        fontSize:setSpText2(18),\n        color: \"#333\",\n        marginTop: 22/zoomH\n    },\n\n    masterTitle:{\n        fontSize:setSpText2(14),\n        marginTop: 15/zoomH,\n        color: \"#333\",\n    },\n\n    content:{\n        paddingLeft: 50/zoomW,\n        paddingRight: 50/zoomW\n\n    },\n\n    introduce:{\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n        alignItems:\"center\",\n        marginTop:30/zoomH\n    },\n\n    introduce2:{\n        flexDirection:\"row\",\n        justifyContent:\"space-between\",\n        alignItems:\"center\",\n        marginTop:30/zoomH\n    },\n\n    con:{\n        marginTop:30/zoomH,\n        color:\"#333\",\n        fontSize:setSpText2(14)\n    },\n\n    fontSize:{\n        color:\"#333\",\n        fontSize:setSpText2(14),\n    },\n    fontSizeFee:{\n        color:\"#333\",\n        marginRight: 30/zoomW,\n        fontSize:setSpText2(14),\n    },\n    fontSizeNum:{\n        color:\"#333\",\n        marginRight: 20/zoomW,\n        fontSize:setSpText2(14),\n    },\n    containerButton:{\n        position:\"absolute\",\n        bottom:70/zoomH,\n    },\n\n    buttonArray:{\n        backgroundColor:\"#fff\",\n        height:\"auto\",\n        width:width-90,\n        display: \"flex\",\n        justifyContent:\"space-between\",\n        marginLeft: 45/zoomW,\n        marginRight: 45/zoomW,\n        flexDirection:\"row\"\n    },\n\n    buttonLeft:{\n        width:106/zoomW,\n        height:40/zoomH,\n        backgroundColor:\"#0086fc\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        borderRadius:10\n    },\n\n    buttonRight:{\n        width:106/zoomW,\n        height:40/zoomH,\n        backgroundColor:\"#fff\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        borderRadius:10,\n        borderColor:\"#eee\",\n        borderWidth:1\n    },\n\n    signUp:{\n        fontSize:setSpText2(14),\n        color:\"#fff\"\n    },\n\n    make:{\n        fontSize:setSpText2(14),\n        color:\"#333\"\n    },\n    buttonOverFlow:{\n        marginLeft: 140/zoomW,\n        width:106/zoomW,\n        height:40/zoomH,\n        backgroundColor:\"red\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        borderRadius:10,\n    },\n\n\n});\n\n\n\n/**\n * Created by Cassie on 2018/03/21\n */\nimport React, {Component} from 'react';\nimport {\n    StyleSheet,\n    View,\n    Text,\n    TouchableOpacity, Image, Modal, ActivityIndicator,TextInput\n} from 'react-native';\nimport {\n    xnToast, NoDoublePress, getTextAlignVerticalStyle, trim, timeStampToDateString\n} from '../utils/Common';\nimport {withNavigationFocus} from 'react-navigation-is-focused-hoc';\nimport {setSpText2, zoomH, zoomW, height, width} from \"../utils/ScreenUtil\";\nimport RString from \"../utils/RString\";\nimport MultiTextBoxCell from \"../component/cell/MultiTextBoxCell\";\nimport {getFooterBottom} from \"../utils/utils\";\nimport ActionSheet from 'react-native-actionsheet';\nimport AppService from \"../service/AppService\";\nclass CharitableActivities extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            choosePerson: '',\n            choosePersonId: '',\n            isChooseCommit: false,\n            description: '',\n            initTxt: RString('hint_please_choose'),\n            loading:false,\n            typeArr:['捐赠','放生','取消'],  //慈善类型数据源\n\n            consecrationLocation:[],\n            consecrationLocationCopy:[],\n            consecrationEvent:[],\n            money:null,\n\n            type:\"\",  //慈善类型\n            location:\"\",\n\n        };\n    };\n\n    componentWillMount() {\n        let that = this;\n        // xn-react-native-general-head\n        this.props.navigation.setParams({\n            title: \"慈善功德\",         //标题文字\n            isBack: true,               //是否显示返回按钮\n        });\n\n    };\n\n\n    componentDidMount() {\n\n    }\n\n    //慈善类型\n    findConsecrationLocation(str){\n        let that =this;\n        this.setState({\n            loading: true\n        });\n        let params ={\n            pageSize:0,\n            type:str\n        }\n        AppService.findMeritProject(params)\n            .then(data => {\n                that.setState({\n                    loading: false,\n                });\n                console.log(params);\n                console.log(data);\n                if (data.message) {\n                    xnToast(data.message);\n                    return;\n                }\n                if (data.errors && data.errors.length > 0) {\n                    xnToast(data.errors[0].message);\n                } else {\n                    console.log(data);\n                    if (!!!data.result) {\n                        console.log('没有数据');\n                        return;\n                    }\n                    let result = data.result;\n                    let tempArr1=[];\n                    let tempArr2=[];\n                    for(let i=0;i<result.length;i++){\n                        tempArr1.push(result[i].name)\n                        tempArr2.push({\n                            id:result[i].id,\n                            name:result[i].name,\n                            fee:result[i].fee\n                        })\n                    }\n                    tempArr1.push(\"取消\");\n                    tempArr2.push({\n                        id:123456,\n                        name:\"取消\",\n                        fee:\"\"\n                    });\n                    that.setState({\n                        consecrationLocation:tempArr1,\n                        consecrationEvent:tempArr2,\n                    },()=>{\n                        console.log(that.state.consecrationLocation,\"11111\");\n                        console.log(that.state.consecrationEvent,\"22222\");\n                    });\n                }\n            })\n            .catch(error => {\n                that.setState({\n                    loading: false,\n                });\n                xnToast(error);\n\n            });\n    }\n\n\n\n\n\n\n    componentWillUnmount() {\n\n    }\n\n    //慈善类型\n    clickType(index){\n        console.log(index)  //选中的下标\n        let arr = this.state.typeArr;\n        let arrLenght =this.state.typeArr.length-1;\n        console.log(arrLenght);\n        if(index == arrLenght){\n            // this.setState({\n            //     type:\"\"\n            // });\n        }else {\n            if(arr[index]==\"捐赠\"){\n                this.setState({\n                    type: arr[index],\n                    consecrationLocation:[],\n                    location:\"\",\n                    money:null\n                },()=>{\n                    this.findConsecrationLocation(\"donate\");\n                })\n            }else if(arr[index]==\"放生\"){\n                this.setState({\n                    type: arr[index],\n                    consecrationLocation:[],\n                    location:\"\",\n                    money:null\n                },()=>{\n                    this.findConsecrationLocation(\"free\");\n                })\n            }\n        }\n    }\n\n\n    //慈善事件\n    clickEvent(index){\n        let arr = this.state.consecrationLocation;\n        // let arr2 =this.state.consecrationLocationCopy;\n        let arrLenght =this.state.consecrationLocation.length-1;\n        console.log(arrLenght);\n        if(index == arrLenght){\n            // this.setState({\n            //     location:\"\",\n            //     money:null\n            // });\n        }else {\n            this.setState({\n                location: arr[index],\n                money:null,\n            },()=>{\n                let result =this.state.consecrationEvent;\n                for(let i=0;i<result.length;i++){\n                    if(arr[index]==result[i].name){\n                        this.setState({\n                            money:result[i].fee\n                        })\n                    }\n                }\n\n            })\n\n\n        }\n    }\n\n\n\n    openType(){\n        this.ActionSheetType.show();\n    }\n\n    openEvent(){\n        if(this.state.type ==\"\"){\n            xnToast(\"请您先选择慈善类型!\",);\n            return ;\n        }\n        this.ActionSheetEvent.show();\n    }\n\n\n    payment(){\n        let {type,location} = this.state;\n\n        let params ={\n            type,\n            location\n        }\n        console.log(params);\n        this.props.navigation.push('PaymentDesk', {from: 'WorshipActivities',\n            pageStatus: true,\n            isAbout:true,\n        });\n    }\n\n\n    renderItem(){\n        return(\n            <View style={[styles.dataList,{width:'100%',height:'100%',backgroundColor:\"#fff\",}]}>\n                <View style={styles.content}>\n                    {/*供奉类型*/}\n                    <TouchableOpacity style={styles.conList} activeOpacity={0.8}\n                                      onPress={() => this.openType()}\n                    >\n                        <Text style={styles.titleType}>慈善类型</Text>\n                        <View style={styles.conRight}>\n                            {/*this.state.type?{color:\"#333\"}:null*/}\n                            <Text style={[styles.fieldValue,]}>{this.state.type?this.state.type:\"请选择\"}</Text>\n                            <Image style={styles.rowGoto} source={require(\"../img/bread.png\")}></Image>\n                        </View>\n                        <ActionSheet\n                            tintColor={\"#333\"}\n                            ref={o =>this.ActionSheetType = o}\n                            title=\"\"\n                            options={this.state.typeArr}\n                            onPress={(index) => {this.clickType(index)}}\n                            cancelButtonIndex={2}\n                        />\n                    </TouchableOpacity>\n                    {this._separator()}\n\n\n                    {/*供奉位置*/}\n                    <TouchableOpacity style={styles.conList} activeOpacity={0.8}\n                                      onPress={() => this.openEvent()}\n                    >\n                        <Text style={styles.titleType}>慈善事件</Text>\n                        <View style={styles.conRight}>\n                            {/*this.state.type?{color:\"#333\"}:null*/}\n                            <Text style={[styles.fieldValue,]}>{this.state.location?this.state.location:\"请选择\"}</Text>\n                            <Image style={styles.rowGoto} source={require(\"../img/bread.png\")}></Image>\n                        </View>\n                        <ActionSheet\n                            tintColor={\"#333\"}\n                            ref={o =>this.ActionSheetEvent = o}\n                            title=\"\"\n                            options={this.state.consecrationLocation}\n                            onPress={(index) => {this.clickEvent(index)}}\n                            cancelButtonIndex={this.state.consecrationLocation.length-1}\n                        />\n                    </TouchableOpacity>\n                    {this._separator()}\n\n                    {/*慈善金*/}\n                    <View style={styles.conList}>\n                        <Text style={styles.titleType}>慈善金</Text>\n                        <View style={styles.conRight}>\n                            <Text style={[styles.fieldValueJian,]}>{this.state.money?this.state.money:null}元</Text>\n                        </View>\n                    </View>\n                </View>\n\n                <View style={{position:'absolute',\n                    bottom:140/zoomH,\n                    width:width,\n                    display:\"flex\",\n                    justifyContent:'center',\n                    alignItems:\"center\",\n                }}>\n                    <TouchableOpacity style={styles.buttonValue} activeOpacity={0.8}\n                                      onPress={() => this.payment()}\n                    >\n                        <Text style={[styles.payButtom,getTextAlignVerticalStyle(40/zoomH)]}>支 付</Text>\n\n                    </TouchableOpacity>\n                </View>\n            </View>\n        )\n    }\n\n    header(){\n        return (\n            <View style={{width:width,height:120/zoomH}}>\n                <Image style={{\n                    width: '100%',\n                    height: 120/zoomH,\n                }}\n                       source={require('../img/home.jpg')}\n                />\n            </View>\n        )\n    }\n\n    // 加载指示器\n    _activityIndicator(){\n        return (\n            <Modal\n                animationType=\"none\"\n                transparent\n                visible={this.state.loading}\n                onRequestClose={() => {\n                }}\n            >\n                <View style={styles.loadingBg}>\n                    <ActivityIndicator\n                        size={'small'}\n                        animating={true}/>\n                    {/*<Text>{RString('message_loading')}</Text>*/}\n                </View>\n            </Modal>\n        );\n    };\n\n\n    _separator() {\n        return <View style={{height:1/zoomH,backgroundColor:'#E6E7E8'}}></View>;\n    }\n\n    render() {\n\n        return (\n            <View style={styles.background}>\n                {this._activityIndicator()}\n                {this.header()}\n                {this.renderItem()}\n            </View>\n        );\n    }\n\n    //渲染item\n    keyExtractor = (item, index) => index;\n\n}\n\nexport default withNavigationFocus(CharitableActivities)\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        backgroundColor: '#F5F5F5',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    container:{\n        flex:1,\n        width:'100%',\n        flexDirection:'column',\n        justifyContent:'flex-start',\n        alignItems:'center',\n        backgroundColor: '#F5F5F5',\n        marginBottom:getFooterBottom(),\n    },\n    dataList:{\n        display:'flex',\n        justifyContent:'flex-start',\n        alignItems:'flex-start',\n        flexWrap: \"wrap\",\n        paddingTop: 20/zoomH,\n        flexDirection: 'row',\n        flex:1\n    },\n\n    content:{\n        paddingLeft: 15/zoomW,\n        paddingRight: 15/zoomW,\n        width:width,\n        // backgroundColor:\"pink\",\n\n    },\n\n    conList:{\n        display:\"flex\",\n        justifyContent:\"space-between\",\n        alignItems:'center',\n        height:50/zoomH,\n        flexDirection: 'row',\n    },\n\n\n\n    titleType:{\n        color:\"#333\",\n        fontSize: setSpText2(15)\n    },\n\n    titleType2:{\n        color:\"#333\",\n        fontSize: setSpText2(15),\n        width:55/zoomW,\n        // backgroundColor:\"red\"\n    },\n\n    conRight:{\n        flexDirection: 'row',\n        alignItems:'center',\n    },\n\n    conRight2:{\n        flexDirection: 'row',\n        alignItems:'center',\n        width:width,\n        // backgroundColor:\"blue\",\n        justifyContent:\"flex-start\"\n    },\n\n    fieldValue:{\n        width:200/zoomW,\n        backgroundColor:'#fff',\n        textAlign: 'right',\n        fontSize:setSpText2(14),\n        color:\"#cbcbcc\",\n        marginRight: 10/zoomW\n    },\n\n    fieldValueJian:{\n        backgroundColor:'#fff',\n        textAlign: 'right',\n        fontSize:setSpText2(14),\n        color:\"#cbcbcc\",\n    },\n\n    inputText:{\n        width:(width-135)/zoomW,\n        height:45/zoomH,\n        textAlign:'right',\n        // backgroundColor:\"pink\"\n    },\n\n    rowGoto:{\n        width:13/zoomH,\n        height:13/zoomH,\n    },\n\n    buttonValue:{\n        display:\"flex\",\n        justifyContent:'center',\n        alignItems:\"center\",\n        flexDirection:'row',\n        backgroundColor:\"#0086fc\",\n        borderRadius:8,\n        width:120/zoomW,\n        height:40/zoomH,\n    },\n\n    payButtom:{\n        height:40/zoomH,\n        color:\"#fff\",\n        textAlign:'center',\n        fontSize:setSpText2(18),\n        fontWeight:\"600\",\n    },\n\n});\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);