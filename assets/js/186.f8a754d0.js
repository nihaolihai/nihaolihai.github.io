(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{678:function(n,t,a){"use strict";a.r(t);var i=a(6),e=Object(i.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"java-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-运算符"}},[n._v("#")]),n._v(" Java 运算符")]),n._v(" "),a("p",[n._v("计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：")]),n._v(" "),a("p",[n._v("算术运算符\n关系运算符\n位运算符\n逻辑运算符\n赋值运算符\n其他运算符\n算术运算符\n算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。")]),n._v(" "),a("p",[n._v("表格中的实例假设整数变量A的值为10，变量B的值为20：")]),n._v(" "),a("p",[n._v("操作符\t描述\t例子")]),n._v(" "),a("ul",[a("li",[n._v("加法 - 相加运算符两侧的值\tA + B 等于 30")])]),n._v(" "),a("ul",[a("li",[n._v("减法 - 左操作数减去右操作数\tA – B 等于 -10")])]),n._v(" "),a("ul",[a("li",[n._v("乘法 - 相乘操作符两侧的值\tA * B等于200\n/\t除法 - 左操作数除以右操作数\tB / A等于2\n％\t取余 - 左操作数除以右操作数的余数\tB%A等于0\n++\t自增: 操作数的值增加1\tB++ 或 ++B 等于 21（区别详见下文）\n--\t自减: 操作数的值减少1\tB-- 或 --B 等于 19（区别详见下文）\n实例\n下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：")])]),n._v(" "),a("p",[n._v("实例\npublic class Test {")]),n._v(" "),a("p",[n._v('public static void main(String[] args) {\nint a = 10;\nint b = 20;\nint c = 25;\nint d = 25;\nSystem.out.println("a + b = " + (a + b) );\nSystem.out.println("a - b = " + (a - b) );\nSystem.out.println("a * b = " + (a * b) );\nSystem.out.println("b / a = " + (b / a) );\nSystem.out.println("b % a = " + (b % a) );\nSystem.out.println("c % a = " + (c % a) );\nSystem.out.println("a++   = " +  (a++) );\nSystem.out.println("a--   = " +  (a--) );\n// 查看  d++ 与 ++d 的不同\nSystem.out.println("d++   = " +  (d++) );\nSystem.out.println("++d   = " +  (++d) );\n}\n}')]),n._v(" "),a("p",[n._v("运行实例 »\n以上实例编译运行结果如下：")]),n._v(" "),a("p",[n._v("a + b = 30\na - b = -10\na * b = 200\nb / a = 2\nb % a = 0\nc % a = 5\na++   = 10\na--   = 11\nd++   = 25\n++d   = 27\n自增自减运算符\n1、自增（++）自减（--）运算符是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。")]),n._v(" "),a("p",[n._v('实例\npublic class selfAddMinus{\npublic static void main(String[] args){\nint a = 3;//定义一个变量；\nint b = ++a;//自增运算\nint c = 3;\nint d = --c;//自减运算\nSystem.out.println("进行自增运算后的值等于"+b);\nSystem.out.println("进行自减运算后的值等于"+d);\n}\n}\n运行结果为：')]),n._v(" "),a("p",[n._v("进行自增运算后的值等于4\n进行自减运算后的值等于2\n解析：")]),n._v(" "),a("p",[n._v("int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4")]),n._v(" "),a("p",[n._v("int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2")]),n._v(" "),a("p",[n._v("2、前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。")]),n._v(" "),a("p",[n._v("3、后缀自增自减法(a++,a--): 先进行表达式运算，再进行自增或者自减运算 实例：")]),n._v(" "),a("p",[n._v('实例\npublic class selfAddMinus{\npublic static void main(String[] args){\nint a = 5;//定义一个变量；\nint b = 5;\nint x = 2*++a;\nint y = 2*b++;\nSystem.out.println("自增运算符前缀运算后a="+a+",x="+x);\nSystem.out.println("自增运算符后缀运算后b="+b+",y="+y);\n}\n}\n运行结果为：')]),n._v(" "),a("p",[n._v("自增运算符前缀运算后a=6，x=12\n自增运算符后缀运算后b=6，y=10\n关系运算符\n下表为Java支持的关系运算符")]),n._v(" "),a("p",[n._v("表格中的实例整数变量A的值为10，变量B的值为20：")]),n._v(" "),a("p",[n._v("运算符\t描述\t例子\n==\t检查如果两个操作数的值是否相等，如果相等则条件为真。\t（A == B）为假。\n!=\t检查如果两个操作数的值是否相等，如果值不相等则条件为真。\t(A != B) 为真。")]),n._v(" "),a("blockquote",[a("p",[n._v("检查左操作数的值是否大于右操作数的值，如果是那么条件为真。\t（A> B）为假。\n< \t检查左操作数的值是否小于右操作数的值，如果是那么条件为真。\t（A <B）为真。\n=\t检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。\t（A> = B）为假。\n<=\t检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。\t（A <= B）为真。\n实例\n下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：")])]),n._v(" "),a("p",[n._v("Test.java 文件代码：\npublic class Test {")]),n._v(" "),a("p",[n._v('public static void main(String[] args) {\nint a = 10;\nint b = 20;\nSystem.out.println("a == b = " + (a == b) );\nSystem.out.println("a != b = " + (a != b) );\nSystem.out.println("a > b = " + (a > b) );\nSystem.out.println("a < b = " + (a < b) );\nSystem.out.println("b >= a = " + (b >= a) );\nSystem.out.println("b <= a = " + (b <= a) );\n}\n}\n以上实例编译运行结果如下：')]),n._v(" "),a("p",[n._v("a == b = false\na != b = true\na > b = false\na < b = true\nb >= a = true\nb <= a = false\n位运算符\nJava定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。")]),n._v(" "),a("p",[n._v("位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：")]),n._v(" "),a("h2",{attrs:{id:"a-0011-1100b-0000-1101"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-0011-1100b-0000-1101"}},[n._v("#")]),n._v(" A = 0011 1100\nB = 0000 1101")]),n._v(" "),a("p",[n._v("A&B = 0000 1100\nA | B = 0011 1101\nA ^ B = 0011 0001\n~A= 1100 0011\n下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：")]),n._v(" "),a("p",[n._v("操作符\t描述\t例子\n＆\t如果相对应位都是1，则结果为1，否则为0\t（A＆B），得到12，即0000 1100\n|\t如果相对应位都是 0，则结果为 0，否则为 1\t（A | B）得到61，即 0011 1101\n^\t如果相对应位值相同，则结果为0，否则为1\t（A ^ B）得到49，即 0011 0001\n〜\t按位取反运算符翻转操作数的每一位，即0变成1，1变成0。\t（〜A）得到-61，即1100 0011\n<< \t按位左移运算符。左操作数按位左移右操作数指定的位数。\tA << 2得到240，即 1111 0000")]),n._v(" "),a("blockquote",[a("blockquote",[a("p",[n._v("按位右移运算符。左操作数按位右移右操作数指定的位数。\tA >> 2得到15即 1111")]),n._v(" "),a("blockquote",[a("p",[n._v("按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。\tA>>>2得到15即0000 1111\n实例\n下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：")])])])]),n._v(" "),a("p",[n._v("Test.java 文件代码：\npublic class Test {\npublic static void main(String[] args) {\nint a = 60; /* 60 = 0011 1100 "),a("em",[n._v("/\nint b = 13; /")]),n._v(" 13 = 0000 1101 "),a("em",[n._v("/\nint c = 0;\nc = a & b;       /")]),n._v(' 12 = 0000 1100 */\nSystem.out.println("a & b = " + c );')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v(' c = a | b;       /* 61 = 0011 1101 */\n System.out.println("a | b = " + c );\n\n c = a ^ b;       /* 49 = 0011 0001 */\n System.out.println("a ^ b = " + c );\n\n c = ~a;          /*-61 = 1100 0011 */\n System.out.println("~a = " + c );\n\n c = a << 2;     /* 240 = 1111 0000 */\n System.out.println("a << 2 = " + c );\n\n c = a >> 2;     /* 15 = 1111 */\n System.out.println("a >> 2  = " + c );\n\n c = a >>> 2;     /* 15 = 0000 1111 */\n System.out.println("a >>> 2 = " + c );\n')])])]),a("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),a("p",[n._v("a & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2  = 15\na >>> 2 = 15\n逻辑运算符\n下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假")]),n._v(" "),a("p",[n._v("操作符\t描述\t例子\n&&\t称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。\t（A && B）为假。\n| |\t称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。\t（A | | B）为真。\n！\t称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。\t！（A && B）为真。\n实例\n下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：")]),n._v(" "),a("p",[n._v('实例\npublic class Test {\npublic static void main(String[] args) {\nboolean a = true;\nboolean b = false;\nSystem.out.println("a && b = " + (a&&b));\nSystem.out.println("a || b = " + (a||b) );\nSystem.out.println("!(a && b) = " + !(a && b));\n}\n}\n以上实例编译运行结果如下：')]),n._v(" "),a("p",[n._v("a && b = false\na || b = true\n!(a && b) = true\n短路逻辑运算符\n当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。")]),n._v(" "),a("p",[n._v('实例\npublic class LuoJi{\npublic static void main(String[] args){\nint a = 5;//定义一个变量；\nboolean b = (a<4)&&(a++<10);\nSystem.out.println("使用短路逻辑运算符的结果为"+b);\nSystem.out.println("a的结果为"+a);\n}\n}\n运行结果为：')]),n._v(" "),a("p",[n._v("使用短路逻辑运算符的结果为false\na的结果为5\n解析： 该程序使用到了短路逻辑运算符(&&)，首先判断 a<4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++<10 的判断，所以 a 的值为 5。")]),n._v(" "),a("p",[n._v("赋值运算符\n下面是Java语言支持的赋值运算符：")]),n._v(" "),a("p",[n._v("操作符\t描述\t例子\n=\t简单的赋值运算符，将右操作数的值赋给左侧操作数\tC = A + B将把A + B得到的值赋给C")]),n._v(" "),a("ul",[a("li",[n._v("=\t加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数\tC + = A等价于C = C + A")])]),n._v(" "),a("ul",[a("li",[n._v("=\t减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数\tC - = A等价于C = C - A")])]),n._v(" "),a("ul",[a("li",[n._v("=\t乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数\tC * = A等价于C = C * A\n/ =\t除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数\tC / = A，C 与 A 同类型时等价于 C = C / A\n（％）=\t取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数\tC％= A等价于C = C％A\n<< =\t左移位赋值运算符\tC << = 2等价于C = C << 2")])]),n._v(" "),a("blockquote",[a("blockquote",[a("p",[n._v("=\t右移位赋值运算符\tC >> = 2等价于C = C >> 2\n＆=\t按位与赋值运算符\tC＆= 2等价于C = C＆2\n^ =\t按位异或赋值操作符\tC ^ = 2等价于C = C ^ 2\n| =\t按位或赋值操作符\tC | = 2等价于C = C | 2\n实例\n下面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：")])])]),n._v(" "),a("p",[n._v('Test.java 文件代码：\npublic class Test {\npublic static void main(String[] args) {\nint a = 10;\nint b = 20;\nint c = 0;\nc = a + b;\nSystem.out.println("c = a + b = " + c );\nc += a ;\nSystem.out.println("c += a  = " + c );\nc -= a ;\nSystem.out.println("c -= a = " + c );\nc *= a ;\nSystem.out.println("c *= a = " + c );\na = 10;\nc = 15;\nc /= a ;\nSystem.out.println("c /= a = " + c );\na = 10;\nc = 15;\nc %= a ;\nSystem.out.println("c %= a  = " + c );\nc <<= 2 ;\nSystem.out.println("c <<= 2 = " + c );\nc >>= 2 ;\nSystem.out.println("c >>= 2 = " + c );\nc >>= 2 ;\nSystem.out.println("c >>= 2 = " + c );\nc &= a ;\nSystem.out.println("c &= a  = " + c );\nc ^= a ;\nSystem.out.println("c ^= a   = " + c );\nc |= a ;\nSystem.out.println("c |= a   = " + c );\n}\n}\n以上实例编译运行结果如下：')]),n._v(" "),a("p",[n._v("c = a + b = 30\nc += a  = 40\nc -= a = 30\nc *= a = 300\nc /= a = 1\nc %= a  = 5\nc <<= 2 = 20\nc >>= 2 = 5\nc >>= 2 = 1\nc &= a  = 0\nc ^= a   = 10\nc |= a   = 10\n条件运算符（?:）\n条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。")]),n._v(" "),a("p",[n._v('variable x = (expression) ? value if true : value if false\n实例\nTest.java 文件代码：\npublic class Test {\npublic static void main(String[] args){\nint a , b;\na = 10;\n// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30\nb = (a == 1) ? 20 : 30;\nSystem.out.println( "Value of b is : " +  b );')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('  // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30\n  b = (a == 10) ? 20 : 30;\n  System.out.println( "Value of b is : " + b );\n')])])]),a("p",[n._v("}\n}\n以上实例编译运行结果如下：")]),n._v(" "),a("p",[n._v("Value of b is : 30\nValue of b is : 20\ninstanceof 运算符\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。")]),n._v(" "),a("p",[n._v("instanceof运算符使用格式如下：")]),n._v(" "),a("p",[n._v("( Object reference variable ) instanceof  (class/interface type)\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。")]),n._v(" "),a("p",[n._v("下面是一个例子：")]),n._v(" "),a("p",[n._v('String name = "James";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。')]),n._v(" "),a("p",[n._v("看下面的例子：")]),n._v(" "),a("p",[n._v("class Vehicle {}")]),n._v(" "),a("p",[n._v("public class Car extends Vehicle {\npublic static void main(String[] args){\nVehicle a = new Car();\nboolean result =  a instanceof Car;\nSystem.out.println( result);\n}\n}\n以上实例编译运行结果如下：")]),n._v(" "),a("p",[n._v("true\nJava运算符优先级\n当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。")]),n._v(" "),a("p",[n._v("例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。")]),n._v(" "),a("p",[n._v("再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。")]),n._v(" "),a("p",[n._v("下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。")]),n._v(" "),a("p",[n._v("类别\t操作符\t关联性\n后缀\t() [] . (点操作符)\t左到右\n一元\texpr++ expr--\t从左到右\n一元\t++expr --expr + - ～ ！\t从右到左\n乘性 \t* /％\t左到右\n加性 \t+ -\t左到右\n移位 \t>> >>>  << \t左到右\n关系 \t> >= < <= \t左到右\n相等 \t==  !=\t左到右\n按位与\t＆\t左到右\n按位异或\t^\t左到右\n按位或\t|\t左到右\n逻辑与\t&&\t左到右\n逻辑或\t| |\t左到右\n条件\t？：\t从右到左\n赋值\t= + = - = * = / =％= >> = << =＆= ^ = | =\t从右到左\n逗号\t，\t左到右")])])}),[],!1,null,null,null);t.default=e.exports}}]);