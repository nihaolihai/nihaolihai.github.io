(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{958:function(n,t,e){"use strict";e.r(t);var a=e(6),r=Object(a.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"jsp-el表达式的基本语法及运算符-超详细"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsp-el表达式的基本语法及运算符-超详细"}},[this._v("#")]),this._v(" JSP EL表达式的基本语法及运算符（超详细）")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('EL 是 JSP 2.0 规范中新增加的，它的基本语法如下：\n${表达式}\n\nEL 表达式类似于 JSP 表达式 <%=表达式%>，EL 语句中的表达式值会被直接送到浏览器显示，通过 page 指令的 isELIgnored 属性来说明是否支持 EL 表达式。\n\n当 isELIgnored 属性值为 false 时，JSP 页面可以使用 EL 表达式，当 isELIgnored 属性值为 true 时，JSP 页面不能使用 EL 表达式。isELIgnored 属性值默认为 false。\n\nEL 的语法简单、使用方便，它以${开始、以}结束。\n1. “[]”与“．”运算符\nEL 使用“[]”和“.”运算符来访问数据，主要使用 EL 获取对象的属性，包括获取 JavaBean 的属性值、获取数组中的元素以及获取集合对象中的元素。\n\n对于 null 值直接以空字符串显示，而不是 null，在运算时也不会发生错误或空指针异常，所以在使用 EL 访问对象的属性时不需要判断对象是否为 null 对象，这样就为编写程序提供了方便。\n1）获取 JavaBean 的属性值\n假设在 JSP 页面中有这样一句话：\n<%=user.getAge()%>\n\n那么可以使用 EL 获取 user 对象的属性 age，代码如下：\n${user.age}\n\n或\n${user["age"]}\n\n其中，点运算符前面为 JavaBean 的对象 user，后面为该对象的属性 age，表示利用 user 对象的 getAge 方法取值并显示在网页上。\n2）获取数组中的元素\n假设在 Controller 或 Servlet 中有这样一段话：\nString dogs[] = {"lili","huahua","guoguo"};\nrequest.setAttribute("array",dogs);\n\n那么在对应视图 JSP 中可以使用 EL 取出数组中的元素，代码如下：\n${array[0]}\n${array[1]}\n${array[2]}\n\n3）获取集合对象中的元素\n假设在 Controller 或 Servlet 中有这样一段话：\nArrayList<UserBean> users = new ArrayList<UserBean>();\nUserBean ub1 = new UserBean("zhang",20);\nUserBean ub2 = new UserBean("zhao",50);\nusers.add(ub1);\nusers.add(ub2);\nrequest.setAttribute("array",users);\n其中，UserBean 有两个属性 name 和 age，那么在对应视图 JSP 页面中可以使用 EL 取出 UserBean 中的属性，代码如下：\n${array[0].name} ${array[0].age}\n${array[1].name} ${array[1].age}\n\n2. 算术运算符\n在 EL 表达式中有 5 个算术运算符，如表 1 所示。\n表 1 EL的算术运算符\n算术运算符\t说 明\t示   例\t结   果\n+\t加\t${13+2}\t15\n-\t减\t${13-2}\t11\n*\t乘\t${13*2}\t26\n/（或div）\t除\t${13/2}或${13 div 2}\t6.5\n%（或mod）\t取模（求余）\t${13%2}或${13 mod2}\t1\n3. 关系运算符\n在 EL 表达式中有 6 个关系运算符，如表 2 所示。\n表 2 EL 的关系运算符\n关系运算符\t说 明\t示 例\t结 果\n==（或 eq）\t等于\t${13==2}或${13 eq 2}\tfalse\n!=（或 ne）\t不等于\t${13!=2}或${13 ne 2}\ttrue\n<（或 lt）\t小于\t${13<2}或${13 lt 2}\tfalse\n>（或gt）\t大于\t${13>2}或${13 gt 2}\ttrue\n<=（或le）\t小于等于\t${13<=2}或${13 le 2}\tfalse\n>=（或ge）\t大于等于\t${13>=2}或${13 ge 2}\ttrue\n4. 逻辑运算符\n在 EL 表达式中有 3 个逻辑运算符，如表 3 所示。\n表 3 EL 的逻辑运算符\n逻辑运算符\t说   明\t示   例\t结   果\n&&（或and）\t逻辑与\t如果 A 为 true，B 为 false，则 A && B（或 A and B）\tfalse\n||（或 or）\t逻辑或\t如果 A 为 true，B 为 false，则 A||B（或 A or B）\ttrue\n!（或 not）\t逻辑非\t如果 A 为 true，则 !A（或 not A）\tfalse\n5. empty 运算符\nempty 运算符用于检测一个值是否为 null，例如变量 A 不存在，则 ${empty A} 返回的结果为 true。\n6. 条件运算符\nEL 中的条件运算符是“? :”，例如 ${A ? B:C}，如果 A 为 true，计算 B 并返回其结果，如果 A 为 false，计算 C 并返回其结果。\n\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);