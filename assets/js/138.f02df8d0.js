(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{627:function(n,e,a){"use strict";a.r(e);var t=a(6),v=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"java-封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-封装"}},[n._v("#")]),n._v(" Java 封装")]),n._v(" "),a("p",[n._v("在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。")]),n._v(" "),a("p",[n._v("封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。")]),n._v(" "),a("p",[n._v("要访问该类的代码和数据，必须通过严格的接口控制。")]),n._v(" "),a("p",[n._v("封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。")]),n._v(" "),a("p",[n._v("适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。")]),n._v(" "),a("p",[n._v("封装的优点")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("良好的封装能够减少耦合。")])]),n._v(" "),a("li",[a("p",[n._v("类内部的结构可以自由修改。")])]),n._v(" "),a("li",[a("p",[n._v("可以对成员变量进行更精确的控制。")])]),n._v(" "),a("li",[a("p",[n._v("隐藏信息，实现细节。")])])]),n._v(" "),a("p",[n._v("实现Java封装的步骤")]),n._v(" "),a("ol",[a("li",[n._v("修改属性的可见性来限制对属性的访问（一般限制为private），例如：")])]),n._v(" "),a("p",[n._v("public class Person {\nprivate String name;\nprivate int age;\n}\n这段代码中，将 name 和 age 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。")]),n._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[n._v("对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：")])]),n._v(" "),a("p",[n._v("public class Person{\nprivate String name;\nprivate int age;\n​\npublic int getAge(){\nreturn age;\n}\n​\npublic String getName(){\nreturn name;\n}\n​\npublic void setAge(int age){\nthis.age = age;\n}\n​\npublic void setName(String name){\nthis.name = name;\n}\n}\n采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。")]),n._v(" "),a("p",[n._v("实例\n让我们来看一个java封装类的例子：")]),n._v(" "),a("p",[n._v("EncapTest.java 文件代码：\n/* 文件名: EncapTest.java */\npublic class EncapTest{")]),n._v(" "),a("p",[n._v("private String name;\nprivate String idNum;\nprivate int age;")]),n._v(" "),a("p",[n._v("public int getAge(){\nreturn age;\n}")]),n._v(" "),a("p",[n._v("public String getName(){\nreturn name;\n}")]),n._v(" "),a("p",[n._v("public String getIdNum(){\nreturn idNum;\n}")]),n._v(" "),a("p",[n._v("public void setAge( int newAge){\nage = newAge;\n}")]),n._v(" "),a("p",[n._v("public void setName(String newName){\nname = newName;\n}")]),n._v(" "),a("p",[n._v("public void setIdNum( String newId){\nidNum = newId;\n}\n}\n以上实例中public方法是外部类访问该类成员变量的入口。")]),n._v(" "),a("p",[n._v("通常情况下，这些方法被称为getter和setter方法。")]),n._v(" "),a("p",[n._v("因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。")]),n._v(" "),a("p",[n._v("通过如下的例子说明EncapTest类的变量怎样被访问：")]),n._v(" "),a("p",[n._v('RunEncap.java 文件代码：\n/* F文件名 : RunEncap.java */\npublic class RunEncap{\npublic static void main(String args[]){\nEncapTest encap = new EncapTest();\nencap.setName("James");\nencap.setAge(20);\nencap.setIdNum("12343ms");')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('  System.out.print("Name : " + encap.getName()+ \n                         " Age : "+ encap.getAge());\n}\n')])])]),a("p",[n._v("}\n以上代码编译运行结果如下:")]),n._v(" "),a("p",[n._v("Name : James Age : 20")])])}),[],!1,null,null,null);e.default=v.exports}}]);