(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{760:function(e,n,s){"use strict";s.r(n);var t=s(6),a=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"第一个mybatis程序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一个mybatis程序"}},[this._v("#")]),this._v(" 第一个MyBatis程序")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('在创建项目之前，首先在 MySQL 数据库中创建 mybatis 数据库和 user 表，sql 语句如下所示：\nCREATE DATABASE mybatis;\nUSE mybatis;\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n  `uid` tinyint(2) NOT NULL,\n  `uname` varchar(20) DEFAULT NULL,\n  `usex` varchar(10) DEFAULT NULL,\n  PRIMARY KEY (`uid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n下面通过一个实例讲解如何使用 MyEclipse 开发 MyBatis 入门程序。\n1）创建 Web 应用，并添加相关 JAR 包\n在 MyEclipse 中创建一个名为 myBatisDemo01 的 Web 应用，将 MyBatis 的核心 JAR 包、依赖 JAR 包以及 MySQL 数据库的驱动 JAR 包一起复制到 /WEB-INF/lib 目录下。添加后的 lib 目录如图 1 所示。\n\nMyBatis相关的JAR包\n图 1  MyBatis相关的JAR包\n2）创建日志文件\nMyBatis 默认使用 log4j 输出日志信息，如果开发者需要查看控制台输出的 SQL 语句，那么需要在 classpath 路径下配置其日志文件。在 myBatis应用的 src 目录下创建 log4j.properties 文件，其内容如下：\n# Global logging configuration\nlog4j.rootLogger=ERROR,stdout\n# MyBatis logging configuration...\nlog4j.logger.com.mybatis=DEBUG\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n\n在日志文件中配置了全局的日志配置、MyBatis 的日志配置和控制台输出，其中 MyBatis 的日志配置用于将 com.mybatis 包下所有类的日志记录级别设置为 DEBUG。该配置文件内容不需要开发者全部手写，可以从 MyBatis 使用手册中的 Logging 小节复制，然后进行简单修改。\n3）创建持久化类\n在 src 目录下创建一个名为 com.mybatis.po 的包，在该包中创建持久化类 MyUser，注意在类中声明的属性与数据表 user 的字段一致。\n\nMyUser 的代码如下：\npackage com.mybatis.po;\n/**\n* springtest数据库中user表的持久类\n*/\npublic class MyUser {\n    private Integer uid; // 主键\n    private String uname;\n    private String usex;\n    // 此处省略setter和getter方法\n    @Override\n    public String toString() { // 为了方便查看结果，重写了toString方法\n        return "User[uid=" + uid + ",uname=" + uname + ",usex=" + usex + "]";\n    }\n}\n4）创建映射文件\n在 src 目录下创建一个名为 com.mybatis.mapper 的包，在该包中创建映射文件 UserMapper.xml。\n\nUserMapper.xml 文件的内容如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="com.mybatis.mapper.UserMapper">\n    \x3c!-- 根据uid查询一个用户信息 --\x3e\n    <select id="selectUserById" parameterType="Integer"\n        resultType="com.mybatis.po.MyUser">\n        select * from user where uid = #{uid}\n    </select>\n    \x3c!-- 查询所有用户信息 --\x3e\n    <select id="selectAllUser" resultType="com.mybatis.po.MyUser">\n        select * from user\n    </select>\n    \x3c!-- 添加一个用户，#{uname}为 com.mybatis.po.MyUser 的属性值 --\x3e\n    <insert id="addUser" parameterType="com.mybatis.po.MyUser">\n        insert into user (uname,usex)\n        values(#{uname},#{usex})\n    </insert>\n    \x3c!--修改一个用户 --\x3e\n    <update id="updateUser" parameterType="com.mybatis.po.MyUser">\n        update user set uname =\n        #{uname},usex = #{usex} where uid = #{uid}\n    </update>\n    \x3c!-- 删除一个用户 --\x3e\n    <delete id="deleteUser" parameterType="Integer">\n        delete from user where uid\n        = #{uid}\n    </delete>\n</mapper>\n在上述映射文件中，<mapper> 元素是配置文件的根元素，它包含了一个 namespace 属性，该属性值通常设置为“包名+SQL映射文件名”，指定了唯一的命名空间。\n\n子元素 <select>、<insert>、<update> 以及 <delete> 中的信息是用于执行查询、添加、修改以及删除操作的配置。在定义的 SQL 语句中，“#{}”表示一个占位符，相当于“?”，而“#{uid}”表示该占位符待接收参数的名称为 uid。\n5）创建 MyBatis 的配置文件\n在 src 目录下创建 MyBatis 的核心配置文件 mybatis-config.xml，在该文件中配置了数据库环境和映射文件的位置，具体内容如下：\n<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n    <settings>\n        <setting name="logImpl" value="LOG4J" />\n    </settings>\n    \x3c!-- 配置mybatis运行环境 --\x3e\n    <environments default="development">\n        <environment id="development">\n            \x3c!-- 使用JDBC的事务管理 --\x3e\n            <transactionManager type="JDBC" />\n            <dataSource type="POOLED">\n                \x3c!-- MySQL数据库驱动 --\x3e\n                <property name="driver" value="com.mysql.jdbc.Driver" />\n                \x3c!-- 连接数据库的URL --\x3e\n                <property name="url"\n                    value="jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8" />\n                <property name="username" value="root" />\n                <property name="password" value="1128" />\n            </dataSource>\n        </environment>\n    </environments>\n    \x3c!-- 将mapper文件加入到配置文件中 --\x3e\n    <mappers>\n        <mapper resource="com/mybatis/mapper/UserMapper.xml" />\n    </mappers>\n</configuration>\n上述映射文件和配置文件都不需要读者完全手动编写，都可以从 MyBatis 使用手册中复制，然后做简单修改。\n6）创建测试类\n在 src 目录下创建一个名为 com.mybatis.test 的包，在该包中创建 MyBatisTest 测试类。在测试类中首先使用输入流读取配置文件，然后根据配置信息构建 SqlSessionFactory 对象。\n\n接下来通过 SqlSessionFactory 对象创建 SqlSession 对象，并使用 SqlSession 对象的方法执行数据库操作。 MyBatisTest 测试类的代码如下：\n纯文本复制\npackage com.mybatis.test;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport com.mybatis.po.MyUser;\npublic class MyBatisTest {\n    public static void main(String[] args) {\n        try {\n            // 读取配置文件 mybatis-config.xml\n            InputStream config = Resources\n                    .getResourceAsStream("mybatis-config.xml");\n            // 根据配置文件构建SqlSessionFactory\n            SqlSessionFactory ssf = new SqlSessionFactoryBuilder()\n                    .build(config);\n            // 通过 SqlSessionFactory 创建 SqlSession\n            SqlSession ss = ssf.openSession();\n            // SqlSession执行映射文件中定义的SQL，并返回映射结果\n            /*\n             * com.mybatis.mapper.UserMapper.selectUserById 为 UserMapper.xml\n             * 中的命名空间+select 的 id\n             */\n            // 查询一个用户\n            MyUser mu = ss.selectOne(\n                    "com.mybatis.mapper.UserMapper.selectUserById", 1);\n            System.out.println(mu);\n            // 添加一个用户\n            MyUser addmu = new MyUser();\n            addmu.setUname("陈恒");\n            addmu.setUsex("男");\n            ss.insert("com.mybatis.mapper.UserMapper.addUser", addmu);\n            // 修改一个用户\n            MyUser updatemu = new MyUser();\n            updatemu.setUid(1);\n            updatemu.setUname("张三");\n            updatemu.setUsex("女");\n            ss.update("com.mybatis.mapper.UserMapper.updateUser", updatemu);\n            // 删除一个用户\n            ss.delete("com.mybatis.mapper.UserMapper.deleteUser", 3);\n            // 查询所有用户\n            List<MyUser> listMu = ss\n                    .selectList("com.mybatis.mapper.UserMapper.selectAllUser");\n            for (MyUser myUser : listMu) {\n                System.out.println(myUser);\n            }\n            // 提交事务\n            ss.commit();\n            // 关闭 SqlSession\n            ss.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);