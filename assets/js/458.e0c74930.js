(window.webpackJsonp=window.webpackJsonp||[]).push([[458],{947:function(n,e,t){"use strict";t.r(e);var r=t(6),a=Object(r.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"swing-进度条组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swing-进度条组件"}},[this._v("#")]),this._v(" swing 进度条组件")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('进度条（JProgressBar）是一种以可视化形式显示某些任务进度的组件。JProgressBar 类实现了一个用于为长时间的操作提供可视化指示器的 GUI 进度条。在任务的完成进度中，进度条显示该任务完成的百分比。此百分比通常由一个矩形以可视化形式表示，该矩形开始是空的，随着任务的完成逐渐被填充。此外，进度条可显示此百分比的文本表示形式。\n\nJProgressBar 类的常用构造方法和 JSlider 类的常用构造方法一样，这里不再重复。如下示例代码演示了如何创建一个 JProgressBar 类实例。\n//创建一个最小值是0，最大值是100的进度条\nJProgressBar pgbar=new JProgressBar(0,100);\n//创建一个最小值是0，最大值是60，当前值是20的进度条\nJProgressBar pgbar=new JProgressBar(0,60,20);\n\nJProgressBar 类的常用方法如表 1 所示。\n\n表1 JProqressBar类的常用方法\n方法名称\t说明\ngetMaximum()\t返回进度条的最大值\ngetMinimum()\t返回进度条的最小值\ngetPercentComplete()\t返回进度条的完成百分比\ngetString()\t返回当前进度的 String 表示形式\ngetValue()\t返回进度条的当前 value\nsetBorderPainted(boolean b)\t设置 borderPainted 属性，如果进度条应该绘制其边框，则此属性为 true\nsetIndeterminate(boolean\nnewValue)\t设置进度条的 indeterminate 属性，该属性确定进度条处于确定模式中还\n是处于不确定模式中\nsetMaximum(int n)\t将进度条的最大值设置为 n\nsetMinimum(int n)\t将进度条的最小值设置为 n\nsetOrientation(int newOrientation)\t将进度条的方向设置为 newOrientation\nsetString(String s)\t设置进度字符串的值\nsetStringPainted(boolean b)\t设置 stringPainted 属性的值，该属性确定进度条是否应该呈现进度字符串\nsetValue(int n)\t将进度条的当前值设置为 n\nupdateUI()\t将 UI 属性重置为当前外观对应的值\n其中，setOrientation() 方法的参数值必须为 SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL。JProgressBar 使用 BoundedRangeModel 作为其数据模型，以 value 属性表示该任务的“当前”状态，minimum 和 maximum 属性分别表示开始点和结束点。\n\n技巧：如果要执行一个未知长度的任务，可以调用 setlndeterminate(true) 将进度条设置为不确定模式。不确定模式的进度条将持续地显示动画来表示正进行的操作。一旦可以确定任务长度和进度量，则应该更新进度条的值，将其切换到确定模式。\n例 1\n使用 JProgressBar 类创建一个进度条模拟程序升级过程，实现过程如下。\n\n(1) 创建一个继承自 JFrame 的 JProgressBarDemo 类。\n\n(2) 在构造方法中添加一个空的进度条，然后设置它的显示属性。主要代码如下:\npackage ch18;\nimport java.awt.Container;\nimport java.awt.FlowLayout;\nimport java.awt.GridLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JProgressBar;\npublic class JProgressBarDemo extends JFrame\n{\n    //static JProgressBarDemo frame;\n    public JProgressBarDemo()\n    {\n        setTitle("使用进度条");\n        JLabel label=new JLabel("欢迎使用在线升级功能！");\n        //创建一个进度条\n        JProgressBar progressBar=new JProgressBar();\n        JButton button=new JButton("完成");\n        button.setEnabled(false);\n        Container container=getContentPane();\n        container.setLayout(new GridLayout(3,1));\n        JPanel panel1=new JPanel(new FlowLayout(FlowLayout.LEFT));\n        JPanel panel2=new JPanel(new FlowLayout(FlowLayout.CENTER));\n        JPanel panel3=new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        panel1.add(label);    //添加标签\n        panel2.add(progressBar);    //添加进度条\n        panel3.add(button);    //添加按钮\n        container.add(panel1);\n        container.add(panel2);\n        container.add(panel3);\n        progressBar.setStringPainted(true);\n        //如果不需要进度上显示“升级进行中...”，可注释此行\n        progressBar.setString("升级进行中...");\n        //如果需要使用不确定模式，可使用此行\n        //progressBar.setIndeterminate(true);\n        //开启一个线程处理进度\n        new Progress(progressBar, button).start();\n        //单机“完成”按钮结束程序\n        button.addActionListener(new ActionListener()\n        {\n            @Override\n            public void actionPerformed(ActionEvent e)\n            {\n                dispose();\n                System.exit(0);\n            }\n        });\n    }\n    /**\n     * @param args\n     */\n    public static void main(String[] args)\n    {\n        // TODO Auto-generated method stub\n        JProgressBarDemo frame=new JProgressBarDemo();\n        //frame.setBounds(300,200,300,150);    //设置容器的大小\n        frame.setVisible(true);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.pack();\n    }\n}\n\n(3) 创建 Progress 线程并实现对进度条进度的控制，实现代码如下。\nprivate class Progress extends Thread\n{\n    JProgressBar progressBar;\n    JButton button;\n    //进度条上的数字\n    int[] progressValues={6,18,27,39,51,66,81,100};\n    Progress(JProgressBar progressBar,JButton button)\n    {\n        this.progressBar=progressBar;\n        this.button=button;\n    }\n    public void run()\n    {\n        for(int i=0;i<progressValues.length;i++)\n        {\n            try\n            {\n                Thread.sleep(3000);\n            }\n            catch(InterruptedException e)\n            {\n                e.printStackTrace();\n            }\n            //设置进度条的值\n            progressBar.setValue(progressValues[i]);\n        }\n        progressBar.setIndeterminate(false);\n        progressBar.setString("升级完成！");\n        button.setEnabled(true);\n    }\n}\n\n上述代码定义了一个进度条的进度数组 progressValues。线程每隔 1000 毫秒从数组中取一个数字作为当前进度，并使用 JProgressBar 类的 setValue() 方法更新到进度条。最后使进度条显示“升级完成！”字符串，并使“完成”按钮可用。\n\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);