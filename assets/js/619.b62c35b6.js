(window.webpackJsonp=window.webpackJsonp||[]).push([[619],{1109:function(n,t,a){"use strict";a.r(t);var i=a(6),s=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"spring事务管理接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring事务管理接口"}},[this._v("#")]),this._v(" Spring事务管理接口")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Spring 的事务管理是基于 AOP 实现的，而 AOP 是以方法为单位的。Spring 的事务属性分别为传播行为、隔离级别、只读和超时属性，这些属性提供了事务应用的方法和描述策略。\n\n在 Java EE 开发经常采用的分层模式中，Spring 的事务处理位于业务逻辑层，它提供了针对事务的解决方案。\n\n在 Spring 解压包的 libs 目录中，包含一个名称为 spring-tx-3.2.13.RELEASE.jar 的文件，该文件是 Spring 提供的用于事务管理的 JAR 包，其中包括事务管理的三个核心接口：PlatformTransactionManager、TransactionDefinition 和 TransactionStatus。\n\n1. PlatformTransactionManager\nPlatformTransactionManager 接口是 Spring 提供的平台事务管理器，用于管理事务。该接口中提供了三个事务操作方法，具体如下。\nTransactionStatus getTransaction（TransactionDefinition definition）：用于获取事务状态信息。\nvoid commit（TransactionStatus status）：用于提交事务。\nvoid rollback（TransactionStatus status）：用于回滚事务。\n\n在项目中，Spring 将 xml 中配置的事务详细信息封装到对象 TransactionDefinition 中，然后通过事务管理器的 getTransaction() 方法获得事务的状态（TransactionStatus），并对事务进行下一步的操作。\n2. TransactionDefinition\nTransactionDefinition 接口是事务定义（描述）的对象，它提供了事务相关信息获取的方法，其中包括五个操作，具体如下。\nString getName()：获取事务对象名称。\nint getIsolationLevel()：获取事务的隔离级别。\nint getPropagationBehavior()：获取事务的传播行为。\nint getTimeout()：获取事务的超时时间。\nboolean isReadOnly()：获取事务是否只读。\n\n在上述五个方法的描述中，事务的传播行为是指在同一个方法中，不同操作前后所使用的事务。传播行为的种类如表 1 所示。\n\n表 1 传播行为的种类\n属性名称\t值\t描  述\nPROPAGATION_REQUIRED\trequired\t支持当前事务。如果 A 方法已经在事务中，则 B 事务将直接使用。否则将创建新事务\nPROPAGATION_SUPPORTS\tsupports\t支持当前事务。如果 A 方法已经在事务中，则 B 事务将直接使用。否则将以非事务状态执行\nPROPAGATION_MANDATORY\tmandatory\t支持当前事务。如果 A 方法没有事务，则抛出异常\nPROPAGATION_REQUIRES_NEW\trequires_new\t将创建新的事务，如果 A 方法已经在事务中，则将 A 事务挂起\nPROPAGATION_NOT_SUPPORTED\tnot_supported\t不支持当前事务，总是以非事务状态执行。如果 A 方法已经在事务中，则将其挂起\nPROPAGATION_NEVER\tnever\t不支持当前事务，如果 A 方法在事务中，则抛出异常\nPROPAGATION.NESTED\tnested\t嵌套事务，底层将使用 Savepoint 形成嵌套事务\n在事务管理过程中，传播行为可以控制是否需要创建事务以及如何创建事务。\n\n通常情况下，数据的查询不会改变原数据，所以不需要进行事务管理，而对于数据的增加、修改和删除等操作，必须进行事务管理。如果没有指定事务的传播行为，则 Spring3 默认的传播行为是 required。\n3. TransactionStatus\nTransactionStatus 接口是事务的状态，它描述了某一时间点上事务的状态信息。其中包含六个操作，具体如表 2 所示。\n\n表 2  事务的操作\n名称\t说明\nvoid flush()\t刷新事务\nboolean hasSavepoint()\t获取是否存在保存点\nboolean isCompleted()\t获取事务是否完成\nboolean isNewTransaction()\t获取是否是新事务\nboolean isRollbackOnly()\t获取是否回滚\nvoid setRollbackOnly()\t设置事务回滚\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);