(window.webpackJsonp=window.webpackJsonp||[]).push([[577],{1065:function(e,t,n){"use strict";n.r(t);var r=n(6),a=Object(r.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"servlet-接口及其使用方法详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet-接口及其使用方法详解"}},[this._v("#")]),this._v(" servlet 接口及其使用方法详解")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('ServletConfig接口\n在运行 Servlet 程序时，可能需要一些辅助信息，例如，文件使用的编码、使用 Servlet 程序的共享信息等，这些信息可以在 web.xml 文件中使用一个或多个 <init-param> 元素进行配置。当 Tomcat 初始化一个 Servlet 时，会将该 Servlet 的配置信息封装到 ServletConfig 对象中，此时可以通过调用 init（ServletConfig config）方法将 ServletConfig 对象传递给 Servlet。\n\nServletConfig 接口中定义了一系列获取配置信息的方法，如表 1 所示。\n\n表 1 ServletConfig接口的常用方法\n方法说明\t功能描述\nString getInitParameter(String name)\t根据初始化参数名返回对应的初始化参数值\nEnumeration getInitParameterNames()\t返回一个 Enumeration 对象，其中包含了所有的初始化参数名\nServletContext getServletContext()\t返回一个代表当前 Web 应用的 ServletContext 对象\nString getServletName()\t返回 Servlet 的名字，即 web.xml 中 <servlet-name>元素的值下面以 getInitParameter() 方法为例，分步骤讲解该方法的使用。\n1）创建Servlet\n在 com.mengma.servlet 包中创建一个名称为 TestServlet02 的 Servlet 类，并在类中编写用于读取 web.xml 文件中参数信息的代码，如下所示。\n\npackage com.mengma.servlet;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class TestServlet02 extends HttpServlet {\n    protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n        PrintWriter out = response.getWriter();\n        ServletConfig config = this.getServletConfig();\n        String param = config.getInitParameter("encoding");\n        out.println("encoding=" + param);\n    }\n    protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n        this.doGet(request, response);\n    }\n}\n2）配置参数信息\n在 web.xml 文件中为 Servlet 配置一些参数信息，具体的配置代码如下所示：\n<servlet>\n  <servlet-name>TestServlet02</servlet-name>\n  <servlet-class>com.mengma.servlet.TestServlet02</servlet-class>\n  <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n  </init-param>\n</servlet>\n<servlet-mapping>\n  <servlet-name>TestServlet02</servlet-name>\n  <url-pattern>/TestServlet02</url-pattern>\n</servlet-mapping>\n在上面的参数信息中，<init-param> 节点表示要设置的参数，该节点中的 <param-name> 表示参数的名称，<param-value> 表示参数的值，在 <init-param> 节点中为 TestServlet02 配置了一个名为 encoding 的参数，并设置其参数的值为 UTF-8。\n3）运行项目并查看结果\n启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/servletDemo01/TestServlet02 访问 TestServlet02，结果如图 1 所示。\n\n运行结果\n图 1  运行结果\n\n从图 1 中可以看出，web.xml 文件中为 TestServlet02 配置的编码信息被读取了出来。由此可见，通过 ServletConfig 对象可以获得 web.xml 文件中的参数信息。\nServletContext接口\n当 Tomcat 启动时，Tomcat 会为每个 Web 应用创建一个唯一的 ServletContext 对象代表当前的 Web 应用，该对象封装了当前 Web 应用的所有信息。可以利用该对象获取 Web 应用程序的初始化信息、读取资源文件等。下面对 ServletContext 接口的不同作用分别进行讲解。\n1. 获取 Web 应用程序的初始化参数\n在 web.xml 文件中，不仅可以配置 Servlet 的映射信息，还可以配置整个 Web 应用的初始化信息。Web 应用初始化参数的配置方式具体如下所示：\n<context-param>\n    <param-name>XXX</param-name>\n    <param-value>xxx</param-value>\n</context-param>\n<context-param>\n    <param-name>AAA</param-name>\n    <param-value>aaa</param-value>\n</context-param>\n在上面的示例中，<context-param> 元素位于根元素 <web-app> 中，它的子元素 <param-name> 和 <param-value> 分别用于指定参数的名字和参数值。要想获取这些参数名和参数值的信息，可以使用 ServletContext 接口中定义的 getInitParameterNames() 和 getInitParameter（String name）方法分别获取。\n\n下面通过案例演示如何使用 ServletContext 接口获取 Web 应用程序的初始化参数。\n\n1）在 servletDemo01 项目的 web.xml 文件中配置初始化参数信息和 Servlet 信息，其代码如下所示：\n<context-param>\n    <param-name>username</param-name>\n    <param-value>admin</param-value>\n</context-param>\n<context-param>\n    <param-name>password</param-name>\n    <param-value>1234</param-value>\n</context-param>\n<servlet>\n    <servlet-name>TestServlet03</servlet-name>\n    <servlet-class>com.mengma.servlet.TestServlet03</servlet-class>\n</servlet>\n<servlet-mapping>\n    <servlet-name>TestServlet03</servlet-name>\n    <url-pattern>/TestServlet03</url-pattern>\n</servlet-mapping>\n\n2）在项目的 com.mengma.servlet 包中创建一个名称为 TestServlet03 的类，该类中使用 ServletContext 接口获取 web.xml 中的配置信息，如下所示。\npackage com.mengma.servlet;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Enumeration;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class TestServlet03 extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n        response.setContentType("text/html;charset=utf-8");\n        PrintWriter out = response.getWriter();\n        // 得到ServletContext对象\n        ServletContext context = this.getServletContext();\n        // 得到包含所有初始化参数名的Enumeration对象\n        Enumeration<String> paramNames = context.getInitParameterNames();\n        // 遍历所有的初始化参数名，得到相应的参数值并打印\n        while (paramNames.hasMoreElements()) {\n          String name = paramNames.nextElement();\n          String value = context.getInitParameter(name);\n          out.println(name + ":" + value);\n          out.println("<br/>");\n    }\n}\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n        this.doGet(request, response);\n    }\n}\n上述代码中，当通过 this.getServletContext() 方法获取到 ServletContext 对象后，首先调用 getInitParameterNames() 方法，获取到包含所有初始化参数名的 Enumeration 对象，然后遍历 Enumeration 对象，根据获取到的参数名，通过 getInitParamter（String name）方法得到对应的参数值。\n\n3）启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/servletDemo01/TestServlet03 访问 TestServlet03，浏览器的显示结果如图 2 所示。\n\n运行结果\n图 2  运行结果\n\n从图 2 中可以看出，web.xml 文件中配置的信息被读取了出来。由此可见，通过 ServletContext 对象可以获取 Web 应用的初始化参数。\n2. 读取 Web 应用下的资源文件\n在实际开发中，有时会需要读取 Web 应用中的一些资源文件，如配置文件和日志文件等。为此，在 ServletContext 接口中定义了一些读取 Web 资源的方法，这些方法是依靠 Servlet 容器实现的。Servlet 容器根据资源文件相对于 Web 应用的路径，返回关联资源文件的 I/O 流或资源文件在系统的绝对路径等。\n\n表 2 中列举了 ServletContext 接口中用于获取资源路径的相关方法。\n\n表 2 ServletContext接口的常用方法\n方法说明\t功能描述\nSet getResourcePaths(String path)\t\n返回一个 Set 集合，集合中包含资源目录中子目录和文件的路径名 称。参数 path 必须以正斜线（/）开始，指定匹配资源的部分路径\nString getRealPath(String path) \t返回资源文件在服务器文件系统上的真实路径（文件的绝对路径）。参数 path 代表资源文件的虚拟路径，它应该以正斜线（/）开始，/ 表示当前 Web 应用的根目录，如果 Servlet 容器不能将虚拟路径转换为文 件系统的真实路径，则返回 null\n\nURL getResource(String path)\t返回映射到某个资源文件的 URL 对象。参数 path 必须以正斜线（/）开始，/ 表示当前 Web 应用的根目录\nInputStream getResourceAsStream(String path)\t返回映射到某个资源文件的 InputStream 输入流对象。参数 path 的传递规则和 getResource() 方法完全一致了解了 ServletContext 接口中用于获得 Web 资源路径的方法后，下面通过案例分步骤演示如何使用 ServletContext 对象读取资源文件。\n\n案例分步骤演示如何使用 ServletContext 对象读取资源文件。\n\n1）在 servletDemo01 项目的 src 目录中创建一个名称为 itcast.properties 的文件，在创建好的文件中输入如下所示的配置信息：\nusername=admin\npassword=1234\n\n2）在 com.mengma.servlet 包中创建一个名称为 TestServlet04 的 Servlet 类，使用该类读取 itcast.properties 资源文件的内容，其实现代码如下所示。\npackage com.mengma.servlet;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Properties;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class TestServlet04 extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n        response.setContentType("text/html;charset=utf-8");\n        ServletContext context = this.getServletContext();\n        PrintWriter out = response.getWriter();\n        // 获取相对路径中的输入流对象\n        InputStream in = context\n            .getResourceAsStream("/WEB-INF/classes/itcast.properties");\n        Properties pros = new Properties();\n        pros.load(in);\n        out.println("username=" + pros.getProperty("username") + "<br/>");\n        out.println("password=" + pros.getProperty("password") + "<br/>");\n    }\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n        this.doGet(request, response);\n    }\n}\n在上述代码中，使用 ServletContext 的 getResourceAsStream（String path）方法获得了关联 itcast.properties 资源文件的输入流对象，其中的 path 参数必须以正斜线（/）开始，表示 itcast.properties 文件相对于 Web 应用的相对路径。\n\n3）启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/servletDemo01/TestServlet04 访问 TestServlet04\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);