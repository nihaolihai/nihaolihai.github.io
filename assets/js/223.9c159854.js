(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{712:function(n,e,o){"use strict";o.r(e);var a=o(6),i=Object(a.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"maven自定义插件的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven自定义插件的实现"}},[this._v("#")]),this._v(" Maven自定义插件的实现")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('为了快速学习自定义 Maven 插件的过程，接下来将实现一个简单的 Hello Maven 插件，功能很简单：输出 Hello World 插件。具体步骤和操作如下。\n\n创建 Maven 新项目，选择 maven-archetype-plugin 项目向导，如图 1 所示。\n\n选择Archetype\n图 1  选择Archetype\n\n单击 Next 按钮，进入设置 Maven 插件参数界面，输入要创建的插件的 groupId、artifactId 和版本，还有包名，如图 2 所示。\n\n输入坐标\n图 2  输入坐标\n\n单击 Finish 按钮，Archetype 插件会自动创建好一个 Maven 插件项目。因为现在用的 Maven 是 3.x 版本的，所以有必要调整 Maven 插件项目必须依赖的 maven-plugin-api 的版本：从 2.x 改成 3.x。这里用的是 3.3.9 版本。样例项目中的 pom 配置如下，注意粗体标识部分。\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.com.mvn.plugin</groupId>\n    <artifactId>Mvn.Hello.Plugin</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>maven-plugin</packaging>\n    <name>Mvn.Hello.Plugin Maven Plugin</name>\n    \x3c!-- FIXME change it to the project\'s website --\x3e\n    <url>http://maven.apache.org</url>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.maven</groupId>\n            <artifactId>maven-plugin-api</artifactId>\n            <version>3.3.9</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.maven.plugin-tools</groupId>\n            <artifactId>maven-plugin-annotations</artifactId>\n            <version>3.2</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.codehaus.plexus</groupId>\n            <artifactId>plexus-utils</artifactId>\n            <version>3.0.8</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-plugin-plugin</artifactId>\n                <version>3.2</version>\n                <configuration>\n                    <goalPrefix>Mvn.Hello.Plugin</goalPrefix>\n                    <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>mojo-descriptor</id>\n                        <goals>\n                            <goal>descriptor</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>help-goal</id>\n                        <goals>\n                            <goal>helpmojo</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n    <profiles>\n        <profile>\n            <id>run-its</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-invoker-plugin</artifactId>\n                        <version>1.7</version>\n                        <configuration>\n                            <debug>true</debug>\n                            <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>\n                            <pomIncludes>\n                                <pomInclude>*/pom.xml</pomInclude>\n                            </pomIncludes>\n                            <postBuildHookScript>verify</postBuildHookScript>\n                            <localRepositoryPath>${project.build.directory}/local-repo\n                            </localRepositoryPath>\n                            <settingsFile>src/it/settings.xml</settingsFile>\n                            <goals>\n                                <goal>clean</goal>\n                                <goal>test-compile</goal>\n                            </goals>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>integration-test</id>\n                                <goals>\n                                    <goal>install</goal>\n                                    <goal>integration-test</goal>\n                                    <goal>verify</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n到现在为止，基本上创建好了 Maven 插件项目。\n\n在 cn.com.mvn.plugin.hello 包下，创建 Java 类 HelloName，继承 AbstractMojo，并且在类上面使用 @goal 指定该 Mojo 的目标名称为 name，样例配置代码如下：\npackage cn.com.mvn.plugin.hello;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\n/**\n* @goal name\n*/\npublic class HelloName extends AbstractMojo {\n    public void execute() throws MojoExecutionException, MojoFailureException {\n    }\n}\n在前面的代码基础上添加一个 name 属性，用来接收运行插件的时候传过来的 name 参数，并且使用 @parameter 将 name 属性标注成配置点，样例配置代码如下：\npackage cn.com.mvn.plugin.hello;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\n/**\n* @goal name\n*/\npublic class HelloName extends AbstractMojo {\n    /**\n     * @parameter expression="${name}"\n     * @required\n     * @readonly\n     */\n    String name;\n    public void execute() throws MojoExecutionException, MojoFailureException {\n    }\n}\n在 HelloName 类中的 execute() 方法中添加插件要实现的逻辑代码。这里的 HelloName 的功能很简单，只是打印问候，所以样例配置代码如下：\npackage cn.com.mvn.plugin.hello;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\n/**\n* @goal name\n*/\npublic class HelloName extends AbstractMojo {\n    /**\n     * @parameter expression="${name}"\n     * @required\n     * @readonly\n     */\n    String name;\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        System.out.println("Hello" + name);\n    }\n}\n这个插件的目的是打印对 name 的问候。如果 name 为空，或是空字符串，这样的问候就没什么意义了。用户就需要中止问候，并且以日志方式提示用户，样例配置代码如下：\npackage cn.com.mvn.plugin.hello;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\n/**\n* @goal name\n*/\npublic class HelloName extends AbstractMojo {\n    /**\n     * @parameter expression="${name}"\n     * @required\n     * @readonly\n     */\n    String name;\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        if (this.name == null || this.name.trim().equals("")) {\n            // 异常处理\n            throw new MojoExecutionException("name参数必须设置有效的值");\n        } else {\n            System.out.println("Hello" + name);\n            // 日志处理\n            this.getLog().info("这是运行日志提示: 执行完问候");\n        }\n    }\n}\n到现在为止，HelloName Maven 插件的编写就完成了。要进行插件测试的话，还需要将自定义插件安装好，如果要共享给其他开发人员的话，还必须安装到私服或外面的中央仓库中。\n\n运行 mvn install 就可以完成在本地仓库的安装，如果要安装私服或中央仓库，请参考《Apache基金会的Archiva服务器的搭建步骤》和《Maven私服的配置和使用》教程。\n\n在命令行中输入如下命令。\nMvn cn.com.mvn.plugin:Mvn.Hello.Plugin:name -Dname=zhangsan\n\n命令执行效果如下：\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- Mvn.Hello.Plugin:0.0.1-SNAPSHOT:name (default-cli) @ MvnDemoPlugin ---\nHello lisi\n[INFO] 这是运行日志提示：执行完问候\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1.139 s\n[INFO] Finished at: 2017-01-08T11:55:48+08:00\n[INFO] Final Memory: 8M/108M\n[INFO] ------------------------------------------------------------------------\n\n创建一个简单的 Maven 项目，在它的 pom 中添加 HelloName 插件如下：\n<build>\n    <plugins>\n        <plugin>\n            <groupId>cn.com.mvn.plugin</groupId>\n            <artifactId>Mvn.Hello.Plugin</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>name</goal>\n                    </goals>\n                    <phase>test</phase>\n                </execution>\n            </executions>\n            <configuration>\n                <name>lisi</name>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n执行 mvn test，可以看到如下日志。\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] --- Mvn.Hello.Plugin:0.0.1-SNAPSHOT:name (default) @ MvnDemoPlugin ---\nHello lisi\n[INFO] 这是运行日志提示：执行完问候\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);