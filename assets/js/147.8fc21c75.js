(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{637:function(n,t,s){"use strict";s.r(t);var a=s(6),e=Object(a.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"java-hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-hashset"}},[this._v("#")]),this._v(" Java HashSet")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。\n\nHashSet 允许有 null 值。\n\nHashSet 是无序的，即不会记录插入的顺序。\n\nHashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。\n\nHashSet 实现了 Set 接口。\n\n\n\nHashSet 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。\n\n基本类型对应的包装类表如下：\n\n基本类型\t引用类型\nboolean\tBoolean\nbyte\tByte\nshort\tShort\nint\tInteger\nlong\tLong\nfloat\tFloat\ndouble\tDouble\nchar\tCharacter\nHashSet 类位于 java.util 包中，使用前需要引入它，语法格式如下：\n\nimport java.util.HashSet; // 引入 HashSet 类\n以下实例我们创建一个 HashSet 对象 sites，用于保存字符串元素：\n\nHashSet<String> sites = new HashSet<String>();\n添加元素\nHashSet 类提供类很多有用的方法，添加元素可以使用 add() 方法:\n\n实例\n// 引入 HashSet 类      \nimport java.util.HashSet;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n    HashSet<String> sites = new HashSet<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Zhihu");\n        sites.add("Runoob");  // 重复的元素不会被添加\n        System.out.println(sites);\n    }\n}\n执行以上代码，输出结果如下：\n\n[Google, Runoob, Zhihu, Taobao]\n在上面的实例中，Runoob 被添加了两次，它在集合中也只会出现一次，因为集合中的每个元素都必须是唯一的。\n判断元素是否存在\n我们可以使用 contains() 方法来判断元素是否存在于集合当中:\n\n实例\n// 引入 HashSet 类      \nimport java.util.HashSet;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n    HashSet<String> sites = new HashSet<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Zhihu");\n        sites.add("Runoob");  // 重复的元素不会被添加\n        System.out.println(sites.contains("Taobao"));\n    }\n}\n执行以上代码，输出结果如下：\n\ntrue\n删除元素\n我们可以使用 remove() 方法来删除集合中的元素:\n\n实例\n// 引入 HashSet 类      \nimport java.util.HashSet;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n    HashSet<String> sites = new HashSet<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Zhihu");\n        sites.add("Runoob");     // 重复的元素不会被添加\n        sites.remove("Taobao");  // 删除元素，删除成功返回 true，否则为 false\n        System.out.println(sites);\n    }\n}\n执行以上代码，输出结果如下：\n\n[Google, Runoob, Zhihu]\n删除集合中所有元素可以使用 clear 方法：\n\n实例\n// 引入 HashSet 类      \nimport java.util.HashSet;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n    HashSet<String> sites = new HashSet<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Zhihu");\n        sites.add("Runoob");     // 重复的元素不会被添加\n        sites.clear();  \n        System.out.println(sites);\n    }\n}\n执行以上代码，输出结果如下：\n\n[]\n计算大小\n如果要计算 HashSet 中的元素数量可以使用 size() 方法：\n\n实例\n// 引入 HashSet 类      \nimport java.util.HashSet;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n    HashSet<String> sites = new HashSet<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Zhihu");\n        sites.add("Runoob");     // 重复的元素不会被添加\n        System.out.println(sites.size());  \n    }\n}\n执行以上代码，输出结果如下：\n\n4\n迭代 HashSet\n可以使用 for-each 来迭代 HashSet 中的元素。\n\n实例\n// 引入 HashSet 类     \nimport java.util.HashSet;\n\npublic class RunoobTest {\n    public static void main(String[] args) {\n    HashSet<String> sites = new HashSet<String>();\n        sites.add("Google");\n        sites.add("Runoob");\n        sites.add("Taobao");\n        sites.add("Zhihu");\n        sites.add("Runoob");     // 重复的元素不会被添加\n        for (String i : sites) {\n            System.out.println(i);\n        }\n    }\n}\n执行以上代码，输出结果如下：\n\nGoogle\nRunoob\nZhihu\nTaoba\n\n')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);