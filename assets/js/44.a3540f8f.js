(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{531:function(a,t,s){"use strict";s.r(t);var n=s(6),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"spark开发实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spark开发实例"}},[a._v("#")]),a._v(" Spark开发实例")]),a._v(" "),s("p",[a._v("启动 Spark Shell\nSpark 的交互式脚本是一种学习 API 的简单途径，也是分析数据集交互的有力工具。Spark 包含多种运行模式，可使用单机模式，也可以使用分布式模式。为简单起见，本节采用单机模式运行 Spark。")]),a._v(" "),s("p",[a._v("无论采用哪种模式，只要启动完成后，就初始化了一个 SparkContext 对象（SC），同时也创建了一个 SparkSQL 对象用于 SparkSQL 操作。进入 Scala 的交互界面中，就可以进行 RDD 的转换和行动操作。")]),a._v(" "),s("p",[a._v("进入目录 SPARK_HOME/bin 下，执行如下命令启动 Spark Shell。\n$./spark-shell")]),a._v(" "),s("p",[a._v("Spark Shell 使用\n假定本地文件系统中，文件 home/hadoop/SparkData/WordCount/text1 的内容如下。\nhello world\nhello My name is john I love Hadoop programming")]),a._v(" "),s("p",[a._v("下面我们基于该文件进行 Spark Shell 操作。")]),a._v(" "),s("p",[a._v("1）利用本地文件系统的一个文本文件创建一个新 RDD。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('scala>var textFile = sc.textFile("file://home/Hadoop/SparkData/WordCount/text1");\ntextFile:org.apache.spark.rdd.RDD[String] = MappedRDD[1] at textFile at\n<console>:12\n')])])]),s("p",[a._v("2）执行动作操作，计算文档中有多少行。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("scala>textFile.count() //RDD中有多少行\n17/05/17 22:59:07 INFO spark.SparkContext:Job finished:count at<console>:15, took 5.654325469 s\nresl:Long = 2\n")])])]),s("p",[a._v("返回结果表明文档中有“2”行。")]),a._v(" "),s("p",[a._v("3）执行动作操作，获取文档中的第一行内容。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("scala>textFile.first() // RDD 第一行的内容\n17/05/17 23:01:25 INFO spark.SparkContext:Job finished:first at <console>:15,took\n")])])]),s("p",[a._v("返回结果表明文档的第一行内容是“hello world”。")]),a._v(" "),s("p",[a._v("4）转换操作会将一个 RDD 转换成一个新的 RDD。获取包含“hello”的行的代码如下。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('scala>var newRDD = textFile.filter (line => line.contains("hello")) //有多少行含有 hello\nscala>newRDD.ount() // 有多少行含 hello\n17/05/17 23:06:33 INFO spark.SparkContext:Job finished:count at <console>:15，took 0.867975549 s\nres4:Long = 2\n')])])]),s("p",[a._v("这段代码首先通过转换操作 filter 形成一个只包括含有“hello”的行的 RDD，然后再通过 count 计算有多少行。")]),a._v(" "),s("p",[a._v("5）Spark Shell 的 WordCount 实现")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('scala> val file = sc.textFile ("file://home/hendoop/SparkData/WordCount/text1"));\nscala> val count = file.flatMap(line=>line.split("")).map(word => (word,1)).reduceByKey(_+_)\nscala> count.collect()\n17/05/17 23:11:46 INFO spark.SparkContext:Job finished: collect at<console>：17,\ntook 1.624248037 s\nres5: Array[(String, Int)] = Array((hello,2),(world,1),(My,1),(is,1),(love,1),(I,1),(John,1),(hadoop,1),(name,1),(programming,1))\n')])])]),s("p",[a._v("使用 sparkContext 类中的 textFile() 读取本地文件，并生成 MappedBJDD。\n使用 flatMap() 方法将文件内容按照空格拆分单词，拆分形成 FlatMappedRDD。\n使用 map(word=>(word,1)) 将拆分的单词形成 <单词,1> 数据对，此时生成 MappedBJDD。\n使用 reduceByKey() 方法对单词的频度进行统计，由此生成 ShuffledRDD，并由 collect 运行作业得出结果。\n编写Java应用程序")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("安装 maven\n手动安装 maven，可以访问 maven 官方下载 apache-maven-3.3.9-bin.zip。选择安装目录为 /usr/local/maven。\nsudo unzip ~/下载/apache-maven-3.3.9-bin.zip -d/usr/local\ncd /usr/local\nsudo mv apache-maven-3.3.9/ ./maven\nsudo chown -R hadoop ./maven")])]),a._v(" "),s("li",[s("p",[a._v("编写 Java 应用程序代码\n在终端执行以下命令创建一个文件夹 sparkapp2，作为应用程序根目录。\ncd~#进入用户主文件夹\nmkdir -p ./sparkapp2/src/main/java")])])]),a._v(" "),s("p",[a._v("使用 vim./sparkapp2/src/main/java/SimpleApp.java 建立一个名为 SimpleApp.java 的文件，代码如下。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("apache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("spark"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("apache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("spark"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleApp")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" logFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"file:///usr/local/spark/README.md"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Should be some file on your system")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JavaSparkContext")]),a._v(" sc "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JavaSparkContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"local"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Simple App"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"file:///usr/local/spark/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"target/simple-project-1.0.jar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JavaRDD")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" logData "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" sc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("textFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("logFile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" numAs "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" logData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Function")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("contains "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" numBs "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" logData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Function")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("contains")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("printIn "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Lines with a:"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" numAs "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('",lines with b:"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" numBs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("该程序依赖 Spark Java API，因此我们需要通过 maven 进行编译打包。在 ./sparkapp2 中新建文件 pom.xml（vim./sparkapp2/pom.xml），并声明该独立应用程序的信息及与 Spark 的依赖关系，代码如下。")]),a._v(" "),s("div",{staticClass:"language-pom extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<project>\n    <groupld>edu.berkeley</groupId>\n    <artifactId>simple-project</artifactId>\n    <modelVersion>4.0.0</modelVersion>\n    <name>Simple Project</name>\n    <packaging>jar</packaging>\n    <version>l.0</version>\n    <repositories>\n        <repository>\n            <id>Akka repository</id>\n            <url>http://repo.akka.io/releases</url>\n        </repository>\n    </repositories>\n    <dependencies>\n        <dependency> \x3c!--Spark dependency --\x3e\n            <groupId>org.apache.spark<groupId>\n            <artifactId>spark-core_2.11</artifactId>\n            <version>2.1.0</version>\n        </dependency>\n    </dependencies>\n</project>\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("使用 maven 打包 Java 程序\n为了保证 maven 能够正常运行，先执行以下命令检查整个应用程序的文件结构。\ncd ~/sparkapp2\nfind")])]),a._v(" "),s("p",[a._v("文件结构如图 1 所示。\n"),s("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190515/5-1Z51516100T10.PNG",alt:"RUNOOB 图标"}}),a._v("\n接着，可以通过以下代码将这整个应用程序打包成 Jar。\n/usr/local/maven/bin/mvn package")]),a._v(" "),s("p",[a._v("如果运行以上命令后出现类似下面的信息，说明 Jar 包生成成功。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("[INFO] ---------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ---------------------------------------------\n[INFO] Total time: 6.583 s\n[INFO] Finished at: 2017-02-19T15:52:08+08:00\n[INFO] Final Memory: 15M/121M\n[INFO]----------------------------------------------\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[a._v('通过 spark-submit 运行程序\n最后，可以将生成的 Jar 包通过 spark-submit 提交到 Spark 中运行，命令如下。\n/usr/local/spark/bin/spark-submit --class "SimpleApp" ~/sparkapp2/target/simple-project-1.0.jar')])]),a._v(" "),s("p",[a._v("最后得到的结果如下。\nLines with a: 62,Lines with b: 30")])])}),[],!1,null,null,null);t.default=e.exports}}]);