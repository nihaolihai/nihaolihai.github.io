(window.webpackJsonp=window.webpackJsonp||[]).push([[613],{1104:function(n,e,t){"use strict";t.r(e);var o=t(6),a=Object(o.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-jdk动态代理-附带实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdk动态代理-附带实例"}},[this._v("#")]),this._v(" Spring JDK动态代理（附带实例）")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('JDK 动态代理是通过 JDK 中的 java.lang.reflect.Proxy 类实现的。下面通过具体的案例演示 JDK 动态代理的使用。\n1. 创建项目\n在 MyEclipse 中创建一个名称为 springDemo03 的 Web 项目，将 Spring 支持和依赖的 JAR 包复制到 Web 项目的 WEB-INF/lib 目录中，并发布到类路径下。\n2. 创建接口 CustomerDao\n在项目的 src 目录下创建一个名为 com.mengma.dao 的包，在该包下创建一个 CustomerDao 接口，编辑后如下所示。\npackage com.mengma.dao;\npublic interface CustomerDao {\n    public void add(); // 添加\n    public void update(); // 修改\n    public void delete(); // 删除\n    public void find(); // 查询\n}\n3. 创建实现类 CustomerDaoImpl\n在 com.mengma.dao 包下创建 CustomerDao 接口的实现类 CustomerDaoImpl，并实现该接口中的所有方法，如下所示。\npackage com.mengma.dao;\npublic class CustomerDaoImpl implements CustomerDao {\n    @Override\n    public void add() {\n        System.out.println("添加客户...");\n    }\n    @Override\n    public void update() {\n        System.out.println("修改客户...");\n    }\n    @Override\n    public void delete() {\n        System.out.println("删除客户...");\n    }\n    @Override\n    public void find() {\n        System.out.println("修改客户...");\n    }\n}\n4. 创建切面类 MyAspect\n在 src 目录下，创建一个名为 com.mengma.jdk 的包，在该包下创建一个切面类 MyAspect，编辑后如下所示。\npackage com.mengma.jdk;\npublic class MyAspect {\n    public void myBefore() {\n        System.out.println("方法执行之前");\n    }\n    public void myAfter() {\n        System.out.println("方法执行之后");\n    }\n}\n上述代码中，在切面中定义了两个增强的方法，分别为 myBefore() 方法和 myAfter() 方法，用于对目标类（CustomerDaoImpl）进行增强。\n5. 创建代理类 MyBeanFactory\n在 com.mengma.jdk 包下创建一个名为 MyBeanFactory 的类，在该类中使用 java.lang.reflect.Proxy 实现 JDK 动态代理，如下所示。\npackage com.mengma.jdk;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport com.mengma.dao.CustomerDao;\nimport com.mengma.dao.CustomerDaoImpl;\npublic class MyBeanFactory {\n    public static CustomerDao getBean() {\n        // 准备目标类\n        final CustomerDao customerDao = new CustomerDaoImpl();\n        // 创建切面类实例\n        final MyAspect myAspect = new MyAspect();\n        // 使用代理类，进行增强\n        return (CustomerDao) Proxy.newProxyInstance(\n                MyBeanFactory.class.getClassLoader(),\n                new Class[] { CustomerDao.class }, new InvocationHandler() {\n                    public Object invoke(Object proxy, Method method,\n                            Object[] args) throws Throwable {\n                        myAspect.myBefore(); // 前增强\n                        Object obj = method.invoke(customerDao, args);\n                        myAspect.myAfter(); // 后增强\n                        return obj;\n                    }\n                });\n    }\n}\n上述代码中，定义了一个静态的 getBean() 方法，这里模拟 Spring 框架的 IoC 思想，通过调用 getBean() 方法创建实例，第 14 行代码创建了 customerDao 实例。\n\n第 16 行代码创建的切面类实例用于调用切面类中相应的方法；第 18～26 行就是使用代理类对创建的实例 customerDao 中的方法进行增强的代码，其中 Proxy 的 newProxyInstance() 方法的第一个参数是当前类的类加载器，第二参数是所创建实例的实现类的接口，第三个参数就是需要增强的方法。\n\n在目标类方法执行的前后，分别执行切面类中的 myBefore() 方法和 myAfter() 方法。\n6. 创建测试类 JDKProxyTest\n在 com.mengma.jdk 包下创建一个名为 JDKProxyTest 的测试类，如下所示。\npackage com.mengma.jdk;\nimport org.junit.Test;\nimport com.mengma.dao.CustomerDao;\npublic class JDKProxyTest {\n    @Test\n    public void test() {\n        // 从工厂获得指定的内容（相当于spring获得，但此内容时代理对象）\n        CustomerDao customerDao = MyBeanFactory.getBean();\n        // 执行方法\n        customerDao.add();\n        customerDao.update();\n        customerDao.delete();\n        customerDao.find();\n    }\n}\n上述代码中，在调用 getBean() 方法时，获取的是 CustomerDao 类的代理对象，然后调用了该对象中的方法。\n7. 运行项目并查看结果\n使用 JUnit 测试运行 test() 方法，运行成功后，控制台的输出结果如图 1 所示。\n\n从图 1 的输出结果中可以看出，在调用目标类的方法前后，成功调用了增强的代码，由此说明，JDK 动态代理已经实现。\n\n')])])]),e("p",[e("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190701/5-1ZF1153314439.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);