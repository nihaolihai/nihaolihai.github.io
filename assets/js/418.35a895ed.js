(window.webpackJsonp=window.webpackJsonp||[]).push([[418],{922:function(n,e,t){"use strict";t.r(e);var s=t(6),r=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring-mvc-json数据交互-附带实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-json数据交互-附带实例"}},[this._v("#")]),this._v(" Spring MVC JSON数据交互（附带实例）")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('Spring MVC 在数据绑定的过程中需要对传递数据的格式和类型进行转换，它既可以转换 String 等类型的数据，也可以转换 JSON 等其他类型的数据。本节将针对 Spring MVC 中 JSON 类型的数据交互进行讲解。\nJSON 概述\nJSON（JavaScript Object Notation, JS 对象标记）是一种轻量级的数据交换格式。与 XML 一样，JSON 也是基于纯文本的数据格式。它有对象结构和数组结构两种数据结构。\n1）对象结构\n对象结构以“{”开始、以“}”结束，中间部分由 0 个或多个以英文“，”分隔的 key/value 对构成，key 和 value 之间以英文“：”分隔。对象结构的语法结构如下：\n{\n    key1:value1,\n    key2:value2,\n    ...\n}\n\n其中，key 必须为 String 类型，value 可以是 String、Number、Object、Array 等数据类型。例如，一个 person 对象包含姓名、密码、年龄等信息，使用 JSON 的表示形式如下：\n{\n    "pname":"张三",\n    "password":"123456",\n    "page":40\n}\n\n2）数组结构\n数组结构以“[”开始、以“]”结束，中间部分由 0 个或多个以英文“，”分隔的值的列表组成。数组结构的语法结构如下：\n{\n    value1,\n    value2,\n    ...\n}\n\n上述两种（对象、数组）数据结构也可以分别组合构成更加复杂的数据结构。例如，一个 student 对象包含 sno、sname、hobby 和 college 对象，其 JSON 的表示形式如下：\n{\n    "sno":"201802228888",\n    "sname":"张三",\n    "hobby":["篮球","足球"]，\n    "college":{\n        "cname":"清华大学",\n        "city":"北京"\n    }\n}\n\nJSON 数据转换\n为实现浏览器与控制器类之间的 JSON 数据交互，Spring MVC 提供了 MappingJackson2HttpMessageConverter 实现类默认处理 JSON 格式请求响应。该实现类利用 Jackson 开源包读写 JSON 数据，将 Java 对象转换为 JSON 对象和 XML 文档，同时也可以将 JSON 对象和 XML 文档转换为 Java 对象。\n\n在使用注解开发时需要用到两个重要的 JSON 格式转换注解，分别是 @RequestBody 和 @ResponseBody。\n@RequestBody：用于将请求体中的数据绑定到方法的形参中，该注解应用在方法的形参上。\n@ResponseBody：用于直接返回 return 对象，该注解应用在方法上。\n\n下面通过一个案例来演示如何进行 JSON 数据交互，具体步骤如下。\n1）创建应用并导入相关 JAR 包\n创建 springMVCDemo05 应用，然后将 Spring MVC 的相关 JAR 包、JSON 转换包添加到 springMVCDemo05 的 lib 目录下。springMVCDemo05 的 lib 目录如图 1 所示。\n\nspringMVCDemo05的相关JAR包\n图 1  springMVCDemo05的相关JAR包\n2）配置 web.xml\n在 web.xml 文件中对 Spring MVC 的前端控制器等信息进行配置，其代码和《数据绑定和表单标签的应用》教程中的 SpringMVCDemo04 一样，这里不再赘述。\n3）配置 Spring MVC 的核心配置文件\n在 WEB-INF 目录下创建 Spring MVC 的核心配置文件 springmvc-servlet.xml，代码如下：\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n    xmlns:mvc="http://www.springframework.org/schema/mvc"\n    xmlns:p="http://www.springframework.org/schema/p" \n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n    \x3c!-- 使用扫描机制扫描控制器类 --\x3e\n    <context:component-scan base-package="controller" />\n    <mvc:annotation-driven />\n    \x3c!-- annotation-driven用于简化开发的配置，注解DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter --\x3e\n    \x3c!-- 使用resources过滤掉不需要dispatcherservlet的资源（即静态资源，例如css、js、html、images）。\n        在使用resources时必须使用annotation-driven，否则resources元素会阻止任意控制器被调用 --\x3e\n    \x3c!-- 允许js目录下的所有文件可见 --\x3e\n    <mvc:resources location="/js/" mapping="/js/**" />\n    \x3c!-- 配置视图解析器 --\x3e\n    <bean\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n        <property name="prefix" value="/WEB-INF/jsp/" />\n        <property name="suffix" value=".jsp" />\n    </bean>\n</beans>\n4）创建 POJO 类\n在 src 目录下创建 pojo 包，并在该包中创建 POJO 类 Person，代码如下：\npackage pojo;\n\npublic class Person {\n    private String pname;\n    private String password;\n    private Integer page;\n    //省略setter和getter方法\n}\n\n5）创建 JSP 页面测试 JSON 数据交互\n在页面 index.jsp 来测试 JSON 数据交互，代码如下：\n<%@ page language="java" contentType="text/html; charset=UTF-8"\n    pageEncoding="UTF-8"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n<title></title>\n<script type="text/javaScript" src="${pageContext.request.contextPath }/js/jquery-1.8.3.min.js"><\/script>\n</head>\n<body>\n    <form action="">\n        用户名：<input type="text" name="pname" id="pname" /><br> \n        密码：<input type="password" name="password" id="password" /> <br> \n        年龄：<input type="text" name="page" id="page"><br> \n        <input type="button" value="测试" onclick="testJson()" />\n    </form>\n</body>\n<script type="text/javaScript">\n    function testJson() {\n        //获取输入的值pname为id\n        alert($("#pname").val());\n        var pname = $("#pname").val();\n        var password = $("#password").val();\n        var page = $("#page").val();\n        $.ajax({\n            //请求路径\n            url : "${pageContext.request.contextPath }/testJson",\n            //请求类型\n            type : "post",\n            //data表示发送的数据\n            data : JSON.stringify({\n                pname : pname,\n                password : password,\n                page : page\n            }), //定义发送请求的数据格式为JSON字符串\n            contentType : "application/json;charset=utf-8",\n            //定义回调响应的数据格式为JSON字符串，该属性可以省略\n            dataType : "json",\n            //成功响应的结果\n            success : function(data) {\n                if (data != null) {\n                    alert("输入的用户名：" + data.pname + "，密码：" + data.password\n                            + "， 年龄：" + data.page);\n                }\n            }\n        });\n    }\n<\/script>\n</html>\n在 index.jsp 页面中编写了一个测试 JSON 交互的表单，当单击“测试”按钮时执行页面中的 testJson() 函数。在该函数中使用了 jQuery 的 AJAX 方式将 JSON 格式的数据传递给以“/testJson”结尾的请求中。\n\n因为在 index.jsp 中使用的是 jQuery 的 AJAX 进行的 JSON 数据提交和响应，所以还需要引入 jquery.js 文件。本例引入了 WebContent 目录下 js 文件夹中的 jquery-3.2.1.min.js，读者可以在源程序中找到该文件。\n6）创建控制器类\n在 src 目录下创建 controller 包，并在该包中创建一个用于用户操作的控制器类 TestController，代码如下：\npackage TestController;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport pojo.Person;\n@Controller\npublic class TestController {\n    /**\n     * 接收页面请求的JSON参数，并返回JSON格式的结果\n     */\n    @RequestMapping("testJson")\n    @ResponseBody\n    public Person testJson(@RequestBody Person user) {\n        // 打印接收的JSON格式数据\n        System.out.println("pname=" + user.getPname() + ",password="\n                + user.getPassword() + ",page" + user.getPage());\n        ;\n        // 返回JSON格式的响应\n        return user;\n    }\n}\n在上述控制器类中编写了接收和响应 JSON 格式数据的 testJson 方法，方法中的 @RequestBody 注解用于将前端请求体中的 JSON 格式数据绑定到形参 user 上，@ResponseBody 注解用于直接返回 Person 对象（当返回 POJO 对象时默认转换为 JSON 格式数据进行响应）。\n7）运行 index.jsp 页面，测试程序\n将 springMVCDemo05 应用发布到 Tomcat 服务器并启动服务器，在浏览器中访问地址“http://localhost：8080/springMVCDemo05/index.jsp”\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);