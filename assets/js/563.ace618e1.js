(window.webpackJsonp=window.webpackJsonp||[]).push([[563],{1060:function(e,t,n){"use strict";n.r(t);var r=n(6),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"servlet-response-sendredirect-实现重定向-页面跳转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#servlet-response-sendredirect-实现重定向-页面跳转"}},[e._v("#")]),e._v(" servlet response.sendRedirect()实现重定向（页面跳转）")]),e._v(" "),n("p",[e._v("在某些情况下，针对客户端的请求，一个 Servlet 类可能无法完成全部工作。这时，可以使用请求重定向完成这一工作。")]),e._v(" "),n("p",[e._v("请求重定向指 Web 服务器接收到客户端的请求后，可能由于某些条件的限制，不能访问当前请求 URL 所指向的 Web 资源，而是指定了一个新的资源路径，让客户端重新发送请求。")]),e._v(" "),n("p",[e._v("为了实现请求重定向，HttpServletResponse 接口定义了一个 sendRedirect() 方法，该方法用于生成 302 响应码和 Location 响应头，从而通知客户端重新访问 Location 响应头中指定的 URL，sendRedirect() 方法的完整语法如下所示：\npublic void sendRedirect(java.lang.String location) throws java.io.IOException")]),e._v(" "),n("p",[e._v("在上述方法代码中，参数 location 可以使用相对 URL，Web 服务器会自动将相对 URL 翻译成绝对 URL，再生成 Location 头字段。")]),e._v(" "),n("p",[e._v("sendRedirect() 方法的工作原理如图 1 所示。\nsendRedirect()方法的工作原理\n图 1  sendRedirect()方法的工作原理")]),e._v(" "),n("p",[e._v("在图 1 中，当客户端访问 Servlet1 时，由于在 Servlet1 中调用了 sendRedirect() 方法将请求重定向到 Servlet2，因此，浏览器收到 Servlet1 的响应消息后，立刻向 Servlet2 发送请求，Servlet2 对请求处理完毕后，再将响应消息回送给客户端浏览器并显示。")]),e._v(" "),n("p",[e._v("下面通过一个用户登录的案例分步骤讲解 sendRedirect() 方法的使用。\n1）创建页面文件\n在 servletDemo02 项目的 WebContent 目录下创建一个用户登录的页面 login.html 和登录成功的页面 welcome.html，编辑后如下所示。\n① login.html文件\n<!DOCTYPE HTML>\n")]),n("html",[n("head",[n("meta",{attrs:{charset:"UTF-8"}}),e._v(" "),n("title",[e._v("用户登录")])]),e._v(" "),n("body",[n("form",{attrs:{action:"/servletDemo02/LoginServlet",method:"POST"}},[e._v("\n用户名："),n("input",{attrs:{type:"text",name:"username"}}),n("br"),e._v("\n密   码："),n("input",{attrs:{type:"password",name:"password"}}),n("br"),e._v(" "),n("br"),e._v(" "),n("input",{attrs:{type:"submit",value:"登录"}})])])]),e._v("\n② welcome.html文件\n<!DOCTYPE HTML>\n"),n("html",[n("head",[n("meta",{attrs:{charset:"UTF-8"}}),e._v(" "),n("title",[e._v("欢迎页面")])]),e._v(" "),n("body",[e._v("\n欢迎你，登陆成功！\n")])]),e._v('\n2）创建 Servlet\n在 servletDemo02 项目的 com.mengma.response 包中创建一个名为 LoginServlet 的 Servlet 类，用于处理用户登录请求，如下所示。\npackage com.mengma.servlet;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class LoginServlet extends HttpServlet {\npublic void doGet(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {\nresponse.setContentType("text/html;charset=utf-8");\n// 用 HttpServletRequest 对象的 getParameter() 方法获取用户名和密码\nString username = request.getParameter("username");\nString password = request.getParameter("password");\n// 假设用户名和密码分别为 admin 和 123456\nif ("admin".equals(username) && ("123456").equals(password)) {\n// 如果用户名和密码正确，重定向到 welcome.html\nresponse.sendRedirect("/servletDemo02/welcome.html");\n} else {\n// 如果用户名和密码错误，重定向到 login.html\nresponse.sendRedirect("/servletDemo02/login.html");\n}\n}\npublic void doPost(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {\ndoGet(request, response);\n}\n}\n在上述代码中，首先通过 getParameter() 方法分别获取用户名和密码，然后判断表单中输入的用户名和密码是否为指定的“admin”和“123456”，如果是，则将请求重定向到 welcome.html 页面，否则重定向到 login.html 页面。\n3）运行项目并查看结果\n启动 Tomcat 服务器，在浏览器的地址栏中输入地址 http://localhost:8080/servletDemo02/login.html 访问 login.html'),n("p"),e._v(" "),n("p",[n("img",{attrs:{src:"http://c.biancheng.net/uploads/allimg/190611/5-1Z61113591GE.png",alt:"RUNOOB 图标"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);