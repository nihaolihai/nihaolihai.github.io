(window.webpackJsonp=window.webpackJsonp||[]).push([[611],{1099:function(n,e,t){"use strict";t.r(e);var a=t(6),r=Object(a.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"spring自动装配bean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring自动装配bean"}},[this._v("#")]),this._v(" Spring自动装配Bean")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('除了使用 XML 和 Annotation 的方式装配 Bean 以外，还有一种常用的装配方式——自动装配。自动装配就是指 Spring 容器可以自动装配（autowire）相互协作的 Bean 之间的关联关系，将一个 Bean 注入其他 Bean 的 Property 中。\n\n要使用自动装配，就需要配置 <bean> 元素的 autowire 属性。autowire 属性有五个值，具体说明如表 1 所示。\n\n表 1 autowire 的属性和作用\n名称\t说明\nbyName\t根据 Property 的 name 自动装配，如果一个 Bean 的 name 和另一个 Bean 中的 Property 的 name 相同，则自动装配这个 Bean 到 Property 中。\nbyType\t根据 Property 的数据类型（Type）自动装配，如果一个 Bean 的数据类型兼容另一个 Bean 中 Property 的数据类型，则自动装配。\nconstructor\t根据构造方法的参数的数据类型，进行 byType 模式的自动装配。\nautodetect\t如果发现默认的构造方法，则用 constructor 模式，否则用 byType 模式。\nno\t默认情况下，不使用自动装配，Bean 依赖必须通过 ref 元素定义。下面通过修改《Spring基于Annotation装配Bean》中的案例演示如何实现自动装配。首先将 applicationContext.xml 配置文件修改成自动装配形式，如下所示。\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n    xmlns:aop="http://www.springframework.org/schema/aop"\n    xmlns:p="http://www.springframework.org/schema/p" \n    xmlns:tx="http://www.springframework.org/schema/tx"\n    xmlns:context="http://www.springframework.org/schema/context"\n    xsi:schemaLocation="  \n            http://www.springframework.org/schema/beans \n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n            http://www.springframework.org/schema/aop \n            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd  \n            http://www.springframework.org/schema/tx \n            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd">\n    <bean id="personDao" class="com.mengma.annotation.PersonDaoImpl" />\n    <bean id="personService" class="com.mengma.annotation.PersonServiceImpl"\n        autowire="byName" />\n    <bean id="personAction" class="com.mengma.annotation.PersonAction"\n        autowire="byName" />\n</beans>\n在上述配置文件中，用于配置 personService 和 personAction 的 <bean> 元素中除了 id 和 class 属性以外，还增加了 autowire 属性，并将其属性值设置为 byName（按属性名称自动装配）。\n\n默认情况下，配置文件中需要通过 ref 装配 Bean，但设置了 autowire="byName"，Spring 会在配置文件中自动寻找与属性名字 personDao 相同的 <bean>，找到后，通过调用 setPersonDao（PersonDao personDao）方法将 id 为 personDao 的 Bean 注入 id 为 personService 的 Bean 中，这时就不需要通过 ref 装配了。\n\n使用 JUnit 再次运行测试类中的 test() 方法\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);